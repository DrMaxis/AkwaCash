(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/frontend"],{

/***/ "./node_modules/dom7/dist/dom7.modular.js":
/*!************************************************!*\
  !*** ./node_modules/dom7/dist/dom7.modular.js ***!
  \************************************************/
/*! exports provided: $, addClass, removeClass, hasClass, toggleClass, attr, removeAttr, prop, data, removeData, dataset, val, transform, transition, on, off, once, trigger, transitionEnd, animationEnd, width, outerWidth, height, outerHeight, offset, hide, show, styles, css, toArray, each, forEach, filter, map, html, text, is, indexOf, index, eq, append, appendTo, prepend, prependTo, insertBefore, insertAfter, next, nextAll, prev, prevAll, siblings, parent, parents, closest, find, children, remove, detach, add, empty, scrollTo, scrollTop, scrollLeft, animate, stop, click, blur, focus, focusin, focusout, keyup, keydown, keypress, submit, change, mousedown, mousemove, mouseup, mouseenter, mouseleave, mouseout, mouseover, touchstart, touchend, touchmove, resize, scroll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$", function() { return $; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return addClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return removeClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return hasClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleClass", function() { return toggleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attr", function() { return attr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAttr", function() { return removeAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function() { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "data", function() { return data; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeData", function() { return removeData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataset", function() { return dataset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "val", function() { return val; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "off", function() { return off; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "once", function() { return once; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transitionEnd", function() { return transitionEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animationEnd", function() { return animationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "width", function() { return width; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerWidth", function() { return outerWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "height", function() { return height; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outerHeight", function() { return outerHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return offset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return hide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "show", function() { return show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "styles", function() { return styles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return css; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return toArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "each", function() { return each; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexOf", function() { return indexOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function() { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function() { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendTo", function() { return appendTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function() { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependTo", function() { return prependTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertBefore", function() { return insertBefore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfter", function() { return insertAfter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "next", function() { return next; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextAll", function() { return nextAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prev", function() { return prev; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prevAll", function() { return prevAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "siblings", function() { return siblings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parent", function() { return parent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parents", function() { return parents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "children", function() { return children; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return remove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTo", function() { return scrollTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollTop", function() { return scrollTop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollLeft", function() { return scrollLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stop", function() { return stop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "click", function() { return click; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blur", function() { return blur; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focus", function() { return focus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusin", function() { return focusin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusout", function() { return focusout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyup", function() { return keyup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keydown", function() { return keydown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keypress", function() { return keypress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "submit", function() { return submit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "change", function() { return change; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousedown", function() { return mousedown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mousemove", function() { return mousemove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseup", function() { return mouseup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseenter", function() { return mouseenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseleave", function() { return mouseleave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseout", function() { return mouseout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mouseover", function() { return mouseover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchstart", function() { return touchstart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchend", function() { return touchend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "touchmove", function() { return touchmove; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resize", function() { return resize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scroll", function() { return scroll; });
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/dist/ssr-window.esm.js");
/**
 * Dom7 2.1.3
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * http://framework7.io/docs/dom.html
 *
 * Copyright 2019, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: February 11, 2019
 */


class Dom7 {
  constructor(arr) {
    const self = this;
    // Create array-like object
    for (let i = 0; i < arr.length; i += 1) {
      self[i] = arr[i];
    }
    self.length = arr.length;
    // Return collection with methods
    return this;
  }
}

function $(selector, context) {
  const arr = [];
  let i = 0;
  if (selector && !context) {
    if (selector instanceof Dom7) {
      return selector;
    }
  }
  if (selector) {
      // String
    if (typeof selector === 'string') {
      let els;
      let tempParent;
      const html = selector.trim();
      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
        let toCreate = 'div';
        if (html.indexOf('<li') === 0) toCreate = 'ul';
        if (html.indexOf('<tr') === 0) toCreate = 'tbody';
        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
        if (html.indexOf('<tbody') === 0) toCreate = 'table';
        if (html.indexOf('<option') === 0) toCreate = 'select';
        tempParent = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createElement(toCreate);
        tempParent.innerHTML = html;
        for (i = 0; i < tempParent.childNodes.length; i += 1) {
          arr.push(tempParent.childNodes[i]);
        }
      } else {
        if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
          // Pure ID selector
          els = [ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].getElementById(selector.trim().split('#')[1])];
        } else {
          // Other selectors
          els = (context || ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"]).querySelectorAll(selector.trim());
        }
        for (i = 0; i < els.length; i += 1) {
          if (els[i]) arr.push(els[i]);
        }
      }
    } else if (selector.nodeType || selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"] || selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"]) {
      // Node/element
      arr.push(selector);
    } else if (selector.length > 0 && selector[0].nodeType) {
      // Array of elements or instance of Dom
      for (i = 0; i < selector.length; i += 1) {
        arr.push(selector[i]);
      }
    }
  }
  return new Dom7(arr);
}

$.fn = Dom7.prototype;
$.Class = Dom7;
$.Dom7 = Dom7;

function unique(arr) {
  const uniqueArray = [];
  for (let i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
  }
  return uniqueArray;
}
function toCamelCase(string) {
  return string.toLowerCase().replace(/-(.)/g, (match, group1) => group1.toUpperCase());
}

function requestAnimationFrame(callback) {
  if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].requestAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].requestAnimationFrame(callback);
  else if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitRequestAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitRequestAnimationFrame(callback);
  return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].setTimeout(callback, 1000 / 60);
}
function cancelAnimationFrame(id) {
  if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].cancelAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].cancelAnimationFrame(id);
  else if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitCancelAnimationFrame) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].webkitCancelAnimationFrame(id);
  return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].clearTimeout(id);
}

// Classes and attributes
function addClass(className) {
  if (typeof className === 'undefined') {
    return this;
  }
  const classes = className.split(' ');
  for (let i = 0; i < classes.length; i += 1) {
    for (let j = 0; j < this.length; j += 1) {
      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.add(classes[i]);
    }
  }
  return this;
}
function removeClass(className) {
  const classes = className.split(' ');
  for (let i = 0; i < classes.length; i += 1) {
    for (let j = 0; j < this.length; j += 1) {
      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.remove(classes[i]);
    }
  }
  return this;
}
function hasClass(className) {
  if (!this[0]) return false;
  return this[0].classList.contains(className);
}
function toggleClass(className) {
  const classes = className.split(' ');
  for (let i = 0; i < classes.length; i += 1) {
    for (let j = 0; j < this.length; j += 1) {
      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.toggle(classes[i]);
    }
  }
  return this;
}
function attr(attrs, value) {
  if (arguments.length === 1 && typeof attrs === 'string') {
    // Get attr
    if (this[0]) return this[0].getAttribute(attrs);
    return undefined;
  }

  // Set attrs
  for (let i = 0; i < this.length; i += 1) {
    if (arguments.length === 2) {
      // String
      this[i].setAttribute(attrs, value);
    } else {
      // Object
      // eslint-disable-next-line
      for (const attrName in attrs) {
        this[i][attrName] = attrs[attrName];
        this[i].setAttribute(attrName, attrs[attrName]);
      }
    }
  }
  return this;
}
// eslint-disable-next-line
function removeAttr(attr) {
  for (let i = 0; i < this.length; i += 1) {
    this[i].removeAttribute(attr);
  }
  return this;
}
// eslint-disable-next-line
function prop(props, value) {
  if (arguments.length === 1 && typeof props === 'string') {
    // Get prop
    if (this[0]) return this[0][props];
  } else {
    // Set props
    for (let i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i][props] = value;
      } else {
        // Object
        // eslint-disable-next-line
        for (const propName in props) {
          this[i][propName] = props[propName];
        }
      }
    }
    return this;
  }
}
function data(key, value) {
  let el;
  if (typeof value === 'undefined') {
    el = this[0];
    // Get value
    if (el) {
      if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {
        return el.dom7ElementDataStorage[key];
      }

      const dataKey = el.getAttribute(`data-${key}`);
      if (dataKey) {
        return dataKey;
      }
      return undefined;
    }
    return undefined;
  }

  // Set value
  for (let i = 0; i < this.length; i += 1) {
    el = this[i];
    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
    el.dom7ElementDataStorage[key] = value;
  }
  return this;
}
function removeData(key) {
  for (let i = 0; i < this.length; i += 1) {
    const el = this[i];
    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
      el.dom7ElementDataStorage[key] = null;
      delete el.dom7ElementDataStorage[key];
    }
  }
}
function dataset() {
  const el = this[0];
  if (!el) return undefined;
  const dataset = {}; // eslint-disable-line
  if (el.dataset) {
    // eslint-disable-next-line
    for (const dataKey in el.dataset) {
      dataset[dataKey] = el.dataset[dataKey];
    }
  } else {
    for (let i = 0; i < el.attributes.length; i += 1) {
      // eslint-disable-next-line
      const attr = el.attributes[i];
      if (attr.name.indexOf('data-') >= 0) {
        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;
      }
    }
  }
  // eslint-disable-next-line
  for (const key in dataset) {
    if (dataset[key] === 'false') dataset[key] = false;
    else if (dataset[key] === 'true') dataset[key] = true;
    else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
  }
  return dataset;
}
function val(value) {
  const dom = this;
  if (typeof value === 'undefined') {
    if (dom[0]) {
      if (dom[0].multiple && dom[0].nodeName.toLowerCase() === 'select') {
        const values = [];
        for (let i = 0; i < dom[0].selectedOptions.length; i += 1) {
          values.push(dom[0].selectedOptions[i].value);
        }
        return values;
      }
      return dom[0].value;
    }
    return undefined;
  }

  for (let i = 0; i < dom.length; i += 1) {
    const el = dom[i];
    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {
      for (let j = 0; j < el.options.length; j += 1) {
        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;
      }
    } else {
      el.value = value;
    }
  }
  return dom;
}
// Transforms
// eslint-disable-next-line
function transform(transform) {
  for (let i = 0; i < this.length; i += 1) {
    const elStyle = this[i].style;
    elStyle.webkitTransform = transform;
    elStyle.transform = transform;
  }
  return this;
}
function transition(duration) {
  if (typeof duration !== 'string') {
    duration = `${duration}ms`; // eslint-disable-line
  }
  for (let i = 0; i < this.length; i += 1) {
    const elStyle = this[i].style;
    elStyle.webkitTransitionDuration = duration;
    elStyle.transitionDuration = duration;
  }
  return this;
}
// Events
function on(...args) {
  let [eventType, targetSelector, listener, capture] = args;
  if (typeof args[1] === 'function') {
    [eventType, listener, capture] = args;
    targetSelector = undefined;
  }
  if (!capture) capture = false;

  function handleLiveEvent(e) {
    const target = e.target;
    if (!target) return;
    const eventData = e.target.dom7EventData || [];
    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }
    if ($(target).is(targetSelector)) listener.apply(target, eventData);
    else {
      const parents = $(target).parents(); // eslint-disable-line
      for (let k = 0; k < parents.length; k += 1) {
        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);
      }
    }
  }
  function handleEvent(e) {
    const eventData = e && e.target ? e.target.dom7EventData || [] : [];
    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }
    listener.apply(this, eventData);
  }
  const events = eventType.split(' ');
  let j;
  for (let i = 0; i < this.length; i += 1) {
    const el = this[i];
    if (!targetSelector) {
      for (j = 0; j < events.length; j += 1) {
        const event = events[j];
        if (!el.dom7Listeners) el.dom7Listeners = {};
        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
        el.dom7Listeners[event].push({
          listener,
          proxyListener: handleEvent,
        });
        el.addEventListener(event, handleEvent, capture);
      }
    } else {
      // Live events
      for (j = 0; j < events.length; j += 1) {
        const event = events[j];
        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];
        el.dom7LiveListeners[event].push({
          listener,
          proxyListener: handleLiveEvent,
        });
        el.addEventListener(event, handleLiveEvent, capture);
      }
    }
  }
  return this;
}
function off(...args) {
  let [eventType, targetSelector, listener, capture] = args;
  if (typeof args[1] === 'function') {
    [eventType, listener, capture] = args;
    targetSelector = undefined;
  }
  if (!capture) capture = false;

  const events = eventType.split(' ');
  for (let i = 0; i < events.length; i += 1) {
    const event = events[i];
    for (let j = 0; j < this.length; j += 1) {
      const el = this[j];
      let handlers;
      if (!targetSelector && el.dom7Listeners) {
        handlers = el.dom7Listeners[event];
      } else if (targetSelector && el.dom7LiveListeners) {
        handlers = el.dom7LiveListeners[event];
      }
      if (handlers && handlers.length) {
        for (let k = handlers.length - 1; k >= 0; k -= 1) {
          const handler = handlers[k];
          if (listener && handler.listener === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (!listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          }
        }
      }
    }
  }
  return this;
}
function once(...args) {
  const dom = this;
  let [eventName, targetSelector, listener, capture] = args;
  if (typeof args[1] === 'function') {
    [eventName, listener, capture] = args;
    targetSelector = undefined;
  }
  function onceHandler(...eventArgs) {
    listener.apply(this, eventArgs);
    dom.off(eventName, targetSelector, onceHandler, capture);
    if (onceHandler.dom7proxy) {
      delete onceHandler.dom7proxy;
    }
  }
  onceHandler.dom7proxy = listener;
  return dom.on(eventName, targetSelector, onceHandler, capture);
}
function trigger(...args) {
  const events = args[0].split(' ');
  const eventData = args[1];
  for (let i = 0; i < events.length; i += 1) {
    const event = events[i];
    for (let j = 0; j < this.length; j += 1) {
      const el = this[j];
      let evt;
      try {
        evt = new ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].CustomEvent(event, {
          detail: eventData,
          bubbles: true,
          cancelable: true,
        });
      } catch (e) {
        evt = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createEvent('Event');
        evt.initEvent(event, true, true);
        evt.detail = eventData;
      }
      // eslint-disable-next-line
      el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);
      el.dispatchEvent(evt);
      el.dom7EventData = [];
      delete el.dom7EventData;
    }
  }
  return this;
}
function transitionEnd(callback) {
  const events = ['webkitTransitionEnd', 'transitionend'];
  const dom = this;
  let i;
  function fireCallBack(e) {
    /* jshint validthis:true */
    if (e.target !== this) return;
    callback.call(this, e);
    for (i = 0; i < events.length; i += 1) {
      dom.off(events[i], fireCallBack);
    }
  }
  if (callback) {
    for (i = 0; i < events.length; i += 1) {
      dom.on(events[i], fireCallBack);
    }
  }
  return this;
}
function animationEnd(callback) {
  const events = ['webkitAnimationEnd', 'animationend'];
  const dom = this;
  let i;
  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    for (i = 0; i < events.length; i += 1) {
      dom.off(events[i], fireCallBack);
    }
  }
  if (callback) {
    for (i = 0; i < events.length; i += 1) {
      dom.on(events[i], fireCallBack);
    }
  }
  return this;
}
// Sizing/Styles
function width() {
  if (this[0] === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"]) {
    return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].innerWidth;
  }

  if (this.length > 0) {
    return parseFloat(this.css('width'));
  }

  return null;
}
function outerWidth(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      // eslint-disable-next-line
      const styles = this.styles();
      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
    }
    return this[0].offsetWidth;
  }
  return null;
}
function height() {
  if (this[0] === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"]) {
    return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].innerHeight;
  }

  if (this.length > 0) {
    return parseFloat(this.css('height'));
  }

  return null;
}
function outerHeight(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      // eslint-disable-next-line
      const styles = this.styles();
      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
    }
    return this[0].offsetHeight;
  }
  return null;
}
function offset() {
  if (this.length > 0) {
    const el = this[0];
    const box = el.getBoundingClientRect();
    const body = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].body;
    const clientTop = el.clientTop || body.clientTop || 0;
    const clientLeft = el.clientLeft || body.clientLeft || 0;
    const scrollTop = el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"] ? ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].scrollY : el.scrollTop;
    const scrollLeft = el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"] ? ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].scrollX : el.scrollLeft;
    return {
      top: (box.top + scrollTop) - clientTop,
      left: (box.left + scrollLeft) - clientLeft,
    };
  }

  return null;
}
function hide() {
  for (let i = 0; i < this.length; i += 1) {
    this[i].style.display = 'none';
  }
  return this;
}
function show() {
  for (let i = 0; i < this.length; i += 1) {
    const el = this[i];
    if (el.style.display === 'none') {
      el.style.display = '';
    }
    if (ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(el, null).getPropertyValue('display') === 'none') {
      // Still not visible
      el.style.display = 'block';
    }
  }
  return this;
}
function styles() {
  if (this[0]) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(this[0], null);
  return {};
}
function css(props, value) {
  let i;
  if (arguments.length === 1) {
    if (typeof props === 'string') {
      if (this[0]) return ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(this[0], null).getPropertyValue(props);
    } else {
      for (i = 0; i < this.length; i += 1) {
        // eslint-disable-next-line
        for (let prop in props) {
          this[i].style[prop] = props[prop];
        }
      }
      return this;
    }
  }
  if (arguments.length === 2 && typeof props === 'string') {
    for (i = 0; i < this.length; i += 1) {
      this[i].style[props] = value;
    }
    return this;
  }
  return this;
}

// Dom manipulation
function toArray() {
  const arr = [];
  for (let i = 0; i < this.length; i += 1) {
    arr.push(this[i]);
  }
  return arr;
}
// Iterate over the collection passing elements to `callback`
function each(callback) {
  // Don't bother continuing without a callback
  if (!callback) return this;
  // Iterate over the current collection
  for (let i = 0; i < this.length; i += 1) {
    // If the callback returns false
    if (callback.call(this[i], i, this[i]) === false) {
      // End the loop early
      return this;
    }
  }
  // Return `this` to allow chained DOM operations
  return this;
}
function forEach(callback) {
  // Don't bother continuing without a callback
  if (!callback) return this;
  // Iterate over the current collection
  for (let i = 0; i < this.length; i += 1) {
    // If the callback returns false
    if (callback.call(this[i], this[i], i) === false) {
      // End the loop early
      return this;
    }
  }
  // Return `this` to allow chained DOM operations
  return this;
}
function filter(callback) {
  const matchedItems = [];
  const dom = this;
  for (let i = 0; i < dom.length; i += 1) {
    if (callback.call(dom[i], i, dom[i])) matchedItems.push(dom[i]);
  }
  return new Dom7(matchedItems);
}
function map(callback) {
  const modifiedItems = [];
  const dom = this;
  for (let i = 0; i < dom.length; i += 1) {
    modifiedItems.push(callback.call(dom[i], i, dom[i]));
  }
  return new Dom7(modifiedItems);
}
// eslint-disable-next-line
function html(html) {
  if (typeof html === 'undefined') {
    return this[0] ? this[0].innerHTML : undefined;
  }

  for (let i = 0; i < this.length; i += 1) {
    this[i].innerHTML = html;
  }
  return this;
}
// eslint-disable-next-line
function text(text) {
  if (typeof text === 'undefined') {
    if (this[0]) {
      return this[0].textContent.trim();
    }
    return null;
  }

  for (let i = 0; i < this.length; i += 1) {
    this[i].textContent = text;
  }
  return this;
}
function is(selector) {
  const el = this[0];
  let compareWith;
  let i;
  if (!el || typeof selector === 'undefined') return false;
  if (typeof selector === 'string') {
    if (el.matches) return el.matches(selector);
    else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
    else if (el.msMatchesSelector) return el.msMatchesSelector(selector);

    compareWith = $(selector);
    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }
    return false;
  } else if (selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"]) return el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"];
  else if (selector === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"]) return el === ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"];

  if (selector.nodeType || selector instanceof Dom7) {
    compareWith = selector.nodeType ? [selector] : selector;
    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }
    return false;
  }
  return false;
}
function indexOf(el) {
  for (let i = 0; i < this.length; i += 1) {
    if (this[i] === el) return i;
  }
  return -1;
}
function index() {
  let child = this[0];
  let i;
  if (child) {
    i = 0;
    // eslint-disable-next-line
    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }
    return i;
  }
  return undefined;
}
// eslint-disable-next-line
function eq(index) {
  if (typeof index === 'undefined') return this;
  const length = this.length;
  let returnIndex;
  if (index > length - 1) {
    return new Dom7([]);
  }
  if (index < 0) {
    returnIndex = length + index;
    if (returnIndex < 0) return new Dom7([]);
    return new Dom7([this[returnIndex]]);
  }
  return new Dom7([this[index]]);
}
function append(...args) {
  let newChild;

  for (let k = 0; k < args.length; k += 1) {
    newChild = args[k];
    for (let i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        const tempDiv = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createElement('div');
        tempDiv.innerHTML = newChild;
        while (tempDiv.firstChild) {
          this[i].appendChild(tempDiv.firstChild);
        }
      } else if (newChild instanceof Dom7) {
        for (let j = 0; j < newChild.length; j += 1) {
          this[i].appendChild(newChild[j]);
        }
      } else {
        this[i].appendChild(newChild);
      }
    }
  }

  return this;
}
// eslint-disable-next-line
function appendTo(parent) {
  $(parent).append(this);
  return this;
}
function prepend(newChild) {
  let i;
  let j;
  for (i = 0; i < this.length; i += 1) {
    if (typeof newChild === 'string') {
      const tempDiv = ssr_window__WEBPACK_IMPORTED_MODULE_0__["document"].createElement('div');
      tempDiv.innerHTML = newChild;
      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
      }
    } else if (newChild instanceof Dom7) {
      for (j = 0; j < newChild.length; j += 1) {
        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
      }
    } else {
      this[i].insertBefore(newChild, this[i].childNodes[0]);
    }
  }
  return this;
}
// eslint-disable-next-line
function prependTo(parent) {
  $(parent).prepend(this);
  return this;
}
function insertBefore(selector) {
  const before = $(selector);
  for (let i = 0; i < this.length; i += 1) {
    if (before.length === 1) {
      before[0].parentNode.insertBefore(this[i], before[0]);
    } else if (before.length > 1) {
      for (let j = 0; j < before.length; j += 1) {
        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
      }
    }
  }
}
function insertAfter(selector) {
  const after = $(selector);
  for (let i = 0; i < this.length; i += 1) {
    if (after.length === 1) {
      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
    } else if (after.length > 1) {
      for (let j = 0; j < after.length; j += 1) {
        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
      }
    }
  }
}
function next(selector) {
  if (this.length > 0) {
    if (selector) {
      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
        return new Dom7([this[0].nextElementSibling]);
      }
      return new Dom7([]);
    }

    if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);
    return new Dom7([]);
  }
  return new Dom7([]);
}
function nextAll(selector) {
  const nextEls = [];
  let el = this[0];
  if (!el) return new Dom7([]);
  while (el.nextElementSibling) {
    const next = el.nextElementSibling; // eslint-disable-line
    if (selector) {
      if ($(next).is(selector)) nextEls.push(next);
    } else nextEls.push(next);
    el = next;
  }
  return new Dom7(nextEls);
}
function prev(selector) {
  if (this.length > 0) {
    const el = this[0];
    if (selector) {
      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
        return new Dom7([el.previousElementSibling]);
      }
      return new Dom7([]);
    }

    if (el.previousElementSibling) return new Dom7([el.previousElementSibling]);
    return new Dom7([]);
  }
  return new Dom7([]);
}
function prevAll(selector) {
  const prevEls = [];
  let el = this[0];
  if (!el) return new Dom7([]);
  while (el.previousElementSibling) {
    const prev = el.previousElementSibling; // eslint-disable-line
    if (selector) {
      if ($(prev).is(selector)) prevEls.push(prev);
    } else prevEls.push(prev);
    el = prev;
  }
  return new Dom7(prevEls);
}
function siblings(selector) {
  return this.nextAll(selector).add(this.prevAll(selector));
}
function parent(selector) {
  const parents = []; // eslint-disable-line
  for (let i = 0; i < this.length; i += 1) {
    if (this[i].parentNode !== null) {
      if (selector) {
        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
      } else {
        parents.push(this[i].parentNode);
      }
    }
  }
  return $(unique(parents));
}
function parents(selector) {
  const parents = []; // eslint-disable-line
  for (let i = 0; i < this.length; i += 1) {
    let parent = this[i].parentNode; // eslint-disable-line
    while (parent) {
      if (selector) {
        if ($(parent).is(selector)) parents.push(parent);
      } else {
        parents.push(parent);
      }
      parent = parent.parentNode;
    }
  }
  return $(unique(parents));
}
function closest(selector) {
  let closest = this; // eslint-disable-line
  if (typeof selector === 'undefined') {
    return new Dom7([]);
  }
  if (!closest.is(selector)) {
    closest = closest.parents(selector).eq(0);
  }
  return closest;
}
function find(selector) {
  const foundElements = [];
  for (let i = 0; i < this.length; i += 1) {
    const found = this[i].querySelectorAll(selector);
    for (let j = 0; j < found.length; j += 1) {
      foundElements.push(found[j]);
    }
  }
  return new Dom7(foundElements);
}
function children(selector) {
  const children = []; // eslint-disable-line
  for (let i = 0; i < this.length; i += 1) {
    const childNodes = this[i].childNodes;

    for (let j = 0; j < childNodes.length; j += 1) {
      if (!selector) {
        if (childNodes[j].nodeType === 1) children.push(childNodes[j]);
      } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
        children.push(childNodes[j]);
      }
    }
  }
  return new Dom7(unique(children));
}
function remove() {
  for (let i = 0; i < this.length; i += 1) {
    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
  }
  return this;
}
function detach() {
  return this.remove();
}
function add(...args) {
  const dom = this;
  let i;
  let j;
  for (i = 0; i < args.length; i += 1) {
    const toAdd = $(args[i]);
    for (j = 0; j < toAdd.length; j += 1) {
      dom[dom.length] = toAdd[j];
      dom.length += 1;
    }
  }
  return dom;
}
function empty() {
  for (let i = 0; i < this.length; i += 1) {
    const el = this[i];
    if (el.nodeType === 1) {
      for (let j = 0; j < el.childNodes.length; j += 1) {
        if (el.childNodes[j].parentNode) {
          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
        }
      }
      el.textContent = '';
    }
  }
  return this;
}

function scrollTo(...args) {
  let [left, top, duration, easing, callback] = args;
  if (args.length === 4 && typeof easing === 'function') {
    callback = easing;
    [left, top, duration, callback, easing] = args;
  }
  if (typeof easing === 'undefined') easing = 'swing';

  return this.each(function animate() {
    const el = this;
    let currentTop;
    let currentLeft;
    let maxTop;
    let maxLeft;
    let newTop;
    let newLeft;
    let scrollTop; // eslint-disable-line
    let scrollLeft; // eslint-disable-line
    let animateTop = top > 0 || top === 0;
    let animateLeft = left > 0 || left === 0;
    if (typeof easing === 'undefined') {
      easing = 'swing';
    }
    if (animateTop) {
      currentTop = el.scrollTop;
      if (!duration) {
        el.scrollTop = top;
      }
    }
    if (animateLeft) {
      currentLeft = el.scrollLeft;
      if (!duration) {
        el.scrollLeft = left;
      }
    }
    if (!duration) return;
    if (animateTop) {
      maxTop = el.scrollHeight - el.offsetHeight;
      newTop = Math.max(Math.min(top, maxTop), 0);
    }
    if (animateLeft) {
      maxLeft = el.scrollWidth - el.offsetWidth;
      newLeft = Math.max(Math.min(left, maxLeft), 0);
    }
    let startTime = null;
    if (animateTop && newTop === currentTop) animateTop = false;
    if (animateLeft && newLeft === currentLeft) animateLeft = false;
    function render(time = new Date().getTime()) {
      if (startTime === null) {
        startTime = time;
      }
      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      const easeProgress = easing === 'linear' ? progress : (0.5 - (Math.cos(progress * Math.PI) / 2));
      let done;
      if (animateTop) scrollTop = currentTop + (easeProgress * (newTop - currentTop));
      if (animateLeft) scrollLeft = currentLeft + (easeProgress * (newLeft - currentLeft));
      if (animateTop && newTop > currentTop && scrollTop >= newTop) {
        el.scrollTop = newTop;
        done = true;
      }
      if (animateTop && newTop < currentTop && scrollTop <= newTop) {
        el.scrollTop = newTop;
        done = true;
      }
      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }
      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (done) {
        if (callback) callback();
        return;
      }
      if (animateTop) el.scrollTop = scrollTop;
      if (animateLeft) el.scrollLeft = scrollLeft;
      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  });
}
// scrollTop(top, duration, easing, callback) {
function scrollTop(...args) {
  let [top, duration, easing, callback] = args;
  if (args.length === 3 && typeof easing === 'function') {
    [top, duration, callback, easing] = args;
  }
  const dom = this;
  if (typeof top === 'undefined') {
    if (dom.length > 0) return dom[0].scrollTop;
    return null;
  }
  return dom.scrollTo(undefined, top, duration, easing, callback);
}
function scrollLeft(...args) {
  let [left, duration, easing, callback] = args;
  if (args.length === 3 && typeof easing === 'function') {
    [left, duration, callback, easing] = args;
  }
  const dom = this;
  if (typeof left === 'undefined') {
    if (dom.length > 0) return dom[0].scrollLeft;
    return null;
  }
  return dom.scrollTo(left, undefined, duration, easing, callback);
}

function animate(initialProps, initialParams) {
  const els = this;
  const a = {
    props: Object.assign({}, initialProps),
    params: Object.assign({
      duration: 300,
      easing: 'swing', // or 'linear'
      /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */
    }, initialParams),

    elements: els,
    animating: false,
    que: [],

    easingProgress(easing, progress) {
      if (easing === 'swing') {
        return 0.5 - (Math.cos(progress * Math.PI) / 2);
      }
      if (typeof easing === 'function') {
        return easing(progress);
      }
      return progress;
    },
    stop() {
      if (a.frameId) {
        cancelAnimationFrame(a.frameId);
      }
      a.animating = false;
      a.elements.each((index, el) => {
        const element = el;
        delete element.dom7AnimateInstance;
      });
      a.que = [];
    },
    done(complete) {
      a.animating = false;
      a.elements.each((index, el) => {
        const element = el;
        delete element.dom7AnimateInstance;
      });
      if (complete) complete(els);
      if (a.que.length > 0) {
        const que = a.que.shift();
        a.animate(que[0], que[1]);
      }
    },
    animate(props, params) {
      if (a.animating) {
        a.que.push([props, params]);
        return a;
      }
      const elements = [];

      // Define & Cache Initials & Units
      a.elements.each((index, el) => {
        let initialFullValue;
        let initialValue;
        let unit;
        let finalValue;
        let finalFullValue;

        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;

        elements[index] = {
          container: el,
        };
        Object.keys(props).forEach((prop) => {
          initialFullValue = ssr_window__WEBPACK_IMPORTED_MODULE_0__["window"].getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
          initialValue = parseFloat(initialFullValue);
          unit = initialFullValue.replace(initialValue, '');
          finalValue = parseFloat(props[prop]);
          finalFullValue = props[prop] + unit;
          elements[index][prop] = {
            initialFullValue,
            initialValue,
            unit,
            finalValue,
            finalFullValue,
            currentValue: initialValue,
          };
        });
      });

      let startTime = null;
      let time;
      let elementsDone = 0;
      let propsDone = 0;
      let done;
      let began = false;

      a.animating = true;

      function render() {
        time = new Date().getTime();
        let progress;
        let easeProgress;
        // let el;
        if (!began) {
          began = true;
          if (params.begin) params.begin(els);
        }
        if (startTime === null) {
          startTime = time;
        }
        if (params.progress) {
          // eslint-disable-next-line
          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), ((startTime + params.duration) - time < 0 ? 0 : (startTime + params.duration) - time), startTime);
        }

        elements.forEach((element) => {
          const el = element;
          if (done || el.done) return;
          Object.keys(props).forEach((prop) => {
            if (done || el.done) return;
            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
            easeProgress = a.easingProgress(params.easing, progress);
            const { initialValue, finalValue, unit } = el[prop];
            el[prop].currentValue = initialValue + (easeProgress * (finalValue - initialValue));
            const currentValue = el[prop].currentValue;

            if (
              (finalValue > initialValue && currentValue >= finalValue) ||
              (finalValue < initialValue && currentValue <= finalValue)) {
              el.container.style[prop] = finalValue + unit;
              propsDone += 1;
              if (propsDone === Object.keys(props).length) {
                el.done = true;
                elementsDone += 1;
              }
              if (elementsDone === elements.length) {
                done = true;
              }
            }
            if (done) {
              a.done(params.complete);
              return;
            }
            el.container.style[prop] = currentValue + unit;
          });
        });
        if (done) return;
        // Then call
        a.frameId = requestAnimationFrame(render);
      }
      a.frameId = requestAnimationFrame(render);
      return a;
    },
  };

  if (a.elements.length === 0) {
    return els;
  }

  let animateInstance;
  for (let i = 0; i < a.elements.length; i += 1) {
    if (a.elements[i].dom7AnimateInstance) {
      animateInstance = a.elements[i].dom7AnimateInstance;
    } else a.elements[i].dom7AnimateInstance = a;
  }
  if (!animateInstance) {
    animateInstance = a;
  }

  if (initialProps === 'stop') {
    animateInstance.stop();
  } else {
    animateInstance.animate(a.props, a.params);
  }

  return els;
}

function stop() {
  const els = this;
  for (let i = 0; i < els.length; i += 1) {
    if (els[i].dom7AnimateInstance) {
      els[i].dom7AnimateInstance.stop();
    }
  }
}

const noTrigger = ('resize scroll').split(' ');
function eventShortcut(name, ...args) {
  if (typeof args[0] === 'undefined') {
    for (let i = 0; i < this.length; i += 1) {
      if (noTrigger.indexOf(name) < 0) {
        if (name in this[i]) this[i][name]();
        else {
          $(this[i]).trigger(name);
        }
      }
    }
    return this;
  }
  return this.on(name, ...args);
}

function click(...args) {
  return eventShortcut.bind(this)('click', ...args);
}
function blur(...args) {
  return eventShortcut.bind(this)('blur', ...args);
}
function focus(...args) {
  return eventShortcut.bind(this)('focus', ...args);
}
function focusin(...args) {
  return eventShortcut.bind(this)('focusin', ...args);
}
function focusout(...args) {
  return eventShortcut.bind(this)('focusout', ...args);
}
function keyup(...args) {
  return eventShortcut.bind(this)('keyup', ...args);
}
function keydown(...args) {
  return eventShortcut.bind(this)('keydown', ...args);
}
function keypress(...args) {
  return eventShortcut.bind(this)('keypress', ...args);
}
function submit(...args) {
  return eventShortcut.bind(this)('submit', ...args);
}
function change(...args) {
  return eventShortcut.bind(this)('change', ...args);
}
function mousedown(...args) {
  return eventShortcut.bind(this)('mousedown', ...args);
}
function mousemove(...args) {
  return eventShortcut.bind(this)('mousemove', ...args);
}
function mouseup(...args) {
  return eventShortcut.bind(this)('mouseup', ...args);
}
function mouseenter(...args) {
  return eventShortcut.bind(this)('mouseenter', ...args);
}
function mouseleave(...args) {
  return eventShortcut.bind(this)('mouseleave', ...args);
}
function mouseout(...args) {
  return eventShortcut.bind(this)('mouseout', ...args);
}
function mouseover(...args) {
  return eventShortcut.bind(this)('mouseover', ...args);
}
function touchstart(...args) {
  return eventShortcut.bind(this)('touchstart', ...args);
}
function touchend(...args) {
  return eventShortcut.bind(this)('touchend', ...args);
}
function touchmove(...args) {
  return eventShortcut.bind(this)('touchmove', ...args);
}
function resize(...args) {
  return eventShortcut.bind(this)('resize', ...args);
}
function scroll(...args) {
  return eventShortcut.bind(this)('scroll', ...args);
}




/***/ }),

/***/ "./node_modules/intl-tel-input/build/js/intlTelInput.js":
/*!**************************************************************!*\
  !*** ./node_modules/intl-tel-input/build/js/intlTelInput.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * International Telephone Input v15.0.2
 * https://github.com/jackocnr/intl-tel-input.git
 * Licensed under the MIT license
 */

// wrap in UMD
(function(factory) {
    var intlTelInput = factory(window, document);
    if ( true && module.exports) module.exports = intlTelInput; else window.intlTelInput = intlTelInput;
})(function(window, document, undefined) {
    "use strict";
    return function() {
        // Array of country objects for the flag dropdown.
        // Here is the criteria for the plugin to support a given country/territory
        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes
        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png
        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml
        // Each country array has the following information:
        // [
        //    Country name,
        //    iso2 code,
        //    International dial code,
        //    Order (if >1 country with same dial code),
        //    Area codes
        // ]
        var allCountries = [ [ "Afghanistan (‫افغانستان‬‎)", "af", "93" ], [ "Albania (Shqipëri)", "al", "355" ], [ "Algeria (‫الجزائر‬‎)", "dz", "213" ], [ "American Samoa", "as", "1684" ], [ "Andorra", "ad", "376" ], [ "Angola", "ao", "244" ], [ "Anguilla", "ai", "1264" ], [ "Antigua and Barbuda", "ag", "1268" ], [ "Argentina", "ar", "54" ], [ "Armenia (Հայաստան)", "am", "374" ], [ "Aruba", "aw", "297" ], [ "Australia", "au", "61", 0 ], [ "Austria (Österreich)", "at", "43" ], [ "Azerbaijan (Azərbaycan)", "az", "994" ], [ "Bahamas", "bs", "1242" ], [ "Bahrain (‫البحرين‬‎)", "bh", "973" ], [ "Bangladesh (বাংলাদেশ)", "bd", "880" ], [ "Barbados", "bb", "1246" ], [ "Belarus (Беларусь)", "by", "375" ], [ "Belgium (België)", "be", "32" ], [ "Belize", "bz", "501" ], [ "Benin (Bénin)", "bj", "229" ], [ "Bermuda", "bm", "1441" ], [ "Bhutan (འབྲུག)", "bt", "975" ], [ "Bolivia", "bo", "591" ], [ "Bosnia and Herzegovina (Босна и Херцеговина)", "ba", "387" ], [ "Botswana", "bw", "267" ], [ "Brazil (Brasil)", "br", "55" ], [ "British Indian Ocean Territory", "io", "246" ], [ "British Virgin Islands", "vg", "1284" ], [ "Brunei", "bn", "673" ], [ "Bulgaria (България)", "bg", "359" ], [ "Burkina Faso", "bf", "226" ], [ "Burundi (Uburundi)", "bi", "257" ], [ "Cambodia (កម្ពុជា)", "kh", "855" ], [ "Cameroon (Cameroun)", "cm", "237" ], [ "Canada", "ca", "1", 1, [ "204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905" ] ], [ "Cape Verde (Kabu Verdi)", "cv", "238" ], [ "Caribbean Netherlands", "bq", "599", 1 ], [ "Cayman Islands", "ky", "1345" ], [ "Central African Republic (République centrafricaine)", "cf", "236" ], [ "Chad (Tchad)", "td", "235" ], [ "Chile", "cl", "56" ], [ "China (中国)", "cn", "86" ], [ "Christmas Island", "cx", "61", 2 ], [ "Cocos (Keeling) Islands", "cc", "61", 1 ], [ "Colombia", "co", "57" ], [ "Comoros (‫جزر القمر‬‎)", "km", "269" ], [ "Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243" ], [ "Congo (Republic) (Congo-Brazzaville)", "cg", "242" ], [ "Cook Islands", "ck", "682" ], [ "Costa Rica", "cr", "506" ], [ "Côte d’Ivoire", "ci", "225" ], [ "Croatia (Hrvatska)", "hr", "385" ], [ "Cuba", "cu", "53" ], [ "Curaçao", "cw", "599", 0 ], [ "Cyprus (Κύπρος)", "cy", "357" ], [ "Czech Republic (Česká republika)", "cz", "420" ], [ "Denmark (Danmark)", "dk", "45" ], [ "Djibouti", "dj", "253" ], [ "Dominica", "dm", "1767" ], [ "Dominican Republic (República Dominicana)", "do", "1", 2, [ "809", "829", "849" ] ], [ "Ecuador", "ec", "593" ], [ "Egypt (‫مصر‬‎)", "eg", "20" ], [ "El Salvador", "sv", "503" ], [ "Equatorial Guinea (Guinea Ecuatorial)", "gq", "240" ], [ "Eritrea", "er", "291" ], [ "Estonia (Eesti)", "ee", "372" ], [ "Ethiopia", "et", "251" ], [ "Falkland Islands (Islas Malvinas)", "fk", "500" ], [ "Faroe Islands (Føroyar)", "fo", "298" ], [ "Fiji", "fj", "679" ], [ "Finland (Suomi)", "fi", "358", 0 ], [ "France", "fr", "33" ], [ "French Guiana (Guyane française)", "gf", "594" ], [ "French Polynesia (Polynésie française)", "pf", "689" ], [ "Gabon", "ga", "241" ], [ "Gambia", "gm", "220" ], [ "Georgia (საქართველო)", "ge", "995" ], [ "Germany (Deutschland)", "de", "49" ], [ "Ghana (Gaana)", "gh", "233" ], [ "Gibraltar", "gi", "350" ], [ "Greece (Ελλάδα)", "gr", "30" ], [ "Greenland (Kalaallit Nunaat)", "gl", "299" ], [ "Grenada", "gd", "1473" ], [ "Guadeloupe", "gp", "590", 0 ], [ "Guam", "gu", "1671" ], [ "Guatemala", "gt", "502" ], [ "Guernsey", "gg", "44", 1 ], [ "Guinea (Guinée)", "gn", "224" ], [ "Guinea-Bissau (Guiné Bissau)", "gw", "245" ], [ "Guyana", "gy", "592" ], [ "Haiti", "ht", "509" ], [ "Honduras", "hn", "504" ], [ "Hong Kong (香港)", "hk", "852" ], [ "Hungary (Magyarország)", "hu", "36" ], [ "Iceland (Ísland)", "is", "354" ], [ "India (भारत)", "in", "91" ], [ "Indonesia", "id", "62" ], [ "Iran (‫ایران‬‎)", "ir", "98" ], [ "Iraq (‫العراق‬‎)", "iq", "964" ], [ "Ireland", "ie", "353" ], [ "Isle of Man", "im", "44", 2 ], [ "Israel (‫ישראל‬‎)", "il", "972" ], [ "Italy (Italia)", "it", "39", 0 ], [ "Jamaica", "jm", "1", 4, [ "876", "658" ] ], [ "Japan (日本)", "jp", "81" ], [ "Jersey", "je", "44", 3 ], [ "Jordan (‫الأردن‬‎)", "jo", "962" ], [ "Kazakhstan (Казахстан)", "kz", "7", 1 ], [ "Kenya", "ke", "254" ], [ "Kiribati", "ki", "686" ], [ "Kosovo", "xk", "383" ], [ "Kuwait (‫الكويت‬‎)", "kw", "965" ], [ "Kyrgyzstan (Кыргызстан)", "kg", "996" ], [ "Laos (ລາວ)", "la", "856" ], [ "Latvia (Latvija)", "lv", "371" ], [ "Lebanon (‫لبنان‬‎)", "lb", "961" ], [ "Lesotho", "ls", "266" ], [ "Liberia", "lr", "231" ], [ "Libya (‫ليبيا‬‎)", "ly", "218" ], [ "Liechtenstein", "li", "423" ], [ "Lithuania (Lietuva)", "lt", "370" ], [ "Luxembourg", "lu", "352" ], [ "Macau (澳門)", "mo", "853" ], [ "Macedonia (FYROM) (Македонија)", "mk", "389" ], [ "Madagascar (Madagasikara)", "mg", "261" ], [ "Malawi", "mw", "265" ], [ "Malaysia", "my", "60" ], [ "Maldives", "mv", "960" ], [ "Mali", "ml", "223" ], [ "Malta", "mt", "356" ], [ "Marshall Islands", "mh", "692" ], [ "Martinique", "mq", "596" ], [ "Mauritania (‫موريتانيا‬‎)", "mr", "222" ], [ "Mauritius (Moris)", "mu", "230" ], [ "Mayotte", "yt", "262", 1 ], [ "Mexico (México)", "mx", "52" ], [ "Micronesia", "fm", "691" ], [ "Moldova (Republica Moldova)", "md", "373" ], [ "Monaco", "mc", "377" ], [ "Mongolia (Монгол)", "mn", "976" ], [ "Montenegro (Crna Gora)", "me", "382" ], [ "Montserrat", "ms", "1664" ], [ "Morocco (‫المغرب‬‎)", "ma", "212", 0 ], [ "Mozambique (Moçambique)", "mz", "258" ], [ "Myanmar (Burma) (မြန်မာ)", "mm", "95" ], [ "Namibia (Namibië)", "na", "264" ], [ "Nauru", "nr", "674" ], [ "Nepal (नेपाल)", "np", "977" ], [ "Netherlands (Nederland)", "nl", "31" ], [ "New Caledonia (Nouvelle-Calédonie)", "nc", "687" ], [ "New Zealand", "nz", "64" ], [ "Nicaragua", "ni", "505" ], [ "Niger (Nijar)", "ne", "227" ], [ "Nigeria", "ng", "234" ], [ "Niue", "nu", "683" ], [ "Norfolk Island", "nf", "672" ], [ "North Korea (조선 민주주의 인민 공화국)", "kp", "850" ], [ "Northern Mariana Islands", "mp", "1670" ], [ "Norway (Norge)", "no", "47", 0 ], [ "Oman (‫عُمان‬‎)", "om", "968" ], [ "Pakistan (‫پاکستان‬‎)", "pk", "92" ], [ "Palau", "pw", "680" ], [ "Palestine (‫فلسطين‬‎)", "ps", "970" ], [ "Panama (Panamá)", "pa", "507" ], [ "Papua New Guinea", "pg", "675" ], [ "Paraguay", "py", "595" ], [ "Peru (Perú)", "pe", "51" ], [ "Philippines", "ph", "63" ], [ "Poland (Polska)", "pl", "48" ], [ "Portugal", "pt", "351" ], [ "Puerto Rico", "pr", "1", 3, [ "787", "939" ] ], [ "Qatar (‫قطر‬‎)", "qa", "974" ], [ "Réunion (La Réunion)", "re", "262", 0 ], [ "Romania (România)", "ro", "40" ], [ "Russia (Россия)", "ru", "7", 0 ], [ "Rwanda", "rw", "250" ], [ "Saint Barthélemy", "bl", "590", 1 ], [ "Saint Helena", "sh", "290" ], [ "Saint Kitts and Nevis", "kn", "1869" ], [ "Saint Lucia", "lc", "1758" ], [ "Saint Martin (Saint-Martin (partie française))", "mf", "590", 2 ], [ "Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508" ], [ "Saint Vincent and the Grenadines", "vc", "1784" ], [ "Samoa", "ws", "685" ], [ "San Marino", "sm", "378" ], [ "São Tomé and Príncipe (São Tomé e Príncipe)", "st", "239" ], [ "Saudi Arabia (‫المملكة العربية السعودية‬‎)", "sa", "966" ], [ "Senegal (Sénégal)", "sn", "221" ], [ "Serbia (Србија)", "rs", "381" ], [ "Seychelles", "sc", "248" ], [ "Sierra Leone", "sl", "232" ], [ "Singapore", "sg", "65" ], [ "Sint Maarten", "sx", "1721" ], [ "Slovakia (Slovensko)", "sk", "421" ], [ "Slovenia (Slovenija)", "si", "386" ], [ "Solomon Islands", "sb", "677" ], [ "Somalia (Soomaaliya)", "so", "252" ], [ "South Africa", "za", "27" ], [ "South Korea (대한민국)", "kr", "82" ], [ "South Sudan (‫جنوب السودان‬‎)", "ss", "211" ], [ "Spain (España)", "es", "34" ], [ "Sri Lanka (ශ්‍රී ලංකාව)", "lk", "94" ], [ "Sudan (‫السودان‬‎)", "sd", "249" ], [ "Suriname", "sr", "597" ], [ "Svalbard and Jan Mayen", "sj", "47", 1 ], [ "Swaziland", "sz", "268" ], [ "Sweden (Sverige)", "se", "46" ], [ "Switzerland (Schweiz)", "ch", "41" ], [ "Syria (‫سوريا‬‎)", "sy", "963" ], [ "Taiwan (台灣)", "tw", "886" ], [ "Tajikistan", "tj", "992" ], [ "Tanzania", "tz", "255" ], [ "Thailand (ไทย)", "th", "66" ], [ "Timor-Leste", "tl", "670" ], [ "Togo", "tg", "228" ], [ "Tokelau", "tk", "690" ], [ "Tonga", "to", "676" ], [ "Trinidad and Tobago", "tt", "1868" ], [ "Tunisia (‫تونس‬‎)", "tn", "216" ], [ "Turkey (Türkiye)", "tr", "90" ], [ "Turkmenistan", "tm", "993" ], [ "Turks and Caicos Islands", "tc", "1649" ], [ "Tuvalu", "tv", "688" ], [ "U.S. Virgin Islands", "vi", "1340" ], [ "Uganda", "ug", "256" ], [ "Ukraine (Україна)", "ua", "380" ], [ "United Arab Emirates (‫الإمارات العربية المتحدة‬‎)", "ae", "971" ], [ "United Kingdom", "gb", "44", 0 ], [ "United States", "us", "1", 0 ], [ "Uruguay", "uy", "598" ], [ "Uzbekistan (Oʻzbekiston)", "uz", "998" ], [ "Vanuatu", "vu", "678" ], [ "Vatican City (Città del Vaticano)", "va", "39", 1 ], [ "Venezuela", "ve", "58" ], [ "Vietnam (Việt Nam)", "vn", "84" ], [ "Wallis and Futuna (Wallis-et-Futuna)", "wf", "681" ], [ "Western Sahara (‫الصحراء الغربية‬‎)", "eh", "212", 1 ], [ "Yemen (‫اليمن‬‎)", "ye", "967" ], [ "Zambia", "zm", "260" ], [ "Zimbabwe", "zw", "263" ], [ "Åland Islands", "ax", "358", 1 ] ];
        // loop over all of the countries above, restructuring the data to be objects with named keys
        for (var i = 0; i < allCountries.length; i++) {
            var c = allCountries[i];
            allCountries[i] = {
                name: c[0],
                iso2: c[1],
                dialCode: c[2],
                priority: c[3] || 0,
                areaCodes: c[4] || null
            };
        }
        "use strict";
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }
        window.intlTelInputGlobals = {
            getInstance: function getInstance(input) {
                var id = input.getAttribute("data-intl-tel-input-id");
                return window.intlTelInputGlobals.instances[id];
            },
            instances: {}
        };
        // these vars persist through all instances of the plugin
        var id = 0;
        var defaults = {
            // whether or not to allow the dropdown
            allowDropdown: true,
            // if there is just a dial code in the input: remove it on blur
            autoHideDialCode: true,
            // add a placeholder in the input with an example number for the selected country
            autoPlaceholder: "polite",
            // modify the parentClass
            customContainer: "",
            // modify the auto placeholder
            customPlaceholder: null,
            // append menu to specified element
            dropdownContainer: null,
            // don't display these countries
            excludeCountries: [],
            // format the input value during initialisation and on setNumber
            formatOnDisplay: true,
            // geoIp lookup function
            geoIpLookup: null,
            // inject a hidden input with this name, and on submit, populate it with the result of getNumber
            hiddenInput: "",
            // initial country
            initialCountry: "",
            // localized country names e.g. { 'de': 'Deutschland' }
            localizedCountries: null,
            // don't insert international dial codes
            nationalMode: true,
            // display only these countries
            onlyCountries: [],
            // number type to use for placeholders
            placeholderNumberType: "MOBILE",
            // the countries at the top of the list. defaults to united states and united kingdom
            preferredCountries: [ "us", "gb" ],
            // display the country dial code next to the selected flag so it's not part of the typed number
            separateDialCode: false,
            // specify the path to the libphonenumber script to enable validation/formatting
            utilsScript: ""
        };
        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes
        var regionlessNanpNumbers = [ "800", "822", "833", "844", "855", "866", "877", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889" ];
        // keep track of if the window.load event has fired as impossible to check after the fact
        window.addEventListener("load", function() {
            // UPDATE: use a public static field so we can fudge it in the tests
            window.intlTelInputGlobals.windowLoaded = true;
        });
        // utility function to iterate over an object. can't use Object.entries or native forEach because
        // of IE11
        var forEachProp = function forEachProp(obj, callback) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length; i++) {
                callback(keys[i], obj[keys[i]]);
            }
        };
        // run a method on each instance of the plugin
        var forEachInstance = function forEachInstance(method) {
            forEachProp(window.intlTelInputGlobals.instances, function(key) {
                window.intlTelInputGlobals.instances[key][method]();
            });
        };
        // this is our plugin class that we will create an instance of
        // eslint-disable-next-line no-unused-vars
        var Iti = /*#__PURE__*/
        function() {
            function Iti(input, options) {
                var _this = this;
                _classCallCheck(this, Iti);
                this.id = id++;
                this.telInput = input;
                this.activeItem = null;
                this.highlightedItem = null;
                // process specified options / defaults
                // alternative to Object.assign, which isn't supported by IE11
                var customOptions = options || {};
                this.options = {};
                forEachProp(defaults, function(key, value) {
                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;
                });
                this.hadInitialPlaceholder = Boolean(input.getAttribute("placeholder"));
            }
            _createClass(Iti, [ {
                key: "_init",
                value: function _init() {
                    var _this2 = this;
                    // if in nationalMode, disable options relating to dial codes
                    if (this.options.nationalMode) this.options.autoHideDialCode = false;
                    // if separateDialCode then doesn't make sense to A) insert dial code into input
                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country
                    // dial code next to them)
                    if (this.options.separateDialCode) {
                        this.options.autoHideDialCode = this.options.nationalMode = false;
                    }
                    // we cannot just test screen size as some smartphones/website meta tags will report desktop
                    // resolutions
                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the
                    // rest of these declarations
                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'
                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                    if (this.isMobile) {
                        // trigger the mobile dropdown css
                        document.body.classList.add("iti-mobile");
                        // on mobile, we want a full screen dropdown, so we must append it to the body
                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;
                    }
                    // these promises get resolved when their individual requests complete
                    // this way the dev can do something like iti.promise.then(...) to know when all requests are
                    // complete
                    if (typeof Promise !== "undefined") {
                        var autoCountryPromise = new Promise(function(resolve, reject) {
                            _this2.resolveAutoCountryPromise = resolve;
                            _this2.rejectAutoCountryPromise = reject;
                        });
                        var utilsScriptPromise = new Promise(function(resolve, reject) {
                            _this2.resolveUtilsScriptPromise = resolve;
                            _this2.rejectUtilsScriptPromise = reject;
                        });
                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);
                    } else {
                        // prevent errors when Promise doesn't exist
                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};
                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};
                    }
                    // in various situations there could be no country selected initially, but we need to be able
                    // to assume this variable exists
                    this.selectedCountryData = {};
                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc
                    this._processCountryData();
                    // generate the markup
                    this._generateMarkup();
                    // set the initial state of the input value and the selected flag
                    this._setInitialState();
                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click
                    this._initListeners();
                    // utils script, and auto country
                    this._initRequests();
                }
            }, {
                key: "_processCountryData",
                value: function _processCountryData() {
                    // process onlyCountries or excludeCountries array if present
                    this._processAllCountries();
                    // process the countryCodes map
                    this._processCountryCodes();
                    // process the preferredCountries
                    this._processPreferredCountries();
                    // translate countries according to localizedCountries option
                    if (this.options.localizedCountries) this._translateCountriesByLocale();
                    // sort countries by name
                    if (this.options.onlyCountries.length || this.options.localizedCountries) {
                        this.countries.sort(this._countryNameSort);
                    }
                }
            }, {
                key: "_addCountryCode",
                value: function _addCountryCode(iso2, dialCode, priority) {
                    if (!this.countryCodes.hasOwnProperty(dialCode)) {
                        this.countryCodes[dialCode] = [];
                    }
                    var index = priority || 0;
                    this.countryCodes[dialCode][index] = iso2;
                }
            }, {
                key: "_processAllCountries",
                value: function _processAllCountries() {
                    if (this.options.onlyCountries.length) {
                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {
                            return country.toLowerCase();
                        });
                        this.countries = allCountries.filter(function(country) {
                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;
                        });
                    } else if (this.options.excludeCountries.length) {
                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {
                            return country.toLowerCase();
                        });
                        this.countries = allCountries.filter(function(country) {
                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;
                        });
                    } else {
                        this.countries = allCountries;
                    }
                }
            }, {
                key: "_translateCountriesByLocale",
                value: function _translateCountriesByLocale() {
                    for (var i = 0; i < this.countries.length; i++) {
                        var iso = this.countries[i].iso2.toLowerCase();
                        if (this.options.localizedCountries.hasOwnProperty(iso)) {
                            this.countries[i].name = this.options.localizedCountries[iso];
                        }
                    }
                }
            }, {
                key: "_countryNameSort",
                value: function _countryNameSort(a, b) {
                    return a.name.localeCompare(b.name);
                }
            }, {
                key: "_processCountryCodes",
                value: function _processCountryCodes() {
                    this.countryCodes = {};
                    for (var i = 0; i < this.countries.length; i++) {
                        var c = this.countries[i];
                        this._addCountryCode(c.iso2, c.dialCode, c.priority);
                        // area codes
                        if (c.areaCodes) {
                            for (var j = 0; j < c.areaCodes.length; j++) {
                                // full dial code is country code + dial code
                                this._addCountryCode(c.iso2, c.dialCode + c.areaCodes[j]);
                            }
                        }
                    }
                }
            }, {
                key: "_processPreferredCountries",
                value: function _processPreferredCountries() {
                    this.preferredCountries = [];
                    for (var i = 0; i < this.options.preferredCountries.length; i++) {
                        var countryCode = this.options.preferredCountries[i].toLowerCase();
                        var countryData = this._getCountryData(countryCode, false, true);
                        if (countryData) this.preferredCountries.push(countryData);
                    }
                }
            }, {
                key: "_createEl",
                value: function _createEl(name, attrs, container) {
                    var el = document.createElement(name);
                    if (attrs) forEachProp(attrs, function(key, value) {
                        return el.setAttribute(key, value);
                    });
                    if (container) container.appendChild(el);
                    return el;
                }
            }, {
                key: "_generateMarkup",
                value: function _generateMarkup() {
                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can
                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the
                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)
                    this.telInput.setAttribute("autocomplete", "off");
                    // containers (mostly for positioning)
                    var parentClass = "intl-tel-input";
                    if (this.options.allowDropdown) parentClass += " allow-dropdown";
                    if (this.options.separateDialCode) parentClass += " separate-dial-code";
                    if (this.options.customContainer) {
                        parentClass += " ";
                        parentClass += this.options.customContainer;
                    }
                    var wrapper = this._createEl("div", {
                        "class": parentClass
                    });
                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);
                    this.flagsContainer = this._createEl("div", {
                        "class": "flag-container"
                    }, wrapper);
                    wrapper.appendChild(this.telInput);
                    // selected flag (displayed to left of input)
                    this.selectedFlag = this._createEl("div", {
                        "class": "selected-flag",
                        role: "combobox",
                        "aria-owns": "country-listbox"
                    }, this.flagsContainer);
                    this.selectedFlagInner = this._createEl("div", {
                        "class": "iti-flag"
                    }, this.selectedFlag);
                    if (this.options.separateDialCode) {
                        this.selectedDialCode = this._createEl("div", {
                            "class": "selected-dial-code"
                        }, this.selectedFlag);
                    }
                    if (this.options.allowDropdown) {
                        // make element focusable and tab navigable
                        this.selectedFlag.setAttribute("tabindex", "0");
                        this.dropdownArrow = this._createEl("div", {
                            "class": "iti-arrow"
                        }, this.selectedFlag);
                        // country dropdown: preferred countries, then divider, then all countries
                        this.countryList = this._createEl("ul", {
                            "class": "country-list hide",
                            id: "country-listbox",
                            "aria-expanded": "false",
                            role: "listbox"
                        });
                        if (this.preferredCountries.length) {
                            this._appendListItems(this.preferredCountries, "preferred");
                            this._createEl("li", {
                                "class": "divider",
                                role: "separator",
                                "aria-disabled": "true"
                            }, this.countryList);
                        }
                        this._appendListItems(this.countries, "standard");
                        // create dropdownContainer markup
                        if (this.options.dropdownContainer) {
                            this.dropdown = this._createEl("div", {
                                "class": "intl-tel-input iti-container"
                            });
                            this.dropdown.appendChild(this.countryList);
                        } else {
                            this.flagsContainer.appendChild(this.countryList);
                        }
                    }
                    if (this.options.hiddenInput) {
                        var hiddenInputName = this.options.hiddenInput;
                        var name = this.telInput.getAttribute("name");
                        if (name) {
                            var i = name.lastIndexOf("[");
                            // if input name contains square brackets, then give the hidden input the same name,
                            // replacing the contents of the last set of brackets with the given hiddenInput name
                            if (i !== -1) hiddenInputName = "".concat(name.substr(0, i), "[").concat(hiddenInputName, "]");
                        }
                        this.hiddenInput = this._createEl("input", {
                            type: "hidden",
                            name: hiddenInputName
                        });
                        wrapper.appendChild(this.hiddenInput);
                    }
                }
            }, {
                key: "_appendListItems",
                value: function _appendListItems(countries, className) {
                    // we create so many DOM elements, it is faster to build a temp string
                    // and then add everything to the DOM in one go at the end
                    var tmp = "";
                    // for each country
                    for (var i = 0; i < countries.length; i++) {
                        var c = countries[i];
                        // open the list item
                        tmp += "<li class='country ".concat(className, "' id='iti-item-").concat(c.iso2, "' role='option' data-dial-code='").concat(c.dialCode, "' data-country-code='").concat(c.iso2, "'>");
                        // add the flag
                        tmp += "<div class='flag-box'><div class='iti-flag ".concat(c.iso2, "'></div></div>");
                        // and the country name and dial code
                        tmp += "<span class='country-name'>".concat(c.name, "</span>");
                        tmp += "<span class='dial-code'>+".concat(c.dialCode, "</span>");
                        // close the list item
                        tmp += "</li>";
                    }
                    this.countryList.insertAdjacentHTML("beforeend", tmp);
                }
            }, {
                key: "_setInitialState",
                value: function _setInitialState() {
                    var val = this.telInput.value;
                    var dialCode = this._getDialCode(val);
                    var isRegionlessNanp = this._isRegionlessNanp(val);
                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;
                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the
                    // flag, else fall back to the default country
                    if (dialCode && !isRegionlessNanp) {
                        this._updateFlagFromNumber(val);
                    } else if (initialCountry !== "auto") {
                        // see if we should select a flag
                        if (initialCountry) {
                            this._setFlag(initialCountry.toLowerCase());
                        } else {
                            if (dialCode && isRegionlessNanp) {
                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US
                                this._setFlag("us");
                            } else {
                                // no dial code and no initialCountry, so default to first in list
                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;
                                if (!val) {
                                    this._setFlag(this.defaultCountry);
                                }
                            }
                        }
                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code
                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {
                            this.telInput.value = "+".concat(this.selectedCountryData.dialCode);
                        }
                    }
                    // NOTE: if initialCountry is set to auto, that will be handled separately
                    // format - note this wont be run after _updateDialCode as that's only called if no val
                    if (val) this._updateValFromNumber(val);
                }
            }, {
                key: "_initListeners",
                value: function _initListeners() {
                    this._initKeyListeners();
                    if (this.options.autoHideDialCode) this._initBlurListeners();
                    if (this.options.allowDropdown) this._initDropdownListeners();
                    if (this.hiddenInput) this._initHiddenInputListener();
                }
            }, {
                key: "_initHiddenInputListener",
                value: function _initHiddenInputListener() {
                    var _this3 = this;
                    this._handleHiddenInputSubmit = function() {
                        _this3.hiddenInput.value = _this3.getNumber();
                    };
                    if (this.telInput.form) this.telInput.form.addEventListener("submit", this._handleHiddenInputSubmit);
                }
            }, {
                key: "_getClosestLabel",
                value: function _getClosestLabel() {
                    var el = this.telInput;
                    while (el && el.tagName !== "LABEL") {
                        el = el.parentNode;
                    }
                    return el;
                }
            }, {
                key: "_initDropdownListeners",
                value: function _initDropdownListeners() {
                    var _this4 = this;
                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to
                    // open the dropdown would then automatically trigger a 2nd click on the input which would
                    // close it again
                    this._handleLabelClick = function(e) {
                        // if the dropdown is closed, then focus the input, else ignore the click
                        if (_this4.countryList.classList.contains("hide")) _this4.telInput.focus(); else e.preventDefault();
                    };
                    var label = this._getClosestLabel();
                    if (label) label.addEventListener("click", this._handleLabelClick);
                    // toggle country dropdown on click
                    this._handleClickSelectedFlag = function() {
                        // only intercept this event if we're opening the dropdown
                        // else let it bubble up to the top ("click-off-to-close" listener)
                        // we cannot just stopPropagation as it may be needed to close another instance
                        if (_this4.countryList.classList.contains("hide") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {
                            _this4._showDropdown();
                        }
                    };
                    this.selectedFlag.addEventListener("click", this._handleClickSelectedFlag);
                    // open dropdown list if currently focused
                    this._handleFlagsContainerKeydown = function(e) {
                        var isDropdownHidden = _this4.countryList.classList.contains("hide");
                        if (isDropdownHidden && [ "ArrowUp", "ArrowDown", " ", "Enter" ].indexOf(e.key) !== -1) {
                            // prevent form from being submitted if "ENTER" was pressed
                            e.preventDefault();
                            // prevent event from being handled again by document
                            e.stopPropagation();
                            _this4._showDropdown();
                        }
                        // allow navigation from dropdown to input on TAB
                        if (e.key === "Tab") _this4._closeDropdown();
                    };
                    this.flagsContainer.addEventListener("keydown", this._handleFlagsContainerKeydown);
                }
            }, {
                key: "_initRequests",
                value: function _initRequests() {
                    var _this5 = this;
                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve
                    if (this.options.utilsScript && !window.intlTelInputUtils) {
                        // if the plugin is being initialised after the window.load event has already been fired
                        if (window.intlTelInputGlobals.windowLoaded) {
                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);
                        } else {
                            // wait until the load event so we don't block any other requests e.g. the flags image
                            window.addEventListener("load", function() {
                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);
                            });
                        }
                    } else this.resolveUtilsScriptPromise();
                    if (this.options.initialCountry === "auto") this._loadAutoCountry(); else this.resolveAutoCountryPromise();
                }
            }, {
                key: "_loadAutoCountry",
                value: function _loadAutoCountry() {
                    // 3 options:
                    // 1) already loaded (we're done)
                    // 2) not already started loading (start)
                    // 3) already started loading (do nothing - just wait for loading callback to fire)
                    if (window.intlTelInputGlobals.autoCountry) {
                        this.handleAutoCountry();
                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {
                        // don't do this twice!
                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;
                        if (typeof this.options.geoIpLookup === "function") {
                            this.options.geoIpLookup(function(countryCode) {
                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();
                                // tell all instances the auto country is ready
                                // TODO: this should just be the current instances
                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight
                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using
                                // setTimeout means that the current thread of execution will finish before executing
                                // this, which allows the plugin to finish initialising.
                                setTimeout(function() {
                                    return forEachInstance("handleAutoCountry");
                                });
                            }, function() {
                                return forEachInstance("rejectAutoCountryPromise");
                            });
                        }
                    }
                }
            }, {
                key: "_initKeyListeners",
                value: function _initKeyListeners() {
                    var _this6 = this;
                    // update flag on keyup
                    this._handleKeyupEvent = function() {
                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {
                            _this6._triggerCountryChange();
                        }
                    };
                    this.telInput.addEventListener("keyup", this._handleKeyupEvent);
                    // update flag on cut/paste events (now supported in all major browsers)
                    this._handleClipboardEvent = function() {
                        // hack because "paste" event is fired before input is updated
                        setTimeout(_this6._handleKeyupEvent);
                    };
                    this.telInput.addEventListener("cut", this._handleClipboardEvent);
                    this.telInput.addEventListener("paste", this._handleClipboardEvent);
                }
            }, {
                key: "_cap",
                value: function _cap(number) {
                    var max = this.telInput.getAttribute("maxlength");
                    return max && number.length > max ? number.substr(0, max) : number;
                }
            }, {
                key: "_initBlurListeners",
                value: function _initBlurListeners() {
                    var _this7 = this;
                    // on blur or form submit: if just a dial code then remove it
                    this._handleSubmitOrBlurEvent = function() {
                        _this7._removeEmptyDialCode();
                    };
                    if (this.telInput.form) this.telInput.form.addEventListener("submit", this._handleSubmitOrBlurEvent);
                    this.telInput.addEventListener("blur", this._handleSubmitOrBlurEvent);
                }
            }, {
                key: "_removeEmptyDialCode",
                value: function _removeEmptyDialCode() {
                    if (this.telInput.value.charAt(0) === "+") {
                        var numeric = this._getNumeric(this.telInput.value);
                        // if just a plus, or if just a dial code
                        if (!numeric || this.selectedCountryData.dialCode === numeric) {
                            this.telInput.value = "";
                        }
                    }
                }
            }, {
                key: "_getNumeric",
                value: function _getNumeric(s) {
                    return s.replace(/\D/g, "");
                }
            }, {
                key: "_trigger",
                value: function _trigger(name) {
                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax
                    var e = document.createEvent("Event");
                    e.initEvent(name, true, true);
                    // can bubble, and is cancellable
                    this.telInput.dispatchEvent(e);
                }
            }, {
                key: "_showDropdown",
                value: function _showDropdown() {
                    this.countryList.classList.remove("hide");
                    this.countryList.setAttribute("aria-expanded", "true");
                    this._setDropdownPosition();
                    // update highlighting and scroll to active list item
                    if (this.activeItem) {
                        this._highlightListItem(this.activeItem);
                        this._scrollTo(this.activeItem);
                    }
                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown
                    this._bindDropdownListeners();
                    // update the arrow
                    this.dropdownArrow.classList.add("up");
                    this._trigger("open:countrydropdown");
                }
            }, {
                key: "_toggleClass",
                value: function _toggleClass(el, className, shouldHaveClass) {
                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);
                }
            }, {
                key: "_setDropdownPosition",
                value: function _setDropdownPosition() {
                    var _this8 = this;
                    if (this.options.dropdownContainer) {
                        this.options.dropdownContainer.appendChild(this.dropdown);
                    }
                    if (!this.isMobile) {
                        var pos = this.telInput.getBoundingClientRect();
                        // windowTop from https://stackoverflow.com/a/14384091/217866
                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;
                        var inputTop = pos.top + windowTop;
                        var dropdownHeight = this.countryList.offsetHeight;
                        // dropdownFitsBelow = (dropdownBottom < windowBottom)
                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;
                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;
                        // by default, the dropdown will be below the input. If we want to position it above the
                        // input, we add the dropup class.
                        this._toggleClass(this.countryList, "dropup", !dropdownFitsBelow && dropdownFitsAbove);
                        // if dropdownContainer is enabled, calculate postion
                        if (this.options.dropdownContainer) {
                            // by default the dropdown will be directly over the input because it's not in the flow.
                            // If we want to position it below, we need to add some extra top value.
                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;
                            // calculate placement
                            this.dropdown.style.top = "".concat(inputTop + extraTop, "px");
                            this.dropdown.style.left = "".concat(pos.left + document.body.scrollLeft, "px");
                            // close menu on window scroll
                            this._handleWindowScroll = function() {
                                return _this8._closeDropdown();
                            };
                            window.addEventListener("scroll", this._handleWindowScroll);
                        }
                    }
                }
            }, {
                key: "_getClosestListItem",
                value: function _getClosestListItem(target) {
                    var el = target;
                    while (el && el !== this.countryList && !el.classList.contains("country")) {
                        el = el.parentNode;
                    }
                    // if we reached the countryList element, then return null
                    return el === this.countryList ? null : el;
                }
            }, {
                key: "_bindDropdownListeners",
                value: function _bindDropdownListeners() {
                    var _this9 = this;
                    // when mouse over a list item, just highlight that one
                    // we add the class "highlight", so if they hit "enter" we know which one to select
                    this._handleMouseoverCountryList = function(e) {
                        // handle event delegation, as we're listening for this event on the countryList
                        var listItem = _this9._getClosestListItem(e.target);
                        if (listItem) _this9._highlightListItem(listItem);
                    };
                    this.countryList.addEventListener("mouseover", this._handleMouseoverCountryList);
                    // listen for country selection
                    this._handleClickCountryList = function(e) {
                        var listItem = _this9._getClosestListItem(e.target);
                        if (listItem) _this9._selectListItem(listItem);
                    };
                    this.countryList.addEventListener("click", this._handleClickCountryList);
                    // click off to close
                    // (except when this initial opening click is bubbling up)
                    // we cannot just stopPropagation as it may be needed to close another instance
                    var isOpening = true;
                    this._handleClickOffToClose = function() {
                        if (!isOpening) _this9._closeDropdown();
                        isOpening = false;
                    };
                    document.documentElement.addEventListener("click", this._handleClickOffToClose);
                    // listen for up/down scrolling, enter to select, or letters to jump to country name.
                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they
                    // just hit down and hold it to scroll down (no keyup event).
                    // listen on the document because that's where key events are triggered if no input has focus
                    var query = "";
                    var queryTimer = null;
                    this._handleKeydownOnDropdown = function(e) {
                        // prevent down key from scrolling the whole page,
                        // and enter key from submitting a form etc
                        e.preventDefault();
                        // up and down to navigate
                        if (e.key === "ArrowUp" || e.key === "ArrowDown") _this9._handleUpDownKey(e.key); else if (e.key === "Enter") _this9._handleEnterKey(); else if (e.key === "Escape") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿ ]$/.test(e.key)) {
                            // jump to countries that start with the query string
                            if (queryTimer) clearTimeout(queryTimer);
                            query += e.key.toLowerCase();
                            _this9._searchForCountry(query);
                            // if the timer hits 1 second, reset the query
                            queryTimer = setTimeout(function() {
                                query = "";
                            }, 1e3);
                        }
                    };
                    document.addEventListener("keydown", this._handleKeydownOnDropdown);
                }
            }, {
                key: "_handleUpDownKey",
                value: function _handleUpDownKey(key) {
                    var next = key === "ArrowUp" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;
                    if (next) {
                        // skip the divider
                        if (next.classList.contains("divider")) {
                            next = key === "ArrowUp" ? next.previousElementSibling : next.nextElementSibling;
                        }
                        this._highlightListItem(next);
                        this._scrollTo(next);
                    }
                }
            }, {
                key: "_handleEnterKey",
                value: function _handleEnterKey() {
                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);
                }
            }, {
                key: "_searchForCountry",
                value: function _searchForCountry(query) {
                    for (var i = 0; i < this.countries.length; i++) {
                        if (this._startsWith(this.countries[i].name, query)) {
                            var listItem = this.countryList.querySelector("#iti-item-".concat(this.countries[i].iso2));
                            // update highlighting and scroll
                            this._highlightListItem(listItem);
                            this._scrollTo(listItem, true);
                            break;
                        }
                    }
                }
            }, {
                key: "_startsWith",
                value: function _startsWith(a, b) {
                    return a.substr(0, b.length).toLowerCase() === b;
                }
            }, {
                key: "_updateValFromNumber",
                value: function _updateValFromNumber(originalNumber) {
                    var number = originalNumber;
                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {
                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== "+");
                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;
                        var format = useNational ? NATIONAL : INTERNATIONAL;
                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);
                    }
                    number = this._beforeSetNumber(number);
                    this.telInput.value = number;
                }
            }, {
                key: "_updateFlagFromNumber",
                value: function _updateFlagFromNumber(originalNumber) {
                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts
                    // with a +1 so _getDialCode will be able to extract the area code
                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag
                    // from the number), that means we're initialising the plugin with a number that already has a
                    // dial code, so fine to ignore this bit
                    var number = originalNumber;
                    var isNanp = this.selectedCountryData.dialCode === "1";
                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== "+") {
                        if (number.charAt(0) !== "1") number = "1".concat(number);
                        number = "+".concat(number);
                    }
                    // try and extract valid dial code from input
                    var dialCode = this._getDialCode(number);
                    var numeric = this._getNumeric(number);
                    var countryCode = null;
                    if (dialCode) {
                        // check if one of the matching countries is already selected
                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];
                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1;
                        // check if the given number contains a NANP area code i.e. the only dialCode that could be
                        // extracted was +1 (instead of say +1204) and the actual number's length is >=4
                        var isNanpAreaCode = dialCode === "+1" && numeric.length >= 4;
                        var isRegionlessNanpNumber = this.selectedCountryData.dialCode === "1" && this._isRegionlessNanp(numeric);
                        // only update the flag if:
                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)
                        // AND
                        // B) either a matching country is not already selected OR the number contains a NANP area
                        // code (ensure the flag is set to the first matching country)
                        if (!isRegionlessNanpNumber && (!alreadySelected || isNanpAreaCode)) {
                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first
                            // non-empty index
                            for (var j = 0; j < countryCodes.length; j++) {
                                if (countryCodes[j]) {
                                    countryCode = countryCodes[j];
                                    break;
                                }
                            }
                        }
                    } else if (number.charAt(0) === "+" && numeric.length) {
                        // invalid dial code, so empty
                        // Note: use getNumeric here because the number has not been formatted yet, so could contain
                        // bad chars
                        countryCode = "";
                    } else if (!number || number === "+") {
                        // empty, or just a plus, so default
                        countryCode = this.defaultCountry;
                    }
                    if (countryCode !== null) {
                        return this._setFlag(countryCode);
                    }
                    return false;
                }
            }, {
                key: "_isRegionlessNanp",
                value: function _isRegionlessNanp(number) {
                    var numeric = this._getNumeric(number);
                    if (numeric.charAt(0) === "1") {
                        var areaCode = numeric.substr(1, 3);
                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;
                    }
                    return false;
                }
            }, {
                key: "_highlightListItem",
                value: function _highlightListItem(listItem) {
                    var prevItem = this.highlightedItem;
                    if (prevItem) prevItem.classList.remove("highlight");
                    this.highlightedItem = listItem;
                    this.highlightedItem.classList.add("highlight");
                }
            }, {
                key: "_getCountryData",
                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {
                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;
                    for (var i = 0; i < countryList.length; i++) {
                        if (countryList[i].iso2 === countryCode) {
                            return countryList[i];
                        }
                    }
                    if (allowFail) {
                        return null;
                    }
                    throw new Error("No country data for '".concat(countryCode, "'"));
                }
            }, {
                key: "_setFlag",
                value: function _setFlag(countryCode) {
                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};
                    // do this first as it will throw an error and stop if countryCode is invalid
                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};
                    // update the defaultCountry - we only need the iso2 from now on, so just store that
                    if (this.selectedCountryData.iso2) {
                        this.defaultCountry = this.selectedCountryData.iso2;
                    }
                    this.selectedFlagInner.setAttribute("class", "iti-flag ".concat(countryCode));
                    // update the selected country's title attribute
                    var title = countryCode ? "".concat(this.selectedCountryData.name, ": +").concat(this.selectedCountryData.dialCode) : "Unknown";
                    this.selectedFlag.setAttribute("title", title);
                    if (this.options.separateDialCode) {
                        var dialCode = this.selectedCountryData.dialCode ? "+".concat(this.selectedCountryData.dialCode) : "";
                        this.selectedDialCode.innerHTML = dialCode;
                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css
                        this.telInput.style.paddingLeft = "".concat(this.selectedFlag.offsetWidth + 6, "px");
                    }
                    // and the input's placeholder
                    this._updatePlaceholder();
                    // update the active list item
                    if (this.options.allowDropdown) {
                        var prevItem = this.activeItem;
                        if (prevItem) {
                            prevItem.classList.remove("active");
                            prevItem.setAttribute("aria-selected", "false");
                        }
                        if (countryCode) {
                            var nextItem = this.countryList.querySelector("#iti-item-".concat(countryCode));
                            nextItem.setAttribute("aria-selected", "true");
                            nextItem.classList.add("active");
                            this.activeItem = nextItem;
                            this.countryList.setAttribute("aria-activedescendant", nextItem.getAttribute("id"));
                        }
                    }
                    // return if the flag has changed or not
                    return prevCountry.iso2 !== countryCode;
                }
            }, {
                key: "_updatePlaceholder",
                value: function _updatePlaceholder() {
                    var shouldSetPlaceholder = this.options.autoPlaceholder === "aggressive" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === "polite";
                    if (window.intlTelInputUtils && shouldSetPlaceholder) {
                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];
                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : "";
                        placeholder = this._beforeSetNumber(placeholder);
                        if (typeof this.options.customPlaceholder === "function") {
                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);
                        }
                        this.telInput.setAttribute("placeholder", placeholder);
                    }
                }
            }, {
                key: "_selectListItem",
                value: function _selectListItem(listItem) {
                    // update selected flag and active list item
                    var flagChanged = this._setFlag(listItem.getAttribute("data-country-code"));
                    this._closeDropdown();
                    this._updateDialCode(listItem.getAttribute("data-dial-code"), true);
                    // focus the input
                    this.telInput.focus();
                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto
                    // inserting dial code), who try to put the cursor at the beginning the first time
                    var len = this.telInput.value.length;
                    this.telInput.setSelectionRange(len, len);
                    if (flagChanged) {
                        this._triggerCountryChange();
                    }
                }
            }, {
                key: "_closeDropdown",
                value: function _closeDropdown() {
                    this.countryList.classList.add("hide");
                    this.countryList.setAttribute("aria-expanded", "false");
                    // update the arrow
                    this.dropdownArrow.classList.remove("up");
                    // unbind key events
                    document.removeEventListener("keydown", this._handleKeydownOnDropdown);
                    document.documentElement.removeEventListener("click", this._handleClickOffToClose);
                    this.countryList.removeEventListener("mouseover", this._handleMouseoverCountryList);
                    this.countryList.removeEventListener("click", this._handleClickCountryList);
                    // remove menu from container
                    if (this.options.dropdownContainer) {
                        if (!this.isMobile) window.removeEventListener("scroll", this._handleWindowScroll);
                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);
                    }
                    this._trigger("close:countrydropdown");
                }
            }, {
                key: "_scrollTo",
                value: function _scrollTo(element, middle) {
                    var container = this.countryList;
                    // windowTop from https://stackoverflow.com/a/14384091/217866
                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;
                    var containerHeight = container.offsetHeight;
                    var containerTop = container.getBoundingClientRect().top + windowTop;
                    var containerBottom = containerTop + containerHeight;
                    var elementHeight = element.offsetHeight;
                    var elementTop = element.getBoundingClientRect().top + windowTop;
                    var elementBottom = elementTop + elementHeight;
                    var newScrollTop = elementTop - containerTop + container.scrollTop;
                    var middleOffset = containerHeight / 2 - elementHeight / 2;
                    if (elementTop < containerTop) {
                        // scroll up
                        if (middle) newScrollTop -= middleOffset;
                        container.scrollTop = newScrollTop;
                    } else if (elementBottom > containerBottom) {
                        // scroll down
                        if (middle) newScrollTop += middleOffset;
                        var heightDifference = containerHeight - elementHeight;
                        container.scrollTop = newScrollTop - heightDifference;
                    }
                }
            }, {
                key: "_updateDialCode",
                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {
                    var inputVal = this.telInput.value;
                    // save having to pass this every time
                    var newDialCode = "+".concat(newDialCodeBare);
                    var newNumber;
                    if (inputVal.charAt(0) === "+") {
                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)
                        var prevDialCode = this._getDialCode(inputVal);
                        if (prevDialCode) {
                            // current number contains a valid dial code, so replace it
                            newNumber = inputVal.replace(prevDialCode, newDialCode);
                        } else {
                            // current number contains an invalid dial code, so ditch it
                            // (no way to determine where the invalid dial code ends and the rest of the number begins)
                            newNumber = newDialCode;
                        }
                    } else if (this.options.nationalMode || this.options.separateDialCode) {
                        // don't do anything
                        return;
                    } else {
                        // nationalMode is disabled
                        if (inputVal) {
                            // there is an existing value with no dial code: prefix the new dial code
                            newNumber = newDialCode + inputVal;
                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {
                            // no existing value and either they've just selected a list item, or autoHideDialCode is
                            // disabled: insert new dial code
                            newNumber = newDialCode;
                        } else {
                            return;
                        }
                    }
                    this.telInput.value = newNumber;
                }
            }, {
                key: "_getDialCode",
                value: function _getDialCode(number) {
                    var dialCode = "";
                    // only interested in international numbers (starting with a plus)
                    if (number.charAt(0) === "+") {
                        var numericChars = "";
                        // iterate over chars
                        for (var i = 0; i < number.length; i++) {
                            var c = number.charAt(i);
                            // if char is number (https://stackoverflow.com/a/8935649/217866)
                            if (!isNaN(parseInt(c, 10))) {
                                numericChars += c;
                                // if current numericChars make a valid dial code
                                if (this.countryCodes[numericChars]) {
                                    // store the actual raw string (useful for matching later)
                                    dialCode = number.substr(0, i + 1);
                                }
                                // longest dial code is 4 chars
                                if (numericChars.length === 4) {
                                    break;
                                }
                            }
                        }
                    }
                    return dialCode;
                }
            }, {
                key: "_getFullNumber",
                value: function _getFullNumber() {
                    var val = this.telInput.value.trim();
                    var dialCode = this.selectedCountryData.dialCode;
                    var prefix;
                    var numericVal = this._getNumeric(val);
                    // normalized means ensure starts with a 1, so we can match against the full dial code
                    var normalizedVal = numericVal.charAt(0) === "1" ? numericVal : "1".concat(numericVal);
                    if (this.options.separateDialCode && val.charAt(0) !== "+") {
                        // when using separateDialCode, it is visible so is effectively part of the typed number
                        prefix = "+".concat(dialCode);
                    } else if (val && val.charAt(0) !== "+" && val.charAt(0) !== "1" && dialCode && dialCode.charAt(0) === "1" && dialCode.length === 4 && dialCode !== normalizedVal.substr(0, 4)) {
                        // ensure national NANP numbers contain the area code
                        prefix = dialCode.substr(1);
                    } else {
                        prefix = "";
                    }
                    return prefix + val;
                }
            }, {
                key: "_beforeSetNumber",
                value: function _beforeSetNumber(originalNumber) {
                    var number = originalNumber;
                    if (this.options.separateDialCode) {
                        var dialCode = this._getDialCode(number);
                        if (dialCode) {
                            // US dialCode is "+1", which is what we want
                            // CA dialCode is "+1 123", which is wrong - should be "+1" (as it has multiple area codes)
                            // AS dialCode is "+1 684", which is what we want (as it doesn't have area codes)
                            // Solution: if the country has area codes, then revert to just the dial code
                            if (this.selectedCountryData.areaCodes !== null) {
                                dialCode = "+".concat(this.selectedCountryData.dialCode);
                            }
                            // a lot of numbers will have a space separating the dial code and the main number, and
                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get
                            // rid of it
                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc
                            var start = number[dialCode.length] === " " || number[dialCode.length] === "-" ? dialCode.length + 1 : dialCode.length;
                            number = number.substr(start);
                        }
                    }
                    return this._cap(number);
                }
            }, {
                key: "_triggerCountryChange",
                value: function _triggerCountryChange() {
                    this._trigger("countrychange");
                }
            }, {
                key: "handleAutoCountry",
                value: function handleAutoCountry() {
                    if (this.options.initialCountry === "auto") {
                        // we must set this even if there is an initial val in the input: in case the initial val is
                        // invalid and they delete it - they should see their auto country
                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;
                        // if there's no initial value in the input, then update the flag
                        if (!this.telInput.value) {
                            this.setCountry(this.defaultCountry);
                        }
                        this.resolveAutoCountryPromise();
                    }
                }
            }, {
                key: "handleUtils",
                value: function handleUtils() {
                    // if the request was successful
                    if (window.intlTelInputUtils) {
                        // if there's an initial value in the input, then format it
                        if (this.telInput.value) {
                            this._updateValFromNumber(this.telInput.value);
                        }
                        this._updatePlaceholder();
                    }
                    this.resolveUtilsScriptPromise();
                }
            }, {
                key: "destroy",
                value: function destroy() {
                    var form = this.telInput.form;
                    if (this.options.allowDropdown) {
                        // make sure the dropdown is closed (and unbind listeners)
                        this._closeDropdown();
                        this.selectedFlag.removeEventListener("click", this._handleClickSelectedFlag);
                        this.flagsContainer.removeEventListener("keydown", this._handleFlagsContainerKeydown);
                        // label click hack
                        var label = this._getClosestLabel();
                        if (label) label.removeEventListener("click", this._handleLabelClick);
                    }
                    // unbind hiddenInput listeners
                    if (this.hiddenInput && form) form.removeEventListener("submit", this._handleHiddenInputSubmit);
                    // unbind autoHideDialCode listeners
                    if (this.options.autoHideDialCode) {
                        if (form) form.removeEventListener("submit", this._handleSubmitOrBlurEvent);
                        this.telInput.removeEventListener("blur", this._handleSubmitOrBlurEvent);
                    }
                    // unbind key events, and cut/paste events
                    this.telInput.removeEventListener("keyup", this._handleKeyupEvent);
                    this.telInput.removeEventListener("cut", this._handleClipboardEvent);
                    this.telInput.removeEventListener("paste", this._handleClipboardEvent);
                    // remove attribute of id instance: data-intl-tel-input-id
                    this.telInput.removeAttribute("data-intl-tel-input-id");
                    // remove markup (but leave the original input)
                    var wrapper = this.telInput.parentNode;
                    wrapper.parentNode.insertBefore(this.telInput, wrapper);
                    wrapper.parentNode.removeChild(wrapper);
                    delete window.intlTelInputGlobals.instances[this.id];
                }
            }, {
                key: "getExtension",
                value: function getExtension() {
                    if (window.intlTelInputUtils) {
                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);
                    }
                    return "";
                }
            }, {
                key: "getNumber",
                value: function getNumber(format) {
                    if (window.intlTelInputUtils) {
                        var iso2 = this.selectedCountryData.iso2;
                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);
                    }
                    return "";
                }
            }, {
                key: "getNumberType",
                value: function getNumberType() {
                    if (window.intlTelInputUtils) {
                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);
                    }
                    return -99;
                }
            }, {
                key: "getSelectedCountryData",
                value: function getSelectedCountryData() {
                    return this.selectedCountryData;
                }
            }, {
                key: "getValidationError",
                value: function getValidationError() {
                    if (window.intlTelInputUtils) {
                        var iso2 = this.selectedCountryData.iso2;
                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);
                    }
                    return -99;
                }
            }, {
                key: "isValidNumber",
                value: function isValidNumber() {
                    var val = this._getFullNumber().trim();
                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : "";
                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;
                }
            }, {
                key: "setCountry",
                value: function setCountry(originalCountryCode) {
                    var countryCode = originalCountryCode.toLowerCase();
                    // check if already selected
                    if (!this.selectedFlagInner.classList.contains(countryCode)) {
                        this._setFlag(countryCode);
                        this._updateDialCode(this.selectedCountryData.dialCode, false);
                        this._triggerCountryChange();
                    }
                }
            }, {
                key: "setNumber",
                value: function setNumber(number) {
                    // we must update the flag first, which updates this.selectedCountryData, which is used for
                    // formatting the number before displaying it
                    var flagChanged = this._updateFlagFromNumber(number);
                    this._updateValFromNumber(number);
                    if (flagChanged) {
                        this._triggerCountryChange();
                    }
                }
            }, {
                key: "setPlaceholderNumberType",
                value: function setPlaceholderNumberType(type) {
                    this.options.placeholderNumberType = type;
                    this._updatePlaceholder();
                }
            } ]);
            return Iti;
        }();
        /********************
 *  STATIC METHODS
 ********************/
        // get the country data object
        window.intlTelInputGlobals.getCountryData = function() {
            return allCountries;
        };
        // inject a <script> element to load utils.js
        var injectScript = function injectScript(path, handleSuccess, handleFailure) {
            // inject a new script element into the page
            var script = document.createElement("script");
            script.onload = function() {
                forEachInstance("handleUtils");
                if (handleSuccess) handleSuccess();
            };
            script.onerror = function() {
                forEachInstance("rejectUtilsScriptPromise");
                if (handleFailure) handleFailure();
            };
            script.className = "iti-load-utils";
            script.async = true;
            script.src = path;
            document.body.appendChild(script);
        };
        // load the utils script
        window.intlTelInputGlobals.loadUtils = function(path) {
            // 2 options:
            // 1) not already started loading (start)
            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will
            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)
            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {
                // only do this once
                window.intlTelInputGlobals.startedLoadingUtilsScript = true;
                // if we have promises, then return a promise
                if (typeof Promise !== "undefined") {
                    return new Promise(function(resolve, reject) {
                        return injectScript(path, resolve, reject);
                    });
                }
                injectScript(path);
            }
            return null;
        };
        // default options
        window.intlTelInputGlobals.defaults = defaults;
        // version
        window.intlTelInputGlobals.version = "15.0.2";
        // convenience wrapper
        return function(input, options) {
            var iti = new Iti(input, options);
            iti._init();
            input.setAttribute("data-intl-tel-input-id", iti.id);
            window.intlTelInputGlobals.instances[iti.id] = iti;
            return iti;
        };
    }();
});

/***/ }),

/***/ "./node_modules/intl-tel-input/index.js":
/*!**********************************************!*\
  !*** ./node_modules/intl-tel-input/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Exposing intl-tel-input as a component
 */
module.exports = __webpack_require__(/*! ./build/js/intlTelInput */ "./node_modules/intl-tel-input/build/js/intlTelInput.js");


/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/ssr-window/dist/ssr-window.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/ssr-window/dist/ssr-window.esm.js ***!
  \********************************************************/
/*! exports provided: window, document */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "window", function() { return win; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "document", function() { return doc; });
/**
 * SSR Window 1.0.1
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2018, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: July 18, 2018
 */
var doc = (typeof document === 'undefined') ? {
  body: {},
  addEventListener: function addEventListener() {},
  removeEventListener: function removeEventListener() {},
  activeElement: {
    blur: function blur() {},
    nodeName: '',
  },
  querySelector: function querySelector() {
    return null;
  },
  querySelectorAll: function querySelectorAll() {
    return [];
  },
  getElementById: function getElementById() {
    return null;
  },
  createEvent: function createEvent() {
    return {
      initEvent: function initEvent() {},
    };
  },
  createElement: function createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute: function setAttribute() {},
      getElementsByTagName: function getElementsByTagName() {
        return [];
      },
    };
  },
  location: { hash: '' },
} : document; // eslint-disable-line

var win = (typeof window === 'undefined') ? {
  document: doc,
  navigator: {
    userAgent: '',
  },
  location: {},
  history: {},
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener: function addEventListener() {},
  removeEventListener: function removeEventListener() {},
  getComputedStyle: function getComputedStyle() {
    return {
      getPropertyValue: function getPropertyValue() {
        return '';
      },
    };
  },
  Image: function Image() {},
  Date: function Date() {},
  screen: {},
  setTimeout: function setTimeout() {},
  clearTimeout: function clearTimeout() {},
} : window; // eslint-disable-line




/***/ }),

/***/ "./node_modules/swiper/dist/js/swiper.esm.bundle.js":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/dist/js/swiper.esm.bundle.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom7/dist/dom7.modular */ "./node_modules/dom7/dist/dom7.modular.js");
/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ssr-window */ "./node_modules/ssr-window/dist/ssr-window.esm.js");
/**
 * Swiper 4.5.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://www.idangero.us/swiper/
 *
 * Copyright 2014-2019 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: February 22, 2019
 */




const Methods = {
  addClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["addClass"],
  removeClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["removeClass"],
  hasClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["hasClass"],
  toggleClass: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["toggleClass"],
  attr: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["attr"],
  removeAttr: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["removeAttr"],
  data: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["data"],
  transform: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["transform"],
  transition: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["transition"],
  on: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["on"],
  off: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["off"],
  trigger: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["trigger"],
  transitionEnd: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["transitionEnd"],
  outerWidth: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["outerWidth"],
  outerHeight: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["outerHeight"],
  offset: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["offset"],
  css: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["css"],
  each: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["each"],
  html: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["html"],
  text: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["text"],
  is: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["is"],
  index: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["index"],
  eq: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["eq"],
  append: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["append"],
  prepend: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["prepend"],
  next: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["next"],
  nextAll: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["nextAll"],
  prev: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["prev"],
  prevAll: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["prevAll"],
  parent: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["parent"],
  parents: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["parents"],
  closest: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["closest"],
  find: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["find"],
  children: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["children"],
  remove: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["remove"],
  add: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["add"],
  styles: dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["styles"],
};

Object.keys(Methods).forEach((methodName) => {
  dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"].fn[methodName] = Methods[methodName];
});

const Utils = {
  deleteProps(obj) {
    const object = obj;
    Object.keys(object).forEach((key) => {
      try {
        object[key] = null;
      } catch (e) {
        // no getter for object
      }
      try {
        delete object[key];
      } catch (e) {
        // something got wrong
      }
    });
  },
  nextTick(callback, delay = 0) {
    return setTimeout(callback, delay);
  },
  now() {
    return Date.now();
  },
  getTranslate(el, axis = 'x') {
    let matrix;
    let curTransform;
    let transformMatrix;

    const curStyle = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].getComputedStyle(el, null);

    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix) {
      curTransform = curStyle.transform || curStyle.webkitTransform;
      if (curTransform.split(',').length > 6) {
        curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');
      }
      // Some old versions of Webkit choke when 'none' is passed; pass
      // empty string instead in this case
      transformMatrix = new ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
    } else {
      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
      matrix = transformMatrix.toString().split(',');
    }

    if (axis === 'x') {
      // Latest Chrome and webkits Fix
      if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix) curTransform = transformMatrix.m41;
      // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);
      // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
    }
    if (axis === 'y') {
      // Latest Chrome and webkits Fix
      if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebKitCSSMatrix) curTransform = transformMatrix.m42;
      // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);
      // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
    }
    return curTransform || 0;
  },
  parseUrlQuery(url) {
    const query = {};
    let urlToParse = url || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].location.href;
    let i;
    let params;
    let param;
    let length;
    if (typeof urlToParse === 'string' && urlToParse.length) {
      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
      params = urlToParse.split('&').filter(paramsPart => paramsPart !== '');
      length = params.length;

      for (i = 0; i < length; i += 1) {
        param = params[i].replace(/#\S+/g, '').split('=');
        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
      }
    }
    return query;
  },
  isObject(o) {
    return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
  },
  extend(...args) {
    const to = Object(args[0]);
    for (let i = 1; i < args.length; i += 1) {
      const nextSource = args[i];
      if (nextSource !== undefined && nextSource !== null) {
        const keysArray = Object.keys(Object(nextSource));
        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
          const nextKey = keysArray[nextIndex];
          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
              Utils.extend(to[nextKey], nextSource[nextKey]);
            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
              to[nextKey] = {};
              Utils.extend(to[nextKey], nextSource[nextKey]);
            } else {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
    }
    return to;
  },
};

const Support = (function Support() {
  const testDiv = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].createElement('div');
  return {
    touch: (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr.touch === true) || (function checkTouch() {
      return !!((ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.maxTouchPoints > 0) || ('ontouchstart' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"]) || (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].DocumentTouch && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"] instanceof ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].DocumentTouch));
    }()),

    pointerEvents: !!(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.pointerEnabled || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].PointerEvent || ('maxTouchPoints' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.maxTouchPoints > 0)),
    prefixedPointerEvents: !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.msPointerEnabled,

    transition: (function checkTransition() {
      const style = testDiv.style;
      return ('transition' in style || 'webkitTransition' in style || 'MozTransition' in style);
    }()),
    transforms3d: (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Modernizr.csstransforms3d === true) || (function checkTransforms3d() {
      const style = testDiv.style;
      return ('webkitPerspective' in style || 'MozPerspective' in style || 'OPerspective' in style || 'MsPerspective' in style || 'perspective' in style);
    }()),

    flexbox: (function checkFlexbox() {
      const style = testDiv.style;
      const styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
      for (let i = 0; i < styles.length; i += 1) {
        if (styles[i] in style) return true;
      }
      return false;
    }()),

    observer: (function checkObserver() {
      return ('MutationObserver' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"] || 'WebkitMutationObserver' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"]);
    }()),

    passiveListener: (function checkPassiveListener() {
      let supportsPassive = false;
      try {
        const opts = Object.defineProperty({}, 'passive', {
          // eslint-disable-next-line
          get() {
            supportsPassive = true;
          },
        });
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('testPassiveListener', null, opts);
      } catch (e) {
        // No support
      }
      return supportsPassive;
    }()),

    gestures: (function checkGestures() {
      return 'ongesturestart' in ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"];
    }()),
  };
}());

const Browser = (function Browser() {
  function isSafari() {
    const ua = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.toLowerCase();
    return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
  }
  return {
    isIE: !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.match(/Trident/g) || !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.match(/MSIE/g),
    isEdge: !!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.match(/Edge/g),
    isSafari: isSafari(),
    isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent),
  };
}());

class SwiperClass {
  constructor(params = {}) {
    const self = this;
    self.params = params;

    // Events
    self.eventsListeners = {};

    if (self.params && self.params.on) {
      Object.keys(self.params.on).forEach((eventName) => {
        self.on(eventName, self.params.on[eventName]);
      });
    }
  }

  on(events, handler, priority) {
    const self = this;
    if (typeof handler !== 'function') return self;
    const method = priority ? 'unshift' : 'push';
    events.split(' ').forEach((event) => {
      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  }

  once(events, handler, priority) {
    const self = this;
    if (typeof handler !== 'function') return self;
    function onceHandler(...args) {
      handler.apply(self, args);
      self.off(events, onceHandler);
      if (onceHandler.f7proxy) {
        delete onceHandler.f7proxy;
      }
    }
    onceHandler.f7proxy = handler;
    return self.on(events, onceHandler, priority);
  }

  off(events, handler) {
    const self = this;
    if (!self.eventsListeners) return self;
    events.split(' ').forEach((event) => {
      if (typeof handler === 'undefined') {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event] && self.eventsListeners[event].length) {
        self.eventsListeners[event].forEach((eventHandler, index) => {
          if (eventHandler === handler || (eventHandler.f7proxy && eventHandler.f7proxy === handler)) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  }

  emit(...args) {
    const self = this;
    if (!self.eventsListeners) return self;
    let events;
    let data;
    let context;
    if (typeof args[0] === 'string' || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
    }
    const eventsArray = Array.isArray(events) ? events : events.split(' ');
    eventsArray.forEach((event) => {
      if (self.eventsListeners && self.eventsListeners[event]) {
        const handlers = [];
        self.eventsListeners[event].forEach((eventHandler) => {
          handlers.push(eventHandler);
        });
        handlers.forEach((eventHandler) => {
          eventHandler.apply(context, data);
        });
      }
    });
    return self;
  }

  useModulesParams(instanceParams) {
    const instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach((moduleName) => {
      const module = instance.modules[moduleName];
      // Extend params
      if (module.params) {
        Utils.extend(instanceParams, module.params);
      }
    });
  }

  useModules(modulesParams = {}) {
    const instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach((moduleName) => {
      const module = instance.modules[moduleName];
      const moduleParams = modulesParams[moduleName] || {};
      // Extend instance methods and props
      if (module.instance) {
        Object.keys(module.instance).forEach((modulePropName) => {
          const moduleProp = module.instance[modulePropName];
          if (typeof moduleProp === 'function') {
            instance[modulePropName] = moduleProp.bind(instance);
          } else {
            instance[modulePropName] = moduleProp;
          }
        });
      }
      // Add event listeners
      if (module.on && instance.on) {
        Object.keys(module.on).forEach((moduleEventName) => {
          instance.on(moduleEventName, module.on[moduleEventName]);
        });
      }

      // Module create callback
      if (module.create) {
        module.create.bind(instance)(moduleParams);
      }
    });
  }

  static set components(components) {
    const Class = this;
    if (!Class.use) return;
    Class.use(components);
  }

  static installModule(module, ...params) {
    const Class = this;
    if (!Class.prototype.modules) Class.prototype.modules = {};
    const name = module.name || (`${Object.keys(Class.prototype.modules).length}_${Utils.now()}`);
    Class.prototype.modules[name] = module;
    // Prototype
    if (module.proto) {
      Object.keys(module.proto).forEach((key) => {
        Class.prototype[key] = module.proto[key];
      });
    }
    // Class
    if (module.static) {
      Object.keys(module.static).forEach((key) => {
        Class[key] = module.static[key];
      });
    }
    // Callback
    if (module.install) {
      module.install.apply(Class, params);
    }
    return Class;
  }

  static use(module, ...params) {
    const Class = this;
    if (Array.isArray(module)) {
      module.forEach(m => Class.installModule(m));
      return Class;
    }
    return Class.installModule(module, ...params);
  }
}

function updateSize () {
  const swiper = this;
  let width;
  let height;
  const $el = swiper.$el;
  if (typeof swiper.params.width !== 'undefined') {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }
  if (typeof swiper.params.height !== 'undefined') {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }
  if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {
    return;
  }

  // Subtract paddings
  width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
  height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);

  Utils.extend(swiper, {
    width,
    height,
    size: swiper.isHorizontal() ? width : height,
  });
}

function updateSlides () {
  const swiper = this;
  const params = swiper.params;

  const {
    $wrapperEl, size: swiperSize, rtlTranslate: rtl, wrongRTL,
  } = swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;
  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);
  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  let snapGrid = [];
  const slidesGrid = [];
  const slidesSizesGrid = [];

  let offsetBefore = params.slidesOffsetBefore;
  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  let offsetAfter = params.slidesOffsetAfter;
  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  const previousSnapGridLength = swiper.snapGrid.length;
  const previousSlidesGridLength = swiper.snapGrid.length;

  let spaceBetween = params.spaceBetween;
  let slidePosition = -offsetBefore;
  let prevSlideSize = 0;
  let index = 0;
  if (typeof swiperSize === 'undefined') {
    return;
  }
  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
  }

  swiper.virtualSize = -spaceBetween;

  // reset margins
  if (rtl) slides.css({ marginLeft: '', marginTop: '' });
  else slides.css({ marginRight: '', marginBottom: '' });

  let slidesNumberEvenToRows;
  if (params.slidesPerColumn > 1) {
    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
    }
    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  }

  // Calc slides
  let slideSize;
  const slidesPerColumn = params.slidesPerColumn;
  const slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  const numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);
  for (let i = 0; i < slidesLength; i += 1) {
    slideSize = 0;
    const slide = slides.eq(i);
    if (params.slidesPerColumn > 1) {
      // Set slides order
      let newSlideOrderIndex;
      let column;
      let row;
      if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - (column * slidesPerColumn);
        if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {
          row += 1;
          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }
        newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);
        slide
          .css({
            '-webkit-box-ordinal-group': newSlideOrderIndex,
            '-moz-box-ordinal-group': newSlideOrderIndex,
            '-ms-flex-order': newSlideOrderIndex,
            '-webkit-order': newSlideOrderIndex,
            order: newSlideOrderIndex,
          });
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - (row * slidesPerRow);
      }
      slide
        .css(
          `margin-${swiper.isHorizontal() ? 'top' : 'left'}`,
          (row !== 0 && params.spaceBetween) && (`${params.spaceBetween}px`)
        )
        .attr('data-swiper-column', column)
        .attr('data-swiper-row', row);
    }
    if (slide.css('display') === 'none') continue; // eslint-disable-line

    if (params.slidesPerView === 'auto') {
      const slideStyles = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].getComputedStyle(slide[0], null);
      const currentTransform = slide[0].style.transform;
      const currentWebKitTransform = slide[0].style.webkitTransform;
      if (currentTransform) {
        slide[0].style.transform = 'none';
      }
      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = 'none';
      }
      if (params.roundLengths) {
        slideSize = swiper.isHorizontal()
          ? slide.outerWidth(true)
          : slide.outerHeight(true);
      } else {
        // eslint-disable-next-line
        if (swiper.isHorizontal()) {
          const width = parseFloat(slideStyles.getPropertyValue('width'));
          const paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));
          const paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));
          const marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));
          const marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));
          const boxSizing = slideStyles.getPropertyValue('box-sizing');
          if (boxSizing && boxSizing === 'border-box') {
            slideSize = width + marginLeft + marginRight;
          } else {
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;
          }
        } else {
          const height = parseFloat(slideStyles.getPropertyValue('height'));
          const paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));
          const paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));
          const marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));
          const marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));
          const boxSizing = slideStyles.getPropertyValue('box-sizing');
          if (boxSizing && boxSizing === 'border-box') {
            slideSize = height + marginTop + marginBottom;
          } else {
            slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;
          }
        }
      }
      if (currentTransform) {
        slide[0].style.transform = currentTransform;
      }
      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = currentWebKitTransform;
      }
      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);

      if (slides[i]) {
        if (swiper.isHorizontal()) {
          slides[i].style.width = `${slideSize}px`;
        } else {
          slides[i].style.height = `${slideSize}px`;
        }
      }
    }
    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }
    slidesSizesGrid.push(slideSize);


    if (params.centeredSlides) {
      slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;
      if (i === 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index) % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index) % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;

    prevSlideSize = slideSize;

    index += 1;
  }
  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  let newSlidesGrid;

  if (
    rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });
  }
  if (!Support.flexbox || params.setWrapperSize) {
    if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });
    else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });
  }

  if (params.slidesPerColumn > 1) {
    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });
    else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });
    if (params.centeredSlides) {
      newSlidesGrid = [];
      for (let i = 0; i < snapGrid.length; i += 1) {
        let slidesGridItem = snapGrid[i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }
      snapGrid = newSlidesGrid;
    }
  }

  // Remove last grid elements depending on width
  if (!params.centeredSlides) {
    newSlidesGrid = [];
    for (let i = 0; i < snapGrid.length; i += 1) {
      let slidesGridItem = snapGrid[i];
      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(slidesGridItem);
      }
    }
    snapGrid = newSlidesGrid;
    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }
  if (snapGrid.length === 0) snapGrid = [0];

  if (params.spaceBetween !== 0) {
    if (swiper.isHorizontal()) {
      if (rtl) slides.css({ marginLeft: `${spaceBetween}px` });
      else slides.css({ marginRight: `${spaceBetween}px` });
    } else slides.css({ marginBottom: `${spaceBetween}px` });
  }

  if (params.centerInsufficientSlides) {
    let allSlidesSize = 0;
    slidesSizesGrid.forEach((slideSizeValue) => {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    allSlidesSize -= params.spaceBetween;
    if (allSlidesSize < swiperSize) {
      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;
      snapGrid.forEach((snap, snapIndex) => {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach((snap, snapIndex) => {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }

  Utils.extend(swiper, {
    slides,
    snapGrid,
    slidesGrid,
    slidesSizesGrid,
  });

  if (slidesLength !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }
  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit('snapGridLengthChange');
  }
  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
}

function updateAutoHeight (speed) {
  const swiper = this;
  const activeSlides = [];
  let newHeight = 0;
  let i;
  if (typeof speed === 'number') {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  }
  // Find slides currently in view
  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
      const index = swiper.activeIndex + i;
      if (index > swiper.slides.length) break;
      activeSlides.push(swiper.slides.eq(index)[0]);
    }
  } else {
    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
  }

  // Find new height from highest slide in view
  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      const height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  }

  // Update Height
  if (newHeight) swiper.$wrapperEl.css('height', `${newHeight}px`);
}

function updateSlidesOffset () {
  const swiper = this;
  const slides = swiper.slides;
  for (let i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
}

function updateSlidesProgress (translate = (this && this.translate) || 0) {
  const swiper = this;
  const params = swiper.params;

  const { slides, rtlTranslate: rtl } = swiper;

  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();

  let offsetCenter = -translate;
  if (rtl) offsetCenter = translate;

  // Visible Slides
  slides.removeClass(params.slideVisibleClass);

  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];

  for (let i = 0; i < slides.length; i += 1) {
    const slide = slides[i];
    const slideProgress = (
      (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset
    ) / (slide.swiperSlideSize + params.spaceBetween);
    if (params.watchSlidesVisibility) {
      const slideBefore = -(offsetCenter - slide.swiperSlideOffset);
      const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      const isVisible = (slideBefore >= 0 && slideBefore < swiper.size)
                || (slideAfter > 0 && slideAfter <= swiper.size)
                || (slideBefore <= 0 && slideAfter >= swiper.size);
      if (isVisible) {
        swiper.visibleSlides.push(slide);
        swiper.visibleSlidesIndexes.push(i);
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }
    slide.progress = rtl ? -slideProgress : slideProgress;
  }
  swiper.visibleSlides = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.visibleSlides);
}

function updateProgress (translate = (this && this.translate) || 0) {
  const swiper = this;
  const params = swiper.params;

  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  let { progress, isBeginning, isEnd } = swiper;
  const wasBeginning = isBeginning;
  const wasEnd = isEnd;
  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / (translatesDiff);
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }
  Utils.extend(swiper, {
    progress,
    isBeginning,
    isEnd,
  });

  if (params.watchSlidesProgress || params.watchSlidesVisibility) swiper.updateSlidesProgress(translate);

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }
  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }
  if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
}

function updateSlidesClasses () {
  const swiper = this;

  const {
    slides, params, $wrapperEl, activeIndex, realIndex,
  } = swiper;
  const isVirtual = swiper.virtual && params.virtual.enabled;

  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);

  let activeSlide;
  if (isVirtual) {
    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index="${activeIndex}"]`);
  } else {
    activeSlide = slides.eq(activeIndex);
  }

  // Active classes
  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl
        .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${realIndex}"]`)
        .addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl
        .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${realIndex}"]`)
        .addClass(params.slideDuplicateActiveClass);
    }
  }
  // Next Slide
  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);
  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  }
  // Prev Slide
  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);
  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }
  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl
        .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${nextSlide.attr('data-swiper-slide-index')}"]`)
        .addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl
        .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${nextSlide.attr('data-swiper-slide-index')}"]`)
        .addClass(params.slideDuplicateNextClass);
    }
    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl
        .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${prevSlide.attr('data-swiper-slide-index')}"]`)
        .addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl
        .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${prevSlide.attr('data-swiper-slide-index')}"]`)
        .addClass(params.slideDuplicatePrevClass);
    }
  }
}

function updateActiveIndex (newActiveIndex) {
  const swiper = this;
  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  const {
    slidesGrid, snapGrid, params, activeIndex: previousIndex, realIndex: previousRealIndex, snapIndex: previousSnapIndex,
  } = swiper;
  let activeIndex = newActiveIndex;
  let snapIndex;
  if (typeof activeIndex === 'undefined') {
    for (let i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    }
    // Normalize slideIndex
    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
  }
  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    snapIndex = Math.floor(activeIndex / params.slidesPerGroup);
  }
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit('snapIndexChange');
    }
    return;
  }

  // Get real index
  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);

  Utils.extend(swiper, {
    snapIndex,
    realIndex,
    previousIndex,
    activeIndex,
  });
  swiper.emit('activeIndexChange');
  swiper.emit('snapIndexChange');
  if (previousRealIndex !== realIndex) {
    swiper.emit('realIndexChange');
  }
  swiper.emit('slideChange');
}

function updateClickedSlide (e) {
  const swiper = this;
  const params = swiper.params;
  const slide = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).closest(`.${params.slideClass}`)[0];
  let slideFound = false;
  if (slide) {
    for (let i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) slideFound = true;
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;
    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slide).attr('data-swiper-slide-index'), 10);
    } else {
      swiper.clickedIndex = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slide).index();
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }
  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}

var update = {
  updateSize,
  updateSlides,
  updateAutoHeight,
  updateSlidesOffset,
  updateSlidesProgress,
  updateProgress,
  updateSlidesClasses,
  updateActiveIndex,
  updateClickedSlide,
};

function getTranslate (axis = this.isHorizontal() ? 'x' : 'y') {
  const swiper = this;

  const {
    params, rtlTranslate: rtl, translate, $wrapperEl,
  } = swiper;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  let currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
  if (rtl) currentTranslate = -currentTranslate;

  return currentTranslate || 0;
}

function setTranslate (translate, byController) {
  const swiper = this;
  const {
    rtlTranslate: rtl, params, $wrapperEl, progress,
  } = swiper;
  let x = 0;
  let y = 0;
  const z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (!params.virtualTranslate) {
    if (Support.transforms3d) $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);
    else $wrapperEl.transform(`translate(${x}px, ${y}px)`);
  }
  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y;

  // Check if we need to update progress
  let newProgress;
  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / (translatesDiff);
  }
  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
}

function minTranslate () {
  return (-this.snapGrid[0]);
}

function maxTranslate () {
  return (-this.snapGrid[this.snapGrid.length - 1]);
}

var translate = {
  getTranslate,
  setTranslate,
  minTranslate,
  maxTranslate,
};

function setTransition (duration, byController) {
  const swiper = this;

  swiper.$wrapperEl.transition(duration);

  swiper.emit('setTransition', duration, byController);
}

function transitionStart (runCallbacks = true, direction) {
  const swiper = this;
  const { activeIndex, params, previousIndex } = swiper;
  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }

  let dir = direction;
  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';
    else if (activeIndex < previousIndex) dir = 'prev';
    else dir = 'reset';
  }

  swiper.emit('transitionStart');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionStart');
      return;
    }
    swiper.emit('slideChangeTransitionStart');
    if (dir === 'next') {
      swiper.emit('slideNextTransitionStart');
    } else {
      swiper.emit('slidePrevTransitionStart');
    }
  }
}

function transitionEnd (runCallbacks = true, direction) {
  const swiper = this;
  const { activeIndex, previousIndex } = swiper;
  swiper.animating = false;
  swiper.setTransition(0);

  let dir = direction;
  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';
    else if (activeIndex < previousIndex) dir = 'prev';
    else dir = 'reset';
  }

  swiper.emit('transitionEnd');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionEnd');
      return;
    }
    swiper.emit('slideChangeTransitionEnd');
    if (dir === 'next') {
      swiper.emit('slideNextTransitionEnd');
    } else {
      swiper.emit('slidePrevTransitionEnd');
    }
  }
}

var transition = {
  setTransition,
  transitionStart,
  transitionEnd,
};

function slideTo (index = 0, speed = this.params.speed, runCallbacks = true, internal) {
  const swiper = this;
  let slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;

  const {
    params, snapGrid, slidesGrid, previousIndex, activeIndex, rtlTranslate: rtl,
  } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  let snapIndex = Math.floor(slideIndex / params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  const translate = -snapGrid[snapIndex];

  // Update progress
  swiper.updateProgress(translate);

  // Normalize slideIndex
  if (params.normalizeSlideIndex) {
    for (let i = 0; i < slidesGrid.length; i += 1) {
      if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
        slideIndex = i;
      }
    }
  }
  // Directions locks
  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
      return false;
    }
    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) return false;
    }
  }

  let direction;
  if (slideIndex > activeIndex) direction = 'next';
  else if (slideIndex < activeIndex) direction = 'prev';
  else direction = 'reset';


  // Update Index
  if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {
    swiper.updateActiveIndex(slideIndex);
    // Update Height
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
    swiper.updateSlidesClasses();
    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }
    if (direction !== 'reset') {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }
    return false;
  }

  if (speed === 0 || !Support.transition) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    swiper.transitionEnd(runCallbacks, direction);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    if (!swiper.animating) {
      swiper.animating = true;
      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }
      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
    }
  }

  return true;
}

function slideToLoop (index = 0, speed = this.params.speed, runCallbacks = true, internal) {
  const swiper = this;
  let newIndex = index;
  if (swiper.params.loop) {
    newIndex += swiper.loopedSlides;
  }

  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideNext (speed = this.params.speed, runCallbacks = true, internal) {
  const swiper = this;
  const { params, animating } = swiper;
  if (params.loop) {
    if (animating) return false;
    swiper.loopFix();
    // eslint-disable-next-line
    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
    return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
  }
  return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slidePrev (speed = this.params.speed, runCallbacks = true, internal) {
  const swiper = this;
  const {
    params, animating, snapGrid, slidesGrid, rtlTranslate,
  } = swiper;

  if (params.loop) {
    if (animating) return false;
    swiper.loopFix();
    // eslint-disable-next-line
    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }
  const translate = rtlTranslate ? swiper.translate : -swiper.translate;
  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }
  const normalizedTranslate = normalize(translate);
  const normalizedSnapGrid = snapGrid.map(val => normalize(val));
  const normalizedSlidesGrid = slidesGrid.map(val => normalize(val));

  const currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
  const prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
  let prevIndex;
  if (typeof prevSnap !== 'undefined') {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
  }
  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideReset (speed = this.params.speed, runCallbacks = true, internal) {
  const swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideToClosest (speed = this.params.speed, runCallbacks = true, internal) {
  const swiper = this;
  let index = swiper.activeIndex;
  const snapIndex = Math.floor(index / swiper.params.slidesPerGroup);

  if (snapIndex < swiper.snapGrid.length - 1) {
    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

    const currentSnap = swiper.snapGrid[snapIndex];
    const nextSnap = swiper.snapGrid[snapIndex + 1];

    if ((translate - currentSnap) > (nextSnap - currentSnap) / 2) {
      index = swiper.params.slidesPerGroup;
    }
  }

  return swiper.slideTo(index, speed, runCallbacks, internal);
}

function slideToClickedSlide () {
  const swiper = this;
  const { params, $wrapperEl } = swiper;

  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  let slideToIndex = swiper.clickedIndex;
  let realIndex;
  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);
    if (params.centeredSlides) {
      if (
        (slideToIndex < swiper.loopedSlides - (slidesPerView / 2))
        || (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))
      ) {
        swiper.loopFix();
        slideToIndex = $wrapperEl
          .children(`.${params.slideClass}[data-swiper-slide-index="${realIndex}"]:not(.${params.slideDuplicateClass})`)
          .eq(0)
          .index();

        Utils.nextTick(() => {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl
        .children(`.${params.slideClass}[data-swiper-slide-index="${realIndex}"]:not(.${params.slideDuplicateClass})`)
        .eq(0)
        .index();

      Utils.nextTick(() => {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

var slide = {
  slideTo,
  slideToLoop,
  slideNext,
  slidePrev,
  slideReset,
  slideToClosest,
  slideToClickedSlide,
};

function loopCreate () {
  const swiper = this;
  const { params, $wrapperEl } = swiper;
  // Remove duplicated slides
  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();

  let slides = $wrapperEl.children(`.${params.slideClass}`);

  if (params.loopFillGroupWithBlank) {
    const blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);
    if (blankSlidesNum !== params.slidesPerGroup) {
      for (let i = 0; i < blankSlidesNum; i += 1) {
        const blankNode = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);
        $wrapperEl.append(blankNode);
      }
      slides = $wrapperEl.children(`.${params.slideClass}`);
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;

  swiper.loopedSlides = parseInt(params.loopedSlides || params.slidesPerView, 10);
  swiper.loopedSlides += params.loopAdditionalSlides;
  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  const prependSlides = [];
  const appendSlides = [];
  slides.each((index, el) => {
    const slide = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(el);
    if (index < swiper.loopedSlides) appendSlides.push(el);
    if (index < slides.length && index >= slides.length - swiper.loopedSlides) prependSlides.push(el);
    slide.attr('data-swiper-slide-index', index);
  });
  for (let i = 0; i < appendSlides.length; i += 1) {
    $wrapperEl.append(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {
    $wrapperEl.prepend(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
}

function loopFix () {
  const swiper = this;
  const {
    params, activeIndex, slides, loopedSlides, allowSlidePrev, allowSlideNext, snapGrid, rtlTranslate: rtl,
  } = swiper;
  let newIndex;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;

  const snapTranslate = -snapGrid[activeIndex];
  const diff = snapTranslate - swiper.getTranslate();


  // Fix For Negative Oversliding
  if (activeIndex < loopedSlides) {
    newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;
    newIndex += loopedSlides;
    const slideChanged = swiper.slideTo(newIndex, 0, false, true);
    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  } else if ((params.slidesPerView === 'auto' && activeIndex >= loopedSlides * 2) || (activeIndex >= slides.length - loopedSlides)) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;
    const slideChanged = swiper.slideTo(newIndex, 0, false, true);
    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  }
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
}

function loopDestroy () {
  const swiper = this;
  const { $wrapperEl, params, slides } = swiper;
  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();
  slides.removeAttr('data-swiper-slide-index');
}

var loop = {
  loopCreate,
  loopFix,
  loopDestroy,
};

function setGrabCursor (moving) {
  const swiper = this;
  if (Support.touch || !swiper.params.simulateTouch || (swiper.params.watchOverflow && swiper.isLocked)) return;
  const el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
}

function unsetGrabCursor () {
  const swiper = this;
  if (Support.touch || (swiper.params.watchOverflow && swiper.isLocked)) return;
  swiper.el.style.cursor = '';
}

var grabCursor = {
  setGrabCursor,
  unsetGrabCursor,
};

function appendSlide (slides) {
  const swiper = this;
  const { $wrapperEl, params } = swiper;
  if (params.loop) {
    swiper.loopDestroy();
  }
  if (typeof slides === 'object' && 'length' in slides) {
    for (let i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
  } else {
    $wrapperEl.append(slides);
  }
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!(params.observer && Support.observer)) {
    swiper.update();
  }
}

function prependSlide (slides) {
  const swiper = this;
  const { params, $wrapperEl, activeIndex } = swiper;

  if (params.loop) {
    swiper.loopDestroy();
  }
  let newActiveIndex = activeIndex + 1;
  if (typeof slides === 'object' && 'length' in slides) {
    for (let i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.prepend(slides[i]);
    }
    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!(params.observer && Support.observer)) {
    swiper.update();
  }
  swiper.slideTo(newActiveIndex, 0, false);
}

function addSlide (index, slides) {
  const swiper = this;
  const { $wrapperEl, params, activeIndex } = swiper;
  let activeIndexBuffer = activeIndex;
  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);
  }
  const baseLength = swiper.slides.length;
  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }
  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }
  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;

  const slidesBuffer = [];
  for (let i = baseLength - 1; i >= index; i -= 1) {
    const currentSlide = swiper.slides.eq(i);
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (let i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    $wrapperEl.append(slides);
  }

  for (let i = 0; i < slidesBuffer.length; i += 1) {
    $wrapperEl.append(slidesBuffer[i]);
  }

  if (params.loop) {
    swiper.loopCreate();
  }
  if (!(params.observer && Support.observer)) {
    swiper.update();
  }
  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

function removeSlide (slidesIndexes) {
  const swiper = this;
  const { params, $wrapperEl, activeIndex } = swiper;

  let activeIndexBuffer = activeIndex;
  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);
  }
  let newActiveIndex = activeIndexBuffer;
  let indexToRemove;

  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
    for (let i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }
    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && Support.observer)) {
    swiper.update();
  }
  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

function removeAllSlides () {
  const swiper = this;

  const slidesIndexes = [];
  for (let i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }
  swiper.removeSlide(slidesIndexes);
}

var manipulation = {
  appendSlide,
  prependSlide,
  addSlide,
  removeSlide,
  removeAllSlides,
};

const Device = (function Device() {
  const ua = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent;

  const device = {
    ios: false,
    android: false,
    androidChrome: false,
    desktop: false,
    windows: false,
    iphone: false,
    ipod: false,
    ipad: false,
    cordova: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].cordova || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].phonegap,
    phonegap: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].cordova || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].phonegap,
  };

  const windows = ua.match(/(Windows Phone);?[\s\/]+([\d.]+)?/); // eslint-disable-line
  const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
  const ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);


  // Windows
  if (windows) {
    device.os = 'windows';
    device.osVersion = windows[2];
    device.windows = true;
  }
  // Android
  if (android && !windows) {
    device.os = 'android';
    device.osVersion = android[2];
    device.android = true;
    device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
  }
  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  }
  // iOS
  if (iphone && !ipod) {
    device.osVersion = iphone[2].replace(/_/g, '.');
    device.iphone = true;
  }
  if (ipad) {
    device.osVersion = ipad[2].replace(/_/g, '.');
    device.ipad = true;
  }
  if (ipod) {
    device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
    device.iphone = true;
  }
  // iOS 8+ changed UA
  if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
    if (device.osVersion.split('.')[0] === '10') {
      device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
    }
  }

  // Desktop
  device.desktop = !(device.os || device.android || device.webView);

  // Webview
  device.webView = (iphone || ipad || ipod) && ua.match(/.*AppleWebKit(?!.*Safari)/i);

  // Minimal UI
  if (device.os && device.os === 'ios') {
    const osVersionArr = device.osVersion.split('.');
    const metaViewport = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].querySelector('meta[name="viewport"]');
    device.minimalUi = !device.webView
      && (ipod || iphone)
      && (osVersionArr[0] * 1 === 7 ? osVersionArr[1] * 1 >= 1 : osVersionArr[0] * 1 > 7)
      && metaViewport && metaViewport.getAttribute('content').indexOf('minimal-ui') >= 0;
  }

  // Pixel Ratio
  device.pixelRatio = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].devicePixelRatio || 1;

  // Export object
  return device;
}());

function onTouchStart (event) {
  const swiper = this;
  const data = swiper.touchEventsData;
  const { params, touches } = swiper;
  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return;
  if (params.noSwiping && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).closest(params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`)[0]) {
    swiper.allowClick = true;
    return;
  }
  if (params.swipeHandler) {
    if (!Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e).closest(params.swipeHandler)[0]) return;
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  const startX = touches.currentX;
  const startY = touches.currentY;

  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore

  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
  if (
    edgeSwipeDetection
    && ((startX <= edgeSwipeThreshold)
    || (startX >= ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].screen.width - edgeSwipeThreshold))
  ) {
    return;
  }

  Utils.extend(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined,
  });

  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = Utils.now();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;
  if (e.type !== 'touchstart') {
    let preventDefault = true;
    if (Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is(data.formElements)) preventDefault = false;
    if (
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement
      && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement).is(data.formElements)
      && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement !== e.target
    ) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.blur();
    }

    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
    if (params.touchStartForcePreventDefault || shouldPreventDefault) {
      e.preventDefault();
    }
  }
  swiper.emit('touchStart', e);
}

function onTouchMove (event) {
  const swiper = this;
  const data = swiper.touchEventsData;
  const { params, touches, rtlTranslate: rtl } = swiper;
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }
    return;
  }
  if (data.isTouchEvent && e.type === 'mousemove') return;
  const pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
  const pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }
  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;
    if (data.isTouched) {
      Utils.extend(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY,
      });
      data.touchStartTime = Utils.now();
    }
    return;
  }
  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (
        (pageY < touches.startY && swiper.translate <= swiper.maxTranslate())
        || (pageY > touches.startY && swiper.translate >= swiper.minTranslate())
      ) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (
      (pageX < touches.startX && swiper.translate <= swiper.maxTranslate())
      || (pageX > touches.startX && swiper.translate >= swiper.minTranslate())
    ) {
      return;
    }
  }
  if (data.isTouchEvent && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement) {
    if (e.target === ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is(data.formElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }
  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }
  if (e.targetTouches && e.targetTouches.length > 1) return;

  touches.currentX = pageX;
  touches.currentY = pageY;

  const diffX = touches.currentX - touches.startX;
  const diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt((diffX ** 2) + (diffY ** 2)) < swiper.params.threshold) return;

  if (typeof data.isScrolling === 'undefined') {
    let touchAngle;
    if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if ((diffX * diffX) + (diffY * diffY) >= 25) {
        touchAngle = (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);
      }
    }
  }
  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }
  if (typeof data.startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }
  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }
  if (!data.startMoving) {
    return;
  }
  swiper.allowClick = false;
  e.preventDefault();
  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }
    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);
    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
    }
    data.allowMomentumBounce = false;
    // Grab Cursor
    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }
    swiper.emit('sliderFirstMove', e);
  }
  swiper.emit('sliderMove', e);
  data.isMoved = true;

  let diff = swiper.isHorizontal() ? diffX : diffY;
  touches.diff = diff;

  diff *= params.touchRatio;
  if (rtl) diff = -diff;

  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;

  let disableParentSwiper = true;
  let resistanceRatio = params.resistanceRatio;
  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }
  if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = (swiper.minTranslate() - 1) + ((-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio);
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = (swiper.maxTranslate() + 1) - ((swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio);
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  }

  // Directions locks
  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }
  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }


  // Threshold
  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger) return;

  // Update active index in free mode
  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }
  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime,
      });
    }
    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: Utils.now(),
    });
  }
  // Update progress
  swiper.updateProgress(data.currentTranslate);
  // Update translate
  swiper.setTranslate(data.currentTranslate);
}

function onTouchEnd (event) {
  const swiper = this;
  const data = swiper.touchEventsData;

  const {
    params, touches, rtlTranslate: rtl, $wrapperEl, slidesGrid, snapGrid,
  } = swiper;
  let e = event;
  if (e.originalEvent) e = e.originalEvent;
  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }
  data.allowTouchCallbacks = false;
  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }
    data.isMoved = false;
    data.startMoving = false;
    return;
  }
  // Return Grab Cursor
  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  }

  // Time diff
  const touchEndTime = Utils.now();
  const timeDiff = touchEndTime - data.touchStartTime;

  // Tap, doubleTap, Click
  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap', e);
    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) > 300) {
      if (data.clickTimeout) clearTimeout(data.clickTimeout);
      data.clickTimeout = Utils.nextTick(() => {
        if (!swiper || swiper.destroyed) return;
        swiper.emit('click', e);
      }, 300);
    }
    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {
      if (data.clickTimeout) clearTimeout(data.clickTimeout);
      swiper.emit('doubleTap', e);
    }
  }

  data.lastClickTime = Utils.now();
  Utils.nextTick(() => {
    if (!swiper.destroyed) swiper.allowClick = true;
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }
  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;

  let currentPos;
  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }

  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }
      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        const lastMoveEvent = data.velocities.pop();
        const velocityEvent = data.velocities.pop();

        const distance = lastMoveEvent.position - velocityEvent.position;
        const time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;
        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        }
        // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.
        if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }
      swiper.velocity *= params.freeModeMomentumVelocityRatio;

      data.velocities.length = 0;
      let momentumDuration = 1000 * params.freeModeMomentumRatio;
      const momentumDistance = swiper.velocity * momentumDuration;

      let newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;

      let doBounce = false;
      let afterBouncePosition;
      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      let needsLoopFix;
      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }
          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }
        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }
          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }
        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeModeSticky) {
        let nextSlide;
        for (let j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }

        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }
        newPosition = -newPosition;
      }
      if (needsLoopFix) {
        swiper.once('transitionEnd', () => {
          swiper.loopFix();
        });
      }
      // Fix duration
      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        $wrapperEl.transitionEnd(() => {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          swiper.emit('momentumBounce');

          swiper.setTransition(params.speed);
          swiper.setTranslate(afterBouncePosition);
          $wrapperEl.transitionEnd(() => {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(() => {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeModeSticky) {
      swiper.slideToClosest();
      return;
    }

    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    return;
  }

  // Find current slide
  let stopIndex = 0;
  let groupSize = swiper.slidesSizesGrid[0];
  for (let i = 0; i < slidesGrid.length; i += params.slidesPerGroup) {
    if (typeof slidesGrid[i + params.slidesPerGroup] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + params.slidesPerGroup]) {
        stopIndex = i;
        groupSize = slidesGrid[i + params.slidesPerGroup] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  }

  // Find current slide size
  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + params.slidesPerGroup);
      else swiper.slideTo(stopIndex);
    }
    if (swiper.swipeDirection === 'prev') {
      if (ratio > (1 - params.longSwipesRatio)) swiper.slideTo(stopIndex + params.slidesPerGroup);
      else swiper.slideTo(stopIndex);
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (swiper.swipeDirection === 'next') {
      swiper.slideTo(stopIndex + params.slidesPerGroup);
    }
    if (swiper.swipeDirection === 'prev') {
      swiper.slideTo(stopIndex);
    }
  }
}

function onResize () {
  const swiper = this;

  const { params, el } = swiper;

  if (el && el.offsetWidth === 0) return;

  // Breakpoints
  if (params.breakpoints) {
    swiper.setBreakpoint();
  }

  // Save locks
  const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;

  // Disable locks on resize
  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;

  swiper.updateSize();
  swiper.updateSlides();

  if (params.freeMode) {
    const newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
    swiper.setTranslate(newTranslate);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
  } else {
    swiper.updateSlidesClasses();
    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
    } else {
      swiper.slideTo(swiper.activeIndex, 0, false, true);
    }
  }
  // Return locks after resize
  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;

  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

function onClick (e) {
  const swiper = this;
  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();
    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

function attachEvents() {
  const swiper = this;
  const {
    params, touchEvents, el, wrapperEl,
  } = swiper;

  {
    swiper.onTouchStart = onTouchStart.bind(swiper);
    swiper.onTouchMove = onTouchMove.bind(swiper);
    swiper.onTouchEnd = onTouchEnd.bind(swiper);
  }

  swiper.onClick = onClick.bind(swiper);

  const target = params.touchEventsTarget === 'container' ? el : wrapperEl;
  const capture = !!params.nested;

  // Touch Events
  {
    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
      target.addEventListener(touchEvents.start, swiper.onTouchStart, false);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEvents.move, swiper.onTouchMove, capture);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support.touch) {
        const passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        target.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        target.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? { passive: false, capture } : capture);
        target.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
      }
      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
        target.addEventListener('mousedown', swiper.onTouchStart, false);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener('mousemove', swiper.onTouchMove, capture);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener('mouseup', swiper.onTouchEnd, false);
      }
    }
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      target.addEventListener('click', swiper.onClick, true);
    }
  }

  // Resize handler
  swiper.on((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize, true);
}

function detachEvents() {
  const swiper = this;

  const {
    params, touchEvents, el, wrapperEl,
  } = swiper;

  const target = params.touchEventsTarget === 'container' ? el : wrapperEl;
  const capture = !!params.nested;

  // Touch Events
  {
    if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
      target.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support.touch) {
        const passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        target.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        target.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
        target.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
      }
      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
        target.removeEventListener('mousedown', swiper.onTouchStart, false);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener('mousemove', swiper.onTouchMove, capture);
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener('mouseup', swiper.onTouchEnd, false);
      }
    }
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      target.removeEventListener('click', swiper.onClick, true);
    }
  }

  // Resize handler
  swiper.off((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize);
}

var events = {
  attachEvents,
  detachEvents,
};

function setBreakpoint () {
  const swiper = this;
  const {
    activeIndex, initialized, loopedSlides = 0, params,
  } = swiper;
  const breakpoints = params.breakpoints;
  if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) return;

  // Set breakpoint for window width and update parameters
  const breakpoint = swiper.getBreakpoint(breakpoints);

  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
    if (breakpointOnlyParams) {
      ['slidesPerView', 'spaceBetween', 'slidesPerGroup'].forEach((param) => {
        const paramValue = breakpointOnlyParams[param];
        if (typeof paramValue === 'undefined') return;
        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
          breakpointOnlyParams[param] = 'auto';
        } else if (param === 'slidesPerView') {
          breakpointOnlyParams[param] = parseFloat(paramValue);
        } else {
          breakpointOnlyParams[param] = parseInt(paramValue, 10);
        }
      });
    }

    const breakpointParams = breakpointOnlyParams || swiper.originalParams;
    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

    if (directionChanged && initialized) {
      swiper.changeDirection();
    }

    Utils.extend(swiper.params, breakpointParams);

    Utils.extend(swiper, {
      allowTouchMove: swiper.params.allowTouchMove,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
    });

    swiper.currentBreakpoint = breakpoint;

    if (needsReLoop && initialized) {
      swiper.loopDestroy();
      swiper.loopCreate();
      swiper.updateSlides();
      swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);
    }

    swiper.emit('breakpoint', breakpointParams);
  }
}

function getBreakpoint (breakpoints) {
  const swiper = this;
  // Get breakpoint for window width
  if (!breakpoints) return undefined;
  let breakpoint = false;
  const points = [];
  Object.keys(breakpoints).forEach((point) => {
    points.push(point);
  });
  points.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));
  for (let i = 0; i < points.length; i += 1) {
    const point = points[i];
    if (swiper.params.breakpointsInverse) {
      if (point <= ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerWidth) {
        breakpoint = point;
      }
    } else if (point >= ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerWidth && !breakpoint) {
      breakpoint = point;
    }
  }
  return breakpoint || 'max';
}

var breakpoints = { setBreakpoint, getBreakpoint };

function addClasses () {
  const swiper = this;
  const {
    classNames, params, rtl, $el,
  } = swiper;
  const suffixes = [];

  suffixes.push('initialized');
  suffixes.push(params.direction);

  if (params.freeMode) {
    suffixes.push('free-mode');
  }
  if (!Support.flexbox) {
    suffixes.push('no-flexbox');
  }
  if (params.autoHeight) {
    suffixes.push('autoheight');
  }
  if (rtl) {
    suffixes.push('rtl');
  }
  if (params.slidesPerColumn > 1) {
    suffixes.push('multirow');
  }
  if (Device.android) {
    suffixes.push('android');
  }
  if (Device.ios) {
    suffixes.push('ios');
  }
  // WP8 Touch Events Fix
  if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
    suffixes.push(`wp8-${params.direction}`);
  }

  suffixes.forEach((suffix) => {
    classNames.push(params.containerModifierClass + suffix);
  });

  $el.addClass(classNames.join(' '));
}

function removeClasses () {
  const swiper = this;
  const { $el, classNames } = swiper;

  $el.removeClass(classNames.join(' '));
}

var classes = { addClasses, removeClasses };

function loadImage (imageEl, src, srcset, sizes, checkForComplete, callback) {
  let image;
  function onReady() {
    if (callback) callback();
  }
  if (!imageEl.complete || !checkForComplete) {
    if (src) {
      image = new ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Image();
      image.onload = onReady;
      image.onerror = onReady;
      if (sizes) {
        image.sizes = sizes;
      }
      if (srcset) {
        image.srcset = srcset;
      }
      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
}

function preloadImages () {
  const swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');
  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;
    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) swiper.update();
      swiper.emit('imagesReady');
    }
  }
  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {
    const imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(
      imageEl,
      imageEl.currentSrc || imageEl.getAttribute('src'),
      imageEl.srcset || imageEl.getAttribute('srcset'),
      imageEl.sizes || imageEl.getAttribute('sizes'),
      true,
      onReady
    );
  }
}

var images = {
  loadImage,
  preloadImages,
};

function checkOverflow() {
  const swiper = this;
  const wasLocked = swiper.isLocked;

  swiper.isLocked = swiper.snapGrid.length === 1;
  swiper.allowSlideNext = !swiper.isLocked;
  swiper.allowSlidePrev = !swiper.isLocked;

  // events
  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
    swiper.navigation.update();
  }
}

var checkOverflow$1 = { checkOverflow };

var defaults = {
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,
  //
  preventInteractionOnTransition: false,

  // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,

  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,

  // Autoheight
  autoHeight: false,

  // Set wrapper width
  setWrapperSize: false,

  // Virtual Translate
  virtualTranslate: false,

  // Effects
  effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

  // Breakpoints
  breakpoints: undefined,
  breakpointsInverse: false,

  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  centeredSlides: false,
  slidesOffsetBefore: 0, // in px
  slidesOffsetAfter: 0, // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,

  // Disable swiper and hide navigation when container not overflow
  watchOverflow: false,

  // Round length
  roundLengths: false,

  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: true,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,

  // Unique Navigation Elements
  uniqueNavElements: true,

  // Resistance
  resistance: true,
  resistanceRatio: 0.85,

  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,

  // Cursor
  grabCursor: false,

  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,

  // Images
  preloadImages: true,
  updateOnImagesReady: true,

  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,

  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null, // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',
  noSwipingSelector: null,

  // Passive Listeners
  passiveListeners: true,

  // NS
  containerModifierClass: 'swiper-container-', // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',

  // Callbacks
  runCallbacksOnInit: true,
};

/* eslint no-param-reassign: "off" */

const prototypes = {
  update,
  translate,
  transition,
  slide,
  loop,
  grabCursor,
  manipulation,
  events,
  breakpoints,
  checkOverflow: checkOverflow$1,
  classes,
  images,
};

const extendedDefaults = {};

class Swiper extends SwiperClass {
  constructor(...args) {
    let el;
    let params;
    if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
      params = args[0];
    } else {
      [el, params] = args;
    }
    if (!params) params = {};

    params = Utils.extend({}, params);
    if (el && !params.el) params.el = el;

    super(params);

    Object.keys(prototypes).forEach((prototypeGroup) => {
      Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
        if (!Swiper.prototype[protoMethod]) {
          Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
        }
      });
    });

    // Swiper Instance
    const swiper = this;
    if (typeof swiper.modules === 'undefined') {
      swiper.modules = {};
    }
    Object.keys(swiper.modules).forEach((moduleName) => {
      const module = swiper.modules[moduleName];
      if (module.params) {
        const moduleParamName = Object.keys(module.params)[0];
        const moduleParams = module.params[moduleParamName];
        if (typeof moduleParams !== 'object' || moduleParams === null) return;
        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;
        if (params[moduleParamName] === true) {
          params[moduleParamName] = { enabled: true };
        }
        if (
          typeof params[moduleParamName] === 'object'
          && !('enabled' in params[moduleParamName])
        ) {
          params[moduleParamName].enabled = true;
        }
        if (!params[moduleParamName]) params[moduleParamName] = { enabled: false };
      }
    });

    // Extend defaults with modules params
    const swiperParams = Utils.extend({}, defaults);
    swiper.useModulesParams(swiperParams);

    // Extend defaults with passed params
    swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = Utils.extend({}, swiper.params);
    swiper.passedParams = Utils.extend({}, params);

    // Save Dom lib
    swiper.$ = dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"];

    // Find el
    const $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.params.el);
    el = $el[0];

    if (!el) {
      return undefined;
    }

    if ($el.length > 1) {
      const swipers = [];
      $el.each((index, containerEl) => {
        const newParams = Utils.extend({}, params, { el: containerEl });
        swipers.push(new Swiper(newParams));
      });
      return swipers;
    }

    el.swiper = swiper;
    $el.data('swiper', swiper);

    // Find Wrapper
    const $wrapperEl = $el.children(`.${swiper.params.wrapperClass}`);

    // Extend Swiper
    Utils.extend(swiper, {
      $el,
      el,
      $wrapperEl,
      wrapperEl: $wrapperEl[0],

      // Classes
      classNames: [],

      // Slides
      slides: Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],

      // isDirection
      isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // RTL
      rtl: (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box',

      // Indexes
      activeIndex: 0,
      realIndex: 0,

      //
      isBeginning: true,
      isEnd: false,

      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,

      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,

      // Touch Events
      touchEvents: (function touchEvents() {
        const touch = ['touchstart', 'touchmove', 'touchend'];
        let desktop = ['mousedown', 'mousemove', 'mouseup'];
        if (Support.pointerEvents) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        } else if (Support.prefixedPointerEvents) {
          desktop = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
        }
        swiper.touchEventsTouch = {
          start: touch[0],
          move: touch[1],
          end: touch[2],
        };
        swiper.touchEventsDesktop = {
          start: desktop[0],
          move: desktop[1],
          end: desktop[2],
        };
        return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
      }()),
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        formElements: 'input, select, option, textarea, button, video',
        // Last click time
        lastClickTime: Utils.now(),
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        isTouchEvent: undefined,
        startMoving: undefined,
      },

      // Clicks
      allowClick: true,

      // Touches
      allowTouchMove: swiper.params.allowTouchMove,

      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0,
      },

      // Images
      imagesToLoad: [],
      imagesLoaded: 0,

    });

    // Install Modules
    swiper.useModules();

    // Init
    if (swiper.params.init) {
      swiper.init();
    }

    // Return app instance
    return swiper;
  }

  slidesPerViewDynamic() {
    const swiper = this;
    const {
      params, slides, slidesGrid, size: swiperSize, activeIndex,
    } = swiper;
    let spv = 1;
    if (params.centeredSlides) {
      let slideSize = slides[activeIndex].swiperSlideSize;
      let breakLoop;
      for (let i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
      for (let i = activeIndex - 1; i >= 0; i -= 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      for (let i = activeIndex + 1; i < slides.length; i += 1) {
        if (slidesGrid[i] - slidesGrid[activeIndex] < swiperSize) {
          spv += 1;
        }
      }
    }
    return spv;
  }

  update() {
    const swiper = this;
    if (!swiper || swiper.destroyed) return;
    const { snapGrid, params } = swiper;
    // Breakpoints
    if (params.breakpoints) {
      swiper.setBreakpoint();
    }
    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();

    function setTranslate() {
      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    let translated;
    if (swiper.params.freeMode) {
      setTranslate();
      if (swiper.params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }
      if (!translated) {
        setTranslate();
      }
    }
    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }
    swiper.emit('update');
  }

  changeDirection(newDirection, needUpdate = true) {
    const swiper = this;
    const currentDirection = swiper.params.direction;
    if (!newDirection) {
      // eslint-disable-next-line
      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
    }
    if ((newDirection === currentDirection) || (newDirection !== 'horizontal' && newDirection !== 'vertical')) {
      return swiper;
    }

    if (currentDirection === 'vertical') {
      swiper.$el
        .removeClass(`${swiper.params.containerModifierClass}vertical wp8-vertical`)
        .addClass(`${swiper.params.containerModifierClass}${newDirection}`);

      if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
        swiper.$el.addClass(`${swiper.params.containerModifierClass}wp8-${newDirection}`);
      }
    }
    if (currentDirection === 'horizontal') {
      swiper.$el
        .removeClass(`${swiper.params.containerModifierClass}horizontal wp8-horizontal`)
        .addClass(`${swiper.params.containerModifierClass}${newDirection}`);

      if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
        swiper.$el.addClass(`${swiper.params.containerModifierClass}wp8-${newDirection}`);
      }
    }

    swiper.params.direction = newDirection;

    swiper.slides.each((slideIndex, slideEl) => {
      if (newDirection === 'vertical') {
        slideEl.style.width = '';
      } else {
        slideEl.style.height = '';
      }
    });

    swiper.emit('changeDirection');
    if (needUpdate) swiper.update();

    return swiper;
  }

  init() {
    const swiper = this;
    if (swiper.initialized) return;

    swiper.emit('beforeInit');

    // Set breakpoint
    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    }

    // Add Classes
    swiper.addClasses();

    // Create loop
    if (swiper.params.loop) {
      swiper.loopCreate();
    }

    // Update size
    swiper.updateSize();

    // Update slides
    swiper.updateSlides();

    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    }

    // Set Grab Cursor
    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }

    if (swiper.params.preloadImages) {
      swiper.preloadImages();
    }

    // Slide To Initial Slide
    if (swiper.params.loop) {
      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
    }

    // Attach events
    swiper.attachEvents();

    // Init Flag
    swiper.initialized = true;

    // Emit
    swiper.emit('init');
  }

  destroy(deleteInstance = true, cleanStyles = true) {
    const swiper = this;
    const {
      params, $el, $wrapperEl, slides,
    } = swiper;

    if (typeof swiper.params === 'undefined' || swiper.destroyed) {
      return null;
    }

    swiper.emit('beforeDestroy');

    // Init Flag
    swiper.initialized = false;

    // Detach events
    swiper.detachEvents();

    // Destroy loop
    if (params.loop) {
      swiper.loopDestroy();
    }

    // Cleanup styles
    if (cleanStyles) {
      swiper.removeClasses();
      $el.removeAttr('style');
      $wrapperEl.removeAttr('style');
      if (slides && slides.length) {
        slides
          .removeClass([
            params.slideVisibleClass,
            params.slideActiveClass,
            params.slideNextClass,
            params.slidePrevClass,
          ].join(' '))
          .removeAttr('style')
          .removeAttr('data-swiper-slide-index')
          .removeAttr('data-swiper-column')
          .removeAttr('data-swiper-row');
      }
    }

    swiper.emit('destroy');

    // Detach emitter events
    Object.keys(swiper.eventsListeners).forEach((eventName) => {
      swiper.off(eventName);
    });

    if (deleteInstance !== false) {
      swiper.$el[0].swiper = null;
      swiper.$el.data('swiper', null);
      Utils.deleteProps(swiper);
    }
    swiper.destroyed = true;

    return null;
  }

  static extendDefaults(newDefaults) {
    Utils.extend(extendedDefaults, newDefaults);
  }

  static get extendedDefaults() {
    return extendedDefaults;
  }

  static get defaults() {
    return defaults;
  }

  static get Class() {
    return SwiperClass;
  }

  static get $() {
    return dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"];
  }
}

var Device$1 = {
  name: 'device',
  proto: {
    device: Device,
  },
  static: {
    device: Device,
  },
};

var Support$1 = {
  name: 'support',
  proto: {
    support: Support,
  },
  static: {
    support: Support,
  },
};

var Browser$1 = {
  name: 'browser',
  proto: {
    browser: Browser,
  },
  static: {
    browser: Browser,
  },
};

var Resize = {
  name: 'resize',
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      resize: {
        resizeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('beforeResize');
          swiper.emit('resize');
        },
        orientationChangeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('orientationchange');
        },
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      // Emit resize
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('resize', swiper.resize.resizeHandler);

      // Emit orientationchange
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy() {
      const swiper = this;
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].removeEventListener('resize', swiper.resize.resizeHandler);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
  },
};

const Observer = {
  func: ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].MutationObserver || ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].WebkitMutationObserver,
  attach(target, options = {}) {
    const swiper = this;

    const ObserverFunc = Observer.func;
    const observer = new ObserverFunc((mutations) => {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (mutations.length === 1) {
        swiper.emit('observerUpdate', mutations[0]);
        return;
      }
      const observerUpdate = function observerUpdate() {
        swiper.emit('observerUpdate', mutations[0]);
      };

      if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].requestAnimationFrame) {
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].requestAnimationFrame(observerUpdate);
      } else {
        ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].setTimeout(observerUpdate, 0);
      }
    });

    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData,
    });

    swiper.observer.observers.push(observer);
  },
  init() {
    const swiper = this;
    if (!Support.observer || !swiper.params.observer) return;
    if (swiper.params.observeParents) {
      const containerParents = swiper.$el.parents();
      for (let i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    }
    // Observe container
    swiper.observer.attach(swiper.$el[0], { childList: swiper.params.observeSlideChildren });

    // Observe wrapper
    swiper.observer.attach(swiper.$wrapperEl[0], { attributes: false });
  },
  destroy() {
    const swiper = this;
    swiper.observer.observers.forEach((observer) => {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  },
};

var Observer$1 = {
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
    observeSlideChildren: false,
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      observer: {
        init: Observer.init.bind(swiper),
        attach: Observer.attach.bind(swiper),
        destroy: Observer.destroy.bind(swiper),
        observers: [],
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      swiper.observer.init();
    },
    destroy() {
      const swiper = this;
      swiper.observer.destroy();
    },
  },
};

const Virtual = {
  update(force) {
    const swiper = this;
    const { slidesPerView, slidesPerGroup, centeredSlides } = swiper.params;
    const { addSlidesBefore, addSlidesAfter } = swiper.params.virtual;
    const {
      from: previousFrom,
      to: previousTo,
      slides,
      slidesGrid: previousSlidesGrid,
      renderSlide,
      offset: previousOffset,
    } = swiper.virtual;
    swiper.updateActiveIndex();
    const activeIndex = swiper.activeIndex || 0;

    let offsetProp;
    if (swiper.rtlTranslate) offsetProp = 'right';
    else offsetProp = swiper.isHorizontal() ? 'left' : 'top';

    let slidesAfter;
    let slidesBefore;
    if (centeredSlides) {
      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
    } else {
      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesBefore;
      slidesBefore = slidesPerGroup + addSlidesAfter;
    }
    const from = Math.max((activeIndex || 0) - slidesBefore, 0);
    const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
    const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);

    Utils.extend(swiper.virtual, {
      from,
      to,
      offset,
      slidesGrid: swiper.slidesGrid,
    });

    function onRendered() {
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();
      if (swiper.lazy && swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    }

    if (previousFrom === from && previousTo === to && !force) {
      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
        swiper.slides.css(offsetProp, `${offset}px`);
      }
      swiper.updateProgress();
      return;
    }
    if (swiper.params.virtual.renderExternal) {
      swiper.params.virtual.renderExternal.call(swiper, {
        offset,
        from,
        to,
        slides: (function getSlides() {
          const slidesToRender = [];
          for (let i = from; i <= to; i += 1) {
            slidesToRender.push(slides[i]);
          }
          return slidesToRender;
        }()),
      });
      onRendered();
      return;
    }
    const prependIndexes = [];
    const appendIndexes = [];
    if (force) {
      swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();
    } else {
      for (let i = previousFrom; i <= previousTo; i += 1) {
        if (i < from || i > to) {
          swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index="${i}"]`).remove();
        }
      }
    }
    for (let i = 0; i < slides.length; i += 1) {
      if (i >= from && i <= to) {
        if (typeof previousTo === 'undefined' || force) {
          appendIndexes.push(i);
        } else {
          if (i > previousTo) appendIndexes.push(i);
          if (i < previousFrom) prependIndexes.push(i);
        }
      }
    }
    appendIndexes.forEach((index) => {
      swiper.$wrapperEl.append(renderSlide(slides[index], index));
    });
    prependIndexes.sort((a, b) => b - a).forEach((index) => {
      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
    });
    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);
    onRendered();
  },
  renderSlide(slide, index) {
    const swiper = this;
    const params = swiper.params.virtual;
    if (params.cache && swiper.virtual.cache[index]) {
      return swiper.virtual.cache[index];
    }
    const $slideEl = params.renderSlide
      ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.renderSlide.call(swiper, slide, index))
      : Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="${swiper.params.slideClass}" data-swiper-slide-index="${index}">${slide}</div>`);
    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);
    if (params.cache) swiper.virtual.cache[index] = $slideEl;
    return $slideEl;
  },
  appendSlide(slides) {
    const swiper = this;
    if (typeof slides === 'object' && 'length' in slides) {
      for (let i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.push(slides[i]);
      }
    } else {
      swiper.virtual.slides.push(slides);
    }
    swiper.virtual.update(true);
  },
  prependSlide(slides) {
    const swiper = this;
    const activeIndex = swiper.activeIndex;
    let newActiveIndex = activeIndex + 1;
    let numberOfNewSlides = 1;

    if (Array.isArray(slides)) {
      for (let i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
      }
      newActiveIndex = activeIndex + slides.length;
      numberOfNewSlides = slides.length;
    } else {
      swiper.virtual.slides.unshift(slides);
    }
    if (swiper.params.virtual.cache) {
      const cache = swiper.virtual.cache;
      const newCache = {};
      Object.keys(cache).forEach((cachedIndex) => {
        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cache[cachedIndex];
      });
      swiper.virtual.cache = newCache;
    }
    swiper.virtual.update(true);
    swiper.slideTo(newActiveIndex, 0);
  },
  removeSlide(slidesIndexes) {
    const swiper = this;
    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
    let activeIndex = swiper.activeIndex;
    if (Array.isArray(slidesIndexes)) {
      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
        swiper.virtual.slides.splice(slidesIndexes[i], 1);
        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes[i]];
        }
        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
    } else {
      swiper.virtual.slides.splice(slidesIndexes, 1);
      if (swiper.params.virtual.cache) {
        delete swiper.virtual.cache[slidesIndexes];
      }
      if (slidesIndexes < activeIndex) activeIndex -= 1;
      activeIndex = Math.max(activeIndex, 0);
    }
    swiper.virtual.update(true);
    swiper.slideTo(activeIndex, 0);
  },
  removeAllSlides() {
    const swiper = this;
    swiper.virtual.slides = [];
    if (swiper.params.virtual.cache) {
      swiper.virtual.cache = {};
    }
    swiper.virtual.update(true);
    swiper.slideTo(0, 0);
  },
};

var Virtual$1 = {
  name: 'virtual',
  params: {
    virtual: {
      enabled: false,
      slides: [],
      cache: true,
      renderSlide: null,
      renderExternal: null,
      addSlidesBefore: 0,
      addSlidesAfter: 0,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      virtual: {
        update: Virtual.update.bind(swiper),
        appendSlide: Virtual.appendSlide.bind(swiper),
        prependSlide: Virtual.prependSlide.bind(swiper),
        removeSlide: Virtual.removeSlide.bind(swiper),
        removeAllSlides: Virtual.removeAllSlides.bind(swiper),
        renderSlide: Virtual.renderSlide.bind(swiper),
        slides: swiper.params.virtual.slides,
        cache: {},
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (!swiper.params.virtual.enabled) return;
      swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);
      const overwriteParams = {
        watchSlidesProgress: true,
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);

      if (!swiper.params.initialSlide) {
        swiper.virtual.update();
      }
    },
    setTranslate() {
      const swiper = this;
      if (!swiper.params.virtual.enabled) return;
      swiper.virtual.update();
    },
  },
};

const Keyboard = {
  handle(event) {
    const swiper = this;
    const { rtlTranslate: rtl } = swiper;
    let e = event;
    if (e.originalEvent) e = e.originalEvent; // jquery fix
    const kc = e.keyCode || e.charCode;
    // Directions locks
    if (!swiper.allowSlideNext && ((swiper.isHorizontal() && kc === 39) || (swiper.isVertical() && kc === 40))) {
      return false;
    }
    if (!swiper.allowSlidePrev && ((swiper.isHorizontal() && kc === 37) || (swiper.isVertical() && kc === 38))) {
      return false;
    }
    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
      return undefined;
    }
    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.nodeName && (ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.nodeName.toLowerCase() === 'input' || ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].activeElement.nodeName.toLowerCase() === 'textarea')) {
      return undefined;
    }
    if (swiper.params.keyboard.onlyInViewport && (kc === 37 || kc === 39 || kc === 38 || kc === 40)) {
      let inView = false;
      // Check that swiper should be inside of visible area of window
      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {
        return undefined;
      }
      const windowWidth = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerWidth;
      const windowHeight = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].innerHeight;
      const swiperOffset = swiper.$el.offset();
      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
      const swiperCoord = [
        [swiperOffset.left, swiperOffset.top],
        [swiperOffset.left + swiper.width, swiperOffset.top],
        [swiperOffset.left, swiperOffset.top + swiper.height],
        [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height],
      ];
      for (let i = 0; i < swiperCoord.length; i += 1) {
        const point = swiperCoord[i];
        if (
          point[0] >= 0 && point[0] <= windowWidth
          && point[1] >= 0 && point[1] <= windowHeight
        ) {
          inView = true;
        }
      }
      if (!inView) return undefined;
    }
    if (swiper.isHorizontal()) {
      if (kc === 37 || kc === 39) {
        if (e.preventDefault) e.preventDefault();
        else e.returnValue = false;
      }
      if ((kc === 39 && !rtl) || (kc === 37 && rtl)) swiper.slideNext();
      if ((kc === 37 && !rtl) || (kc === 39 && rtl)) swiper.slidePrev();
    } else {
      if (kc === 38 || kc === 40) {
        if (e.preventDefault) e.preventDefault();
        else e.returnValue = false;
      }
      if (kc === 40) swiper.slideNext();
      if (kc === 38) swiper.slidePrev();
    }
    swiper.emit('keyPress', kc);
    return undefined;
  },
  enable() {
    const swiper = this;
    if (swiper.keyboard.enabled) return;
    Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"]).on('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = true;
  },
  disable() {
    const swiper = this;
    if (!swiper.keyboard.enabled) return;
    Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"]).off('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = false;
  },
};

var Keyboard$1 = {
  name: 'keyboard',
  params: {
    keyboard: {
      enabled: false,
      onlyInViewport: true,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      keyboard: {
        enabled: false,
        enable: Keyboard.enable.bind(swiper),
        disable: Keyboard.disable.bind(swiper),
        handle: Keyboard.handle.bind(swiper),
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      if (swiper.params.keyboard.enabled) {
        swiper.keyboard.enable();
      }
    },
    destroy() {
      const swiper = this;
      if (swiper.keyboard.enabled) {
        swiper.keyboard.disable();
      }
    },
  },
};

function isEventSupported() {
  const eventName = 'onwheel';
  let isSupported = eventName in ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"];

  if (!isSupported) {
    const element = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported
    && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation
    && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation.hasFeature
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    && ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation.hasFeature('', '') !== true
  ) {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}
const Mousewheel = {
  lastScrollTime: Utils.now(),
  event: (function getEvent() {
    if (ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].navigator.userAgent.indexOf('firefox') > -1) return 'DOMMouseScroll';
    return isEventSupported() ? 'wheel' : 'mousewheel';
  }()),
  normalize(e) {
    // Reasonable defaults
    const PIXEL_STEP = 10;
    const LINE_HEIGHT = 40;
    const PAGE_HEIGHT = 800;

    let sX = 0;
    let sY = 0; // spinX, spinY
    let pX = 0;
    let pY = 0; // pixelX, pixelY

    // Legacy
    if ('detail' in e) {
      sY = e.detail;
    }
    if ('wheelDelta' in e) {
      sY = -e.wheelDelta / 120;
    }
    if ('wheelDeltaY' in e) {
      sY = -e.wheelDeltaY / 120;
    }
    if ('wheelDeltaX' in e) {
      sX = -e.wheelDeltaX / 120;
    }

    // side scrolling on FF with DOMMouseScroll
    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in e) {
      pY = e.deltaY;
    }
    if ('deltaX' in e) {
      pX = e.deltaX;
    }

    if ((pX || pY) && e.deltaMode) {
      if (e.deltaMode === 1) { // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else { // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    }

    // Fall-back if spin cannot be determined
    if (pX && !sX) {
      sX = (pX < 1) ? -1 : 1;
    }
    if (pY && !sY) {
      sY = (pY < 1) ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY,
    };
  },
  handleMouseEnter() {
    const swiper = this;
    swiper.mouseEntered = true;
  },
  handleMouseLeave() {
    const swiper = this;
    swiper.mouseEntered = false;
  },
  handle(event) {
    let e = event;
    const swiper = this;
    const params = swiper.params.mousewheel;

    if (!swiper.mouseEntered && !params.releaseOnEdges) return true;

    if (e.originalEvent) e = e.originalEvent; // jquery fix
    let delta = 0;
    const rtlFactor = swiper.rtlTranslate ? -1 : 1;

    const data = Mousewheel.normalize(e);

    if (params.forceToAxis) {
      if (swiper.isHorizontal()) {
        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = data.pixelX * rtlFactor;
        else return true;
      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = data.pixelY;
      else return true;
    } else {
      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
    }

    if (delta === 0) return true;

    if (params.invert) delta = -delta;

    if (!swiper.params.freeMode) {
      if (Utils.now() - swiper.mousewheel.lastScrollTime > 60) {
        if (delta < 0) {
          if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
            swiper.slideNext();
            swiper.emit('scroll', e);
          } else if (params.releaseOnEdges) return true;
        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
          swiper.slidePrev();
          swiper.emit('scroll', e);
        } else if (params.releaseOnEdges) return true;
      }
      swiper.mousewheel.lastScrollTime = (new ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].Date()).getTime();
    } else {
      // Freemode or scrollContainer:
      if (swiper.params.loop) {
        swiper.loopFix();
      }
      let position = swiper.getTranslate() + (delta * params.sensitivity);
      const wasBeginning = swiper.isBeginning;
      const wasEnd = swiper.isEnd;

      if (position >= swiper.minTranslate()) position = swiper.minTranslate();
      if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();

      swiper.setTransition(0);
      swiper.setTranslate(position);
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();

      if ((!wasBeginning && swiper.isBeginning) || (!wasEnd && swiper.isEnd)) {
        swiper.updateSlidesClasses();
      }

      if (swiper.params.freeModeSticky) {
        clearTimeout(swiper.mousewheel.timeout);
        swiper.mousewheel.timeout = Utils.nextTick(() => {
          swiper.slideToClosest();
        }, 300);
      }
      // Emit event
      swiper.emit('scroll', e);

      // Stop autoplay
      if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();
      // Return page scroll on edge positions
      if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;
    }

    if (e.preventDefault) e.preventDefault();
    else e.returnValue = false;
    return false;
  },
  enable() {
    const swiper = this;
    if (!Mousewheel.event) return false;
    if (swiper.mousewheel.enabled) return false;
    let target = swiper.$el;
    if (swiper.params.mousewheel.eventsTarged !== 'container') {
      target = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.params.mousewheel.eventsTarged);
    }
    target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
    target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
    target.on(Mousewheel.event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = true;
    return true;
  },
  disable() {
    const swiper = this;
    if (!Mousewheel.event) return false;
    if (!swiper.mousewheel.enabled) return false;
    let target = swiper.$el;
    if (swiper.params.mousewheel.eventsTarged !== 'container') {
      target = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.params.mousewheel.eventsTarged);
    }
    target.off(Mousewheel.event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = false;
    return true;
  },
};

var Mousewheel$1 = {
  name: 'mousewheel',
  params: {
    mousewheel: {
      enabled: false,
      releaseOnEdges: false,
      invert: false,
      forceToAxis: false,
      sensitivity: 1,
      eventsTarged: 'container',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      mousewheel: {
        enabled: false,
        enable: Mousewheel.enable.bind(swiper),
        disable: Mousewheel.disable.bind(swiper),
        handle: Mousewheel.handle.bind(swiper),
        handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),
        handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),
        lastScrollTime: Utils.now(),
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      if (swiper.params.mousewheel.enabled) swiper.mousewheel.enable();
    },
    destroy() {
      const swiper = this;
      if (swiper.mousewheel.enabled) swiper.mousewheel.disable();
    },
  },
};

const Navigation = {
  update() {
    // Update Navigation Buttons
    const swiper = this;
    const params = swiper.params.navigation;

    if (swiper.params.loop) return;
    const { $nextEl, $prevEl } = swiper.navigation;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        $prevEl.addClass(params.disabledClass);
      } else {
        $prevEl.removeClass(params.disabledClass);
      }
      $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        $nextEl.addClass(params.disabledClass);
      } else {
        $nextEl.removeClass(params.disabledClass);
      }
      $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
  },
  onPrevClick(e) {
    const swiper = this;
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop) return;
    swiper.slidePrev();
  },
  onNextClick(e) {
    const swiper = this;
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop) return;
    swiper.slideNext();
  },
  init() {
    const swiper = this;
    const params = swiper.params.navigation;
    if (!(params.nextEl || params.prevEl)) return;

    let $nextEl;
    let $prevEl;
    if (params.nextEl) {
      $nextEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.nextEl);
      if (
        swiper.params.uniqueNavElements
        && typeof params.nextEl === 'string'
        && $nextEl.length > 1
        && swiper.$el.find(params.nextEl).length === 1
      ) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }
    if (params.prevEl) {
      $prevEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.prevEl);
      if (
        swiper.params.uniqueNavElements
        && typeof params.prevEl === 'string'
        && $prevEl.length > 1
        && swiper.$el.find(params.prevEl).length === 1
      ) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', swiper.navigation.onNextClick);
    }
    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', swiper.navigation.onPrevClick);
    }

    Utils.extend(swiper.navigation, {
      $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl,
      prevEl: $prevEl && $prevEl[0],
    });
  },
  destroy() {
    const swiper = this;
    const { $nextEl, $prevEl } = swiper.navigation;
    if ($nextEl && $nextEl.length) {
      $nextEl.off('click', swiper.navigation.onNextClick);
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }
    if ($prevEl && $prevEl.length) {
      $prevEl.off('click', swiper.navigation.onPrevClick);
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  },
};

var Navigation$1 = {
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,

      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
      lockClass: 'swiper-button-lock',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      navigation: {
        init: Navigation.init.bind(swiper),
        update: Navigation.update.bind(swiper),
        destroy: Navigation.destroy.bind(swiper),
        onNextClick: Navigation.onNextClick.bind(swiper),
        onPrevClick: Navigation.onPrevClick.bind(swiper),
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge() {
      const swiper = this;
      swiper.navigation.update();
    },
    fromEdge() {
      const swiper = this;
      swiper.navigation.update();
    },
    destroy() {
      const swiper = this;
      swiper.navigation.destroy();
    },
    click(e) {
      const swiper = this;
      const { $nextEl, $prevEl } = swiper.navigation;
      if (
        swiper.params.navigation.hideOnClick
        && !Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is($prevEl)
        && !Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).is($nextEl)
      ) {
        let isHidden;
        if ($nextEl) {
          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
        } else if ($prevEl) {
          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
        }
        if (isHidden === true) {
          swiper.emit('navigationShow', swiper);
        } else {
          swiper.emit('navigationHide', swiper);
        }
        if ($nextEl) {
          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
        if ($prevEl) {
          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
      }
    },
  },
};

const Pagination = {
  update() {
    // Render || Update Pagination bullets/items
    const swiper = this;
    const rtl = swiper.rtl;
    const params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    const $el = swiper.pagination.$el;
    // Current/Total
    let current;
    const total = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);
      if (current > slidesLength - 1 - (swiper.loopedSlides * 2)) {
        current -= (slidesLength - (swiper.loopedSlides * 2));
      }
      if (current > total - 1) current -= total;
      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    }
    // Types
    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      const bullets = swiper.pagination.bullets;
      let firstIndex;
      let lastIndex;
      let midIndex;
      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', `${swiper.pagination.bulletSize * (params.dynamicMainBullets + 4)}px`);
        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
          swiper.pagination.dynamicBulletIndex += (current - swiper.previousIndex);
          if (swiper.pagination.dynamicBulletIndex > (params.dynamicMainBullets - 1)) {
            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (swiper.pagination.dynamicBulletIndex < 0) {
            swiper.pagination.dynamicBulletIndex = 0;
          }
        }
        firstIndex = current - swiper.pagination.dynamicBulletIndex;
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }
      bullets.removeClass(`${params.bulletActiveClass} ${params.bulletActiveClass}-next ${params.bulletActiveClass}-next-next ${params.bulletActiveClass}-prev ${params.bulletActiveClass}-prev-prev ${params.bulletActiveClass}-main`);
      if ($el.length > 1) {
        bullets.each((index, bullet) => {
          const $bullet = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(bullet);
          const bulletIndex = $bullet.index();
          if (bulletIndex === current) {
            $bullet.addClass(params.bulletActiveClass);
          }
          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              $bullet.addClass(`${params.bulletActiveClass}-main`);
            }
            if (bulletIndex === firstIndex) {
              $bullet
                .prev()
                .addClass(`${params.bulletActiveClass}-prev`)
                .prev()
                .addClass(`${params.bulletActiveClass}-prev-prev`);
            }
            if (bulletIndex === lastIndex) {
              $bullet
                .next()
                .addClass(`${params.bulletActiveClass}-next`)
                .next()
                .addClass(`${params.bulletActiveClass}-next-next`);
            }
          }
        });
      } else {
        const $bullet = bullets.eq(current);
        $bullet.addClass(params.bulletActiveClass);
        if (params.dynamicBullets) {
          const $firstDisplayedBullet = bullets.eq(firstIndex);
          const $lastDisplayedBullet = bullets.eq(lastIndex);
          for (let i = firstIndex; i <= lastIndex; i += 1) {
            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);
          }
          $firstDisplayedBullet
            .prev()
            .addClass(`${params.bulletActiveClass}-prev`)
            .prev()
            .addClass(`${params.bulletActiveClass}-prev-prev`);
          $lastDisplayedBullet
            .next()
            .addClass(`${params.bulletActiveClass}-next`)
            .next()
            .addClass(`${params.bulletActiveClass}-next-next`);
        }
      }
      if (params.dynamicBullets) {
        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        const bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (midIndex * swiper.pagination.bulletSize);
        const offsetProp = rtl ? 'right' : 'left';
        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);
      }
    }
    if (params.type === 'fraction') {
      $el.find(`.${params.currentClass}`).text(params.formatFractionCurrent(current + 1));
      $el.find(`.${params.totalClass}`).text(params.formatFractionTotal(total));
    }
    if (params.type === 'progressbar') {
      let progressbarDirection;
      if (params.progressbarOpposite) {
        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
      } else {
        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
      }
      const scale = (current + 1) / total;
      let scaleX = 1;
      let scaleY = 1;
      if (progressbarDirection === 'horizontal') {
        scaleX = scale;
      } else {
        scaleY = scale;
      }
      $el.find(`.${params.progressbarFillClass}`).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);
    }
    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', swiper, $el[0]);
    } else {
      swiper.emit('paginationUpdate', swiper, $el[0]);
    }
    $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
  },
  render() {
    // Render Container
    const swiper = this;
    const params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;

    const $el = swiper.pagination.$el;
    let paginationHTML = '';
    if (params.type === 'bullets') {
      const numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
      for (let i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += `<${params.bulletElement} class="${params.bulletClass}"></${params.bulletElement}>`;
        }
      }
      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find(`.${params.bulletClass}`);
    }
    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = `<span class="${params.currentClass}"></span>`
        + ' / '
        + `<span class="${params.totalClass}"></span>`;
      }
      $el.html(paginationHTML);
    }
    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
      }
      $el.html(paginationHTML);
    }
    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init() {
    const swiper = this;
    const params = swiper.params.pagination;
    if (!params.el) return;

    let $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.el);
    if ($el.length === 0) return;

    if (
      swiper.params.uniqueNavElements
      && typeof params.el === 'string'
      && $el.length > 1
      && swiper.$el.find(params.el).length === 1
    ) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);
      swiper.pagination.dynamicBulletIndex = 0;
      if (params.dynamicMainBullets < 1) {
        params.dynamicMainBullets = 1;
      }
    }
    if (params.type === 'progressbar' && params.progressbarOpposite) {
      $el.addClass(params.progressbarOppositeClass);
    }

    if (params.clickable) {
      $el.on('click', `.${params.bulletClass}`, function onClick(e) {
        e.preventDefault();
        let index = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) index += swiper.loopedSlides;
        swiper.slideTo(index);
      });
    }

    Utils.extend(swiper.pagination, {
      $el,
      el: $el[0],
    });
  },
  destroy() {
    const swiper = this;
    const params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    const $el = swiper.pagination.$el;

    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);
    if (params.clickable) {
      $el.off('click', `.${params.bulletClass}`);
    }
  },
};

var Pagination$1 = {
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: number => number,
      formatFractionTotal: number => number,
      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-', // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
      clickableClass: 'swiper-pagination-clickable', // NEW
      lockClass: 'swiper-pagination-lock',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      pagination: {
        init: Pagination.init.bind(swiper),
        render: Pagination.render.bind(swiper),
        update: Pagination.update.bind(swiper),
        destroy: Pagination.destroy.bind(swiper),
        dynamicBulletIndex: 0,
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange() {
      const swiper = this;
      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange() {
      const swiper = this;
      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange() {
      const swiper = this;
      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange() {
      const swiper = this;
      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy() {
      const swiper = this;
      swiper.pagination.destroy();
    },
    click(e) {
      const swiper = this;
      if (
        swiper.params.pagination.el
        && swiper.params.pagination.hideOnClick
        && swiper.pagination.$el.length > 0
        && !Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).hasClass(swiper.params.pagination.bulletClass)
      ) {
        const isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);
        if (isHidden === true) {
          swiper.emit('paginationShow', swiper);
        } else {
          swiper.emit('paginationHide', swiper);
        }
        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    },
  },
};

const Scrollbar = {
  setTranslate() {
    const swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    const { scrollbar, rtlTranslate: rtl, progress } = swiper;
    const {
      dragSize, trackSize, $dragEl, $el,
    } = scrollbar;
    const params = swiper.params.scrollbar;

    let newSize = dragSize;
    let newPos = (trackSize - dragSize) * progress;
    if (rtl) {
      newPos = -newPos;
      if (newPos > 0) {
        newSize = dragSize - newPos;
        newPos = 0;
      } else if (-newPos + dragSize > trackSize) {
        newSize = trackSize + newPos;
      }
    } else if (newPos < 0) {
      newSize = dragSize + newPos;
      newPos = 0;
    } else if (newPos + dragSize > trackSize) {
      newSize = trackSize - newPos;
    }
    if (swiper.isHorizontal()) {
      if (Support.transforms3d) {
        $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);
      } else {
        $dragEl.transform(`translateX(${newPos}px)`);
      }
      $dragEl[0].style.width = `${newSize}px`;
    } else {
      if (Support.transforms3d) {
        $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);
      } else {
        $dragEl.transform(`translateY(${newPos}px)`);
      }
      $dragEl[0].style.height = `${newSize}px`;
    }
    if (params.hide) {
      clearTimeout(swiper.scrollbar.timeout);
      $el[0].style.opacity = 1;
      swiper.scrollbar.timeout = setTimeout(() => {
        $el[0].style.opacity = 0;
        $el.transition(400);
      }, 1000);
    }
  },
  setTransition(duration) {
    const swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    swiper.scrollbar.$dragEl.transition(duration);
  },
  updateSize() {
    const swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;

    const { scrollbar } = swiper;
    const { $dragEl, $el } = scrollbar;

    $dragEl[0].style.width = '';
    $dragEl[0].style.height = '';
    const trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;

    const divider = swiper.size / swiper.virtualSize;
    const moveDivider = divider * (trackSize / swiper.size);
    let dragSize;
    if (swiper.params.scrollbar.dragSize === 'auto') {
      dragSize = trackSize * divider;
    } else {
      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
    }

    if (swiper.isHorizontal()) {
      $dragEl[0].style.width = `${dragSize}px`;
    } else {
      $dragEl[0].style.height = `${dragSize}px`;
    }

    if (divider >= 1) {
      $el[0].style.display = 'none';
    } else {
      $el[0].style.display = '';
    }
    if (swiper.params.scrollbar.hide) {
      $el[0].style.opacity = 0;
    }
    Utils.extend(scrollbar, {
      trackSize,
      divider,
      moveDivider,
      dragSize,
    });
    scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
  },
  setDragPosition(e) {
    const swiper = this;
    const { scrollbar, rtlTranslate: rtl } = swiper;
    const { $el, dragSize, trackSize } = scrollbar;

    let pointerPosition;
    if (swiper.isHorizontal()) {
      pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageX : e.pageX || e.clientX);
    } else {
      pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageY : e.pageY || e.clientY);
    }
    let positionRatio;
    positionRatio = ((pointerPosition) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragSize / 2)) / (trackSize - dragSize);
    positionRatio = Math.max(Math.min(positionRatio, 1), 0);
    if (rtl) {
      positionRatio = 1 - positionRatio;
    }

    const position = swiper.minTranslate() + ((swiper.maxTranslate() - swiper.minTranslate()) * positionRatio);

    swiper.updateProgress(position);
    swiper.setTranslate(position);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  },
  onDragStart(e) {
    const swiper = this;
    const params = swiper.params.scrollbar;
    const { scrollbar, $wrapperEl } = swiper;
    const { $el, $dragEl } = scrollbar;
    swiper.scrollbar.isTouched = true;
    e.preventDefault();
    e.stopPropagation();

    $wrapperEl.transition(100);
    $dragEl.transition(100);
    scrollbar.setDragPosition(e);

    clearTimeout(swiper.scrollbar.dragTimeout);

    $el.transition(0);
    if (params.hide) {
      $el.css('opacity', 1);
    }
    swiper.emit('scrollbarDragStart', e);
  },
  onDragMove(e) {
    const swiper = this;
    const { scrollbar, $wrapperEl } = swiper;
    const { $el, $dragEl } = scrollbar;

    if (!swiper.scrollbar.isTouched) return;
    if (e.preventDefault) e.preventDefault();
    else e.returnValue = false;
    scrollbar.setDragPosition(e);
    $wrapperEl.transition(0);
    $el.transition(0);
    $dragEl.transition(0);
    swiper.emit('scrollbarDragMove', e);
  },
  onDragEnd(e) {
    const swiper = this;

    const params = swiper.params.scrollbar;
    const { scrollbar } = swiper;
    const { $el } = scrollbar;

    if (!swiper.scrollbar.isTouched) return;
    swiper.scrollbar.isTouched = false;
    if (params.hide) {
      clearTimeout(swiper.scrollbar.dragTimeout);
      swiper.scrollbar.dragTimeout = Utils.nextTick(() => {
        $el.css('opacity', 0);
        $el.transition(400);
      }, 1000);
    }
    swiper.emit('scrollbarDragEnd', e);
    if (params.snapOnRelease) {
      swiper.slideToClosest();
    }
  },
  enableDraggable() {
    const swiper = this;
    if (!swiper.params.scrollbar.el) return;
    const {
      scrollbar, touchEventsTouch, touchEventsDesktop, params,
    } = swiper;
    const $el = scrollbar.$el;
    const target = $el[0];
    const activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;
    const passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
    if (!Support.touch) {
      target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  disableDraggable() {
    const swiper = this;
    if (!swiper.params.scrollbar.el) return;
    const {
      scrollbar, touchEventsTouch, touchEventsDesktop, params,
    } = swiper;
    const $el = scrollbar.$el;
    const target = $el[0];
    const activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;
    const passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
    if (!Support.touch) {
      target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  init() {
    const swiper = this;
    if (!swiper.params.scrollbar.el) return;
    const { scrollbar, $el: $swiperEl } = swiper;
    const params = swiper.params.scrollbar;

    let $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(params.el);
    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
      $el = $swiperEl.find(params.el);
    }

    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);
    if ($dragEl.length === 0) {
      $dragEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="${swiper.params.scrollbar.dragClass}"></div>`);
      $el.append($dragEl);
    }

    Utils.extend(scrollbar, {
      $el,
      el: $el[0],
      $dragEl,
      dragEl: $dragEl[0],
    });

    if (params.draggable) {
      scrollbar.enableDraggable();
    }
  },
  destroy() {
    const swiper = this;
    swiper.scrollbar.disableDraggable();
  },
};

var Scrollbar$1 = {
  name: 'scrollbar',
  params: {
    scrollbar: {
      el: null,
      dragSize: 'auto',
      hide: false,
      draggable: false,
      snapOnRelease: true,
      lockClass: 'swiper-scrollbar-lock',
      dragClass: 'swiper-scrollbar-drag',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      scrollbar: {
        init: Scrollbar.init.bind(swiper),
        destroy: Scrollbar.destroy.bind(swiper),
        updateSize: Scrollbar.updateSize.bind(swiper),
        setTranslate: Scrollbar.setTranslate.bind(swiper),
        setTransition: Scrollbar.setTransition.bind(swiper),
        enableDraggable: Scrollbar.enableDraggable.bind(swiper),
        disableDraggable: Scrollbar.disableDraggable.bind(swiper),
        setDragPosition: Scrollbar.setDragPosition.bind(swiper),
        onDragStart: Scrollbar.onDragStart.bind(swiper),
        onDragMove: Scrollbar.onDragMove.bind(swiper),
        onDragEnd: Scrollbar.onDragEnd.bind(swiper),
        isTouched: false,
        timeout: null,
        dragTimeout: null,
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      swiper.scrollbar.init();
      swiper.scrollbar.updateSize();
      swiper.scrollbar.setTranslate();
    },
    update() {
      const swiper = this;
      swiper.scrollbar.updateSize();
    },
    resize() {
      const swiper = this;
      swiper.scrollbar.updateSize();
    },
    observerUpdate() {
      const swiper = this;
      swiper.scrollbar.updateSize();
    },
    setTranslate() {
      const swiper = this;
      swiper.scrollbar.setTranslate();
    },
    setTransition(duration) {
      const swiper = this;
      swiper.scrollbar.setTransition(duration);
    },
    destroy() {
      const swiper = this;
      swiper.scrollbar.destroy();
    },
  },
};

const Parallax = {
  setTransform(el, progress) {
    const swiper = this;
    const { rtl } = swiper;

    const $el = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(el);
    const rtlFactor = rtl ? -1 : 1;

    const p = $el.attr('data-swiper-parallax') || '0';
    let x = $el.attr('data-swiper-parallax-x');
    let y = $el.attr('data-swiper-parallax-y');
    const scale = $el.attr('data-swiper-parallax-scale');
    const opacity = $el.attr('data-swiper-parallax-opacity');

    if (x || y) {
      x = x || '0';
      y = y || '0';
    } else if (swiper.isHorizontal()) {
      x = p;
      y = '0';
    } else {
      y = p;
      x = '0';
    }

    if ((x).indexOf('%') >= 0) {
      x = `${parseInt(x, 10) * progress * rtlFactor}%`;
    } else {
      x = `${x * progress * rtlFactor}px`;
    }
    if ((y).indexOf('%') >= 0) {
      y = `${parseInt(y, 10) * progress}%`;
    } else {
      y = `${y * progress}px`;
    }

    if (typeof opacity !== 'undefined' && opacity !== null) {
      const currentOpacity = opacity - ((opacity - 1) * (1 - Math.abs(progress)));
      $el[0].style.opacity = currentOpacity;
    }
    if (typeof scale === 'undefined' || scale === null) {
      $el.transform(`translate3d(${x}, ${y}, 0px)`);
    } else {
      const currentScale = scale - ((scale - 1) * (1 - Math.abs(progress)));
      $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);
    }
  },
  setTranslate() {
    const swiper = this;
    const {
      $el, slides, progress, snapGrid,
    } = swiper;
    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
      .each((index, el) => {
        swiper.parallax.setTransform(el, progress);
      });
    slides.each((slideIndex, slideEl) => {
      let slideProgress = slideEl.progress;
      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
        slideProgress += Math.ceil(slideIndex / 2) - (progress * (snapGrid.length - 1));
      }
      slideProgress = Math.min(Math.max(slideProgress, -1), 1);
      Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
        .each((index, el) => {
          swiper.parallax.setTransform(el, slideProgress);
        });
    });
  },
  setTransition(duration = this.params.speed) {
    const swiper = this;
    const { $el } = swiper;
    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
      .each((index, parallaxEl) => {
        const $parallaxEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(parallaxEl);
        let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
        if (duration === 0) parallaxDuration = 0;
        $parallaxEl.transition(parallaxDuration);
      });
  },
};

var Parallax$1 = {
  name: 'parallax',
  params: {
    parallax: {
      enabled: false,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      parallax: {
        setTransform: Parallax.setTransform.bind(swiper),
        setTranslate: Parallax.setTranslate.bind(swiper),
        setTransition: Parallax.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    init() {
      const swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTranslate() {
      const swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTransition(duration) {
      const swiper = this;
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTransition(duration);
    },
  },
};

const Zoom = {
  // Calc Scale From Multi-touches
  getDistanceBetweenTouches(e) {
    if (e.targetTouches.length < 2) return 1;
    const x1 = e.targetTouches[0].pageX;
    const y1 = e.targetTouches[0].pageY;
    const x2 = e.targetTouches[1].pageX;
    const y2 = e.targetTouches[1].pageY;
    const distance = Math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2));
    return distance;
  },
  // Events
  onGestureStart(e) {
    const swiper = this;
    const params = swiper.params.zoom;
    const zoom = swiper.zoom;
    const { gesture } = zoom;
    zoom.fakeGestureTouched = false;
    zoom.fakeGestureMoved = false;
    if (!Support.gestures) {
      if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {
        return;
      }
      zoom.fakeGestureTouched = true;
      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
    }
    if (!gesture.$slideEl || !gesture.$slideEl.length) {
      gesture.$slideEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target).closest('.swiper-slide');
      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
      if (gesture.$imageWrapEl.length === 0) {
        gesture.$imageEl = undefined;
        return;
      }
    }
    gesture.$imageEl.transition(0);
    swiper.zoom.isScaling = true;
  },
  onGestureChange(e) {
    const swiper = this;
    const params = swiper.params.zoom;
    const zoom = swiper.zoom;
    const { gesture } = zoom;
    if (!Support.gestures) {
      if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {
        return;
      }
      zoom.fakeGestureMoved = true;
      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    if (Support.gestures) {
      zoom.scale = e.scale * zoom.currentScale;
    } else {
      zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;
    }
    if (zoom.scale > gesture.maxRatio) {
      zoom.scale = (gesture.maxRatio - 1) + (((zoom.scale - gesture.maxRatio) + 1) ** 0.5);
    }
    if (zoom.scale < params.minRatio) {
      zoom.scale = (params.minRatio + 1) - (((params.minRatio - zoom.scale) + 1) ** 0.5);
    }
    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);
  },
  onGestureEnd(e) {
    const swiper = this;
    const params = swiper.params.zoom;
    const zoom = swiper.zoom;
    const { gesture } = zoom;
    if (!Support.gestures) {
      if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
        return;
      }
      if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android)) {
        return;
      }
      zoom.fakeGestureTouched = false;
      zoom.fakeGestureMoved = false;
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);
    zoom.currentScale = zoom.scale;
    zoom.isScaling = false;
    if (zoom.scale === 1) gesture.$slideEl = undefined;
  },
  onTouchStart(e) {
    const swiper = this;
    const zoom = swiper.zoom;
    const { gesture, image } = zoom;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    if (image.isTouched) return;
    if (Device.android) e.preventDefault();
    image.isTouched = true;
    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  },
  onTouchMove(e) {
    const swiper = this;
    const zoom = swiper.zoom;
    const { gesture, image, velocity } = zoom;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    swiper.allowClick = false;
    if (!image.isTouched || !gesture.$slideEl) return;

    if (!image.isMoved) {
      image.width = gesture.$imageEl[0].offsetWidth;
      image.height = gesture.$imageEl[0].offsetHeight;
      image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
      image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
      gesture.$imageWrapEl.transition(0);
      if (swiper.rtl) {
        image.startX = -image.startX;
        image.startY = -image.startY;
      }
    }
    // Define if we need image drag
    const scaledWidth = image.width * zoom.scale;
    const scaledHeight = image.height * zoom.scale;

    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;

    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
    image.maxX = -image.minX;
    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
    image.maxY = -image.minY;

    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

    if (!image.isMoved && !zoom.isScaling) {
      if (
        swiper.isHorizontal()
        && (
          (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x)
          || (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)
        )
      ) {
        image.isTouched = false;
        return;
      } if (
        !swiper.isHorizontal()
        && (
          (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y)
          || (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)
        )
      ) {
        image.isTouched = false;
        return;
      }
    }
    e.preventDefault();
    e.stopPropagation();

    image.isMoved = true;
    image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;
    image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;

    if (image.currentX < image.minX) {
      image.currentX = (image.minX + 1) - (((image.minX - image.currentX) + 1) ** 0.8);
    }
    if (image.currentX > image.maxX) {
      image.currentX = (image.maxX - 1) + (((image.currentX - image.maxX) + 1) ** 0.8);
    }

    if (image.currentY < image.minY) {
      image.currentY = (image.minY + 1) - (((image.minY - image.currentY) + 1) ** 0.8);
    }
    if (image.currentY > image.maxY) {
      image.currentY = (image.maxY - 1) + (((image.currentY - image.maxY) + 1) ** 0.8);
    }

    // Velocity
    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
    if (!velocity.prevTime) velocity.prevTime = Date.now();
    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
    velocity.prevPositionX = image.touchesCurrent.x;
    velocity.prevPositionY = image.touchesCurrent.y;
    velocity.prevTime = Date.now();

    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);
  },
  onTouchEnd() {
    const swiper = this;
    const zoom = swiper.zoom;
    const { gesture, image, velocity } = zoom;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    if (!image.isTouched || !image.isMoved) {
      image.isTouched = false;
      image.isMoved = false;
      return;
    }
    image.isTouched = false;
    image.isMoved = false;
    let momentumDurationX = 300;
    let momentumDurationY = 300;
    const momentumDistanceX = velocity.x * momentumDurationX;
    const newPositionX = image.currentX + momentumDistanceX;
    const momentumDistanceY = velocity.y * momentumDurationY;
    const newPositionY = image.currentY + momentumDistanceY;

    // Fix duration
    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);

    image.currentX = newPositionX;
    image.currentY = newPositionY;

    // Define if we need image drag
    const scaledWidth = image.width * zoom.scale;
    const scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
    image.maxX = -image.minX;
    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
    image.maxY = -image.minY;
    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);

    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);
  },
  onTransitionEnd() {
    const swiper = this;
    const zoom = swiper.zoom;
    const { gesture } = zoom;
    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
      gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
      gesture.$imageWrapEl.transform('translate3d(0,0,0)');

      zoom.scale = 1;
      zoom.currentScale = 1;

      gesture.$slideEl = undefined;
      gesture.$imageEl = undefined;
      gesture.$imageWrapEl = undefined;
    }
  },
  // Toggle Zoom
  toggle(e) {
    const swiper = this;
    const zoom = swiper.zoom;

    if (zoom.scale && zoom.scale !== 1) {
      // Zoom Out
      zoom.out();
    } else {
      // Zoom In
      zoom.in(e);
    }
  },
  in(e) {
    const swiper = this;

    const zoom = swiper.zoom;
    const params = swiper.params.zoom;
    const { gesture, image } = zoom;

    if (!gesture.$slideEl) {
      gesture.$slideEl = swiper.clickedSlide ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);

    let touchX;
    let touchY;
    let offsetX;
    let offsetY;
    let diffX;
    let diffY;
    let translateX;
    let translateY;
    let imageWidth;
    let imageHeight;
    let scaledWidth;
    let scaledHeight;
    let translateMinX;
    let translateMinY;
    let translateMaxX;
    let translateMaxY;
    let slideWidth;
    let slideHeight;

    if (typeof image.touchesStart.x === 'undefined' && e) {
      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
    } else {
      touchX = image.touchesStart.x;
      touchY = image.touchesStart.y;
    }

    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    if (e) {
      slideWidth = gesture.$slideEl[0].offsetWidth;
      slideHeight = gesture.$slideEl[0].offsetHeight;
      offsetX = gesture.$slideEl.offset().left;
      offsetY = gesture.$slideEl.offset().top;
      diffX = (offsetX + (slideWidth / 2)) - touchX;
      diffY = (offsetY + (slideHeight / 2)) - touchY;

      imageWidth = gesture.$imageEl[0].offsetWidth;
      imageHeight = gesture.$imageEl[0].offsetHeight;
      scaledWidth = imageWidth * zoom.scale;
      scaledHeight = imageHeight * zoom.scale;

      translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);
      translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);
      translateMaxX = -translateMinX;
      translateMaxY = -translateMinY;

      translateX = diffX * zoom.scale;
      translateY = diffY * zoom.scale;

      if (translateX < translateMinX) {
        translateX = translateMinX;
      }
      if (translateX > translateMaxX) {
        translateX = translateMaxX;
      }

      if (translateY < translateMinY) {
        translateY = translateMinY;
      }
      if (translateY > translateMaxY) {
        translateY = translateMaxY;
      }
    } else {
      translateX = 0;
      translateY = 0;
    }
    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);
    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);
  },
  out() {
    const swiper = this;

    const zoom = swiper.zoom;
    const params = swiper.params.zoom;
    const { gesture } = zoom;

    if (!gesture.$slideEl) {
      gesture.$slideEl = swiper.clickedSlide ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
    }
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

    zoom.scale = 1;
    zoom.currentScale = 1;
    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);
    gesture.$slideEl = undefined;
  },
  // Attach/Detach Events
  enable() {
    const swiper = this;
    const zoom = swiper.zoom;
    if (zoom.enabled) return;
    zoom.enabled = true;

    const passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;

    // Scale image
    if (Support.gestures) {
      swiper.$wrapperEl.on('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.on('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.on('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.on(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
    }

    // Move image
    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, zoom.onTouchMove);
  },
  disable() {
    const swiper = this;
    const zoom = swiper.zoom;
    if (!zoom.enabled) return;

    swiper.zoom.enabled = false;

    const passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;

    // Scale image
    if (Support.gestures) {
      swiper.$wrapperEl.off('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.off('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.off('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.off(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
    }

    // Move image
    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, zoom.onTouchMove);
  },
};

var Zoom$1 = {
  name: 'zoom',
  params: {
    zoom: {
      enabled: false,
      maxRatio: 3,
      minRatio: 1,
      toggle: true,
      containerClass: 'swiper-zoom-container',
      zoomedSlideClass: 'swiper-slide-zoomed',
    },
  },
  create() {
    const swiper = this;
    const zoom = {
      enabled: false,
      scale: 1,
      currentScale: 1,
      isScaling: false,
      gesture: {
        $slideEl: undefined,
        slideWidth: undefined,
        slideHeight: undefined,
        $imageEl: undefined,
        $imageWrapEl: undefined,
        maxRatio: 3,
      },
      image: {
        isTouched: undefined,
        isMoved: undefined,
        currentX: undefined,
        currentY: undefined,
        minX: undefined,
        minY: undefined,
        maxX: undefined,
        maxY: undefined,
        width: undefined,
        height: undefined,
        startX: undefined,
        startY: undefined,
        touchesStart: {},
        touchesCurrent: {},
      },
      velocity: {
        x: undefined,
        y: undefined,
        prevPositionX: undefined,
        prevPositionY: undefined,
        prevTime: undefined,
      },
    };

    ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach((methodName) => {
      zoom[methodName] = Zoom[methodName].bind(swiper);
    });
    Utils.extend(swiper, {
      zoom,
    });

    let scale = 1;
    Object.defineProperty(swiper.zoom, 'scale', {
      get() {
        return scale;
      },
      set(value) {
        if (scale !== value) {
          const imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
          const slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
          swiper.emit('zoomChange', value, imageEl, slideEl);
        }
        scale = value;
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      if (swiper.params.zoom.enabled) {
        swiper.zoom.enable();
      }
    },
    destroy() {
      const swiper = this;
      swiper.zoom.disable();
    },
    touchStart(e) {
      const swiper = this;
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchStart(e);
    },
    touchEnd(e) {
      const swiper = this;
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchEnd(e);
    },
    doubleTap(e) {
      const swiper = this;
      if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
        swiper.zoom.toggle(e);
      }
    },
    transitionEnd() {
      const swiper = this;
      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
        swiper.zoom.onTransitionEnd();
      }
    },
  },
};

const Lazy = {
  loadInSlide(index, loadInDuplicate = true) {
    const swiper = this;
    const params = swiper.params.lazy;
    if (typeof index === 'undefined') return;
    if (swiper.slides.length === 0) return;
    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;

    const $slideEl = isVirtual
      ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index="${index}"]`)
      : swiper.slides.eq(index);

    let $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);
    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
      $images = $images.add($slideEl[0]);
    }
    if ($images.length === 0) return;

    $images.each((imageIndex, imageEl) => {
      const $imageEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(imageEl);
      $imageEl.addClass(params.loadingClass);

      const background = $imageEl.attr('data-background');
      const src = $imageEl.attr('data-src');
      const srcset = $imageEl.attr('data-srcset');
      const sizes = $imageEl.attr('data-sizes');

      swiper.loadImage($imageEl[0], (src || background), srcset, sizes, false, () => {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || (swiper && !swiper.params) || swiper.destroyed) return;
        if (background) {
          $imageEl.css('background-image', `url("${background}")`);
          $imageEl.removeAttr('data-background');
        } else {
          if (srcset) {
            $imageEl.attr('srcset', srcset);
            $imageEl.removeAttr('data-srcset');
          }
          if (sizes) {
            $imageEl.attr('sizes', sizes);
            $imageEl.removeAttr('data-sizes');
          }
          if (src) {
            $imageEl.attr('src', src);
            $imageEl.removeAttr('data-src');
          }
        }

        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
        $slideEl.find(`.${params.preloaderClass}`).remove();
        if (swiper.params.loop && loadInDuplicate) {
          const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');
          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
            const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index="${slideOriginalIndex}"]:not(.${swiper.params.slideDuplicateClass})`);
            swiper.lazy.loadInSlide(originalSlide.index(), false);
          } else {
            const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index="${slideOriginalIndex}"]`);
            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
          }
        }
        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
      });

      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
    });
  },
  load() {
    const swiper = this;
    const {
      $wrapperEl, params: swiperParams, slides, activeIndex,
    } = swiper;
    const isVirtual = swiper.virtual && swiperParams.virtual.enabled;
    const params = swiperParams.lazy;

    let slidesPerView = swiperParams.slidesPerView;
    if (slidesPerView === 'auto') {
      slidesPerView = 0;
    }

    function slideExist(index) {
      if (isVirtual) {
        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index="${index}"]`).length) {
          return true;
        }
      } else if (slides[index]) return true;
      return false;
    }
    function slideIndex(slideEl) {
      if (isVirtual) {
        return Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).attr('data-swiper-slide-index');
      }
      return Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).index();
    }

    if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;
    if (swiper.params.watchSlidesVisibility) {
      $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each((elIndex, slideEl) => {
        const index = isVirtual ? Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).attr('data-swiper-slide-index') : Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(slideEl).index();
        swiper.lazy.loadInSlide(index);
      });
    } else if (slidesPerView > 1) {
      for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
        if (slideExist(i)) swiper.lazy.loadInSlide(i);
      }
    } else {
      swiper.lazy.loadInSlide(activeIndex);
    }
    if (params.loadPrevNext) {
      if (slidesPerView > 1 || (params.loadPrevNextAmount && params.loadPrevNextAmount > 1)) {
        const amount = params.loadPrevNextAmount;
        const spv = slidesPerView;
        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
        // Next Slides
        for (let i = activeIndex + slidesPerView; i < maxIndex; i += 1) {
          if (slideExist(i)) swiper.lazy.loadInSlide(i);
        }
        // Prev Slides
        for (let i = minIndex; i < activeIndex; i += 1) {
          if (slideExist(i)) swiper.lazy.loadInSlide(i);
        }
      } else {
        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);
        if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));

        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);
        if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
      }
    }
  },
};

var Lazy$1 = {
  name: 'lazy',
  params: {
    lazy: {
      enabled: false,
      loadPrevNext: false,
      loadPrevNextAmount: 1,
      loadOnTransitionStart: false,

      elementClass: 'swiper-lazy',
      loadingClass: 'swiper-lazy-loading',
      loadedClass: 'swiper-lazy-loaded',
      preloaderClass: 'swiper-lazy-preloader',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      lazy: {
        initialImageLoaded: false,
        load: Lazy.load.bind(swiper),
        loadInSlide: Lazy.loadInSlide.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
        swiper.params.preloadImages = false;
      }
    },
    init() {
      const swiper = this;
      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
        swiper.lazy.load();
      }
    },
    scroll() {
      const swiper = this;
      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
        swiper.lazy.load();
      }
    },
    resize() {
      const swiper = this;
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    scrollbarDragMove() {
      const swiper = this;
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    transitionStart() {
      const swiper = this;
      if (swiper.params.lazy.enabled) {
        if (swiper.params.lazy.loadOnTransitionStart || (!swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded)) {
          swiper.lazy.load();
        }
      }
    },
    transitionEnd() {
      const swiper = this;
      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
        swiper.lazy.load();
      }
    },
  },
};

/* eslint no-bitwise: ["error", { "allow": [">>"] }] */

const Controller = {
  LinearSpline: function LinearSpline(x, y) {
    const binarySearch = (function search() {
      let maxIndex;
      let minIndex;
      let guess;
      return (array, val) => {
        minIndex = -1;
        maxIndex = array.length;
        while (maxIndex - minIndex > 1) {
          guess = maxIndex + minIndex >> 1;
          if (array[guess] <= val) {
            minIndex = guess;
          } else {
            maxIndex = guess;
          }
        }
        return maxIndex;
      };
    }());
    this.x = x;
    this.y = y;
    this.lastIndex = x.length - 1;
    // Given an x value (x2), return the expected y2 value:
    // (x1,y1) is the known point before given value,
    // (x3,y3) is the known point after given value.
    let i1;
    let i3;

    this.interpolate = function interpolate(x2) {
      if (!x2) return 0;

      // Get the indexes of x1 and x3 (the array indexes before and after given x2):
      i3 = binarySearch(this.x, x2);
      i1 = i3 - 1;

      // We have our indexes i1 & i3, so we can calculate already:
      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
      return (((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1])) + this.y[i1];
    };
    return this;
  },
  // xxx: for now i will just save one spline function to to
  getInterpolateFunction(c) {
    const swiper = this;
    if (!swiper.controller.spline) {
      swiper.controller.spline = swiper.params.loop
        ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid)
        : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
    }
  },
  setTranslate(setTranslate, byController) {
    const swiper = this;
    const controlled = swiper.controller.control;
    let multiplier;
    let controlledTranslate;
    function setControlledTranslate(c) {
      // this will create an Interpolate function based on the snapGrids
      // x is the Grid of the scrolled scroller and y will be the controlled scroller
      // it makes sense to create this only once and recall it for the interpolation
      // the function does a lot of value caching for performance
      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
      if (swiper.params.controller.by === 'slide') {
        swiper.controller.getInterpolateFunction(c);
        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
        // but it did not work out
        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
      }

      if (!controlledTranslate || swiper.params.controller.by === 'container') {
        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
        controlledTranslate = ((translate - swiper.minTranslate()) * multiplier) + c.minTranslate();
      }

      if (swiper.params.controller.inverse) {
        controlledTranslate = c.maxTranslate() - controlledTranslate;
      }
      c.updateProgress(controlledTranslate);
      c.setTranslate(controlledTranslate, swiper);
      c.updateActiveIndex();
      c.updateSlidesClasses();
    }
    if (Array.isArray(controlled)) {
      for (let i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTranslate(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTranslate(controlled);
    }
  },
  setTransition(duration, byController) {
    const swiper = this;
    const controlled = swiper.controller.control;
    let i;
    function setControlledTransition(c) {
      c.setTransition(duration, swiper);
      if (duration !== 0) {
        c.transitionStart();
        if (c.params.autoHeight) {
          Utils.nextTick(() => {
            c.updateAutoHeight();
          });
        }
        c.$wrapperEl.transitionEnd(() => {
          if (!controlled) return;
          if (c.params.loop && swiper.params.controller.by === 'slide') {
            c.loopFix();
          }
          c.transitionEnd();
        });
      }
    }
    if (Array.isArray(controlled)) {
      for (i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTransition(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTransition(controlled);
    }
  },
};
var Controller$1 = {
  name: 'controller',
  params: {
    controller: {
      control: undefined,
      inverse: false,
      by: 'slide', // or 'container'
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      controller: {
        control: swiper.params.controller.control,
        getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
        setTranslate: Controller.setTranslate.bind(swiper),
        setTransition: Controller.setTransition.bind(swiper),
      },
    });
  },
  on: {
    update() {
      const swiper = this;
      if (!swiper.controller.control) return;
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    resize() {
      const swiper = this;
      if (!swiper.controller.control) return;
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    observerUpdate() {
      const swiper = this;
      if (!swiper.controller.control) return;
      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    setTranslate(translate, byController) {
      const swiper = this;
      if (!swiper.controller.control) return;
      swiper.controller.setTranslate(translate, byController);
    },
    setTransition(duration, byController) {
      const swiper = this;
      if (!swiper.controller.control) return;
      swiper.controller.setTransition(duration, byController);
    },
  },
};

const a11y = {
  makeElFocusable($el) {
    $el.attr('tabIndex', '0');
    return $el;
  },
  addElRole($el, role) {
    $el.attr('role', role);
    return $el;
  },
  addElLabel($el, label) {
    $el.attr('aria-label', label);
    return $el;
  },
  disableEl($el) {
    $el.attr('aria-disabled', true);
    return $el;
  },
  enableEl($el) {
    $el.attr('aria-disabled', false);
    return $el;
  },
  onEnterKey(e) {
    const swiper = this;
    const params = swiper.params.a11y;
    if (e.keyCode !== 13) return;
    const $targetEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(e.target);
    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
      if (!(swiper.isEnd && !swiper.params.loop)) {
        swiper.slideNext();
      }
      if (swiper.isEnd) {
        swiper.a11y.notify(params.lastSlideMessage);
      } else {
        swiper.a11y.notify(params.nextSlideMessage);
      }
    }
    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
      if (!(swiper.isBeginning && !swiper.params.loop)) {
        swiper.slidePrev();
      }
      if (swiper.isBeginning) {
        swiper.a11y.notify(params.firstSlideMessage);
      } else {
        swiper.a11y.notify(params.prevSlideMessage);
      }
    }
    if (swiper.pagination && $targetEl.is(`.${swiper.params.pagination.bulletClass}`)) {
      $targetEl[0].click();
    }
  },
  notify(message) {
    const swiper = this;
    const notification = swiper.a11y.liveRegion;
    if (notification.length === 0) return;
    notification.html('');
    notification.html(message);
  },
  updateNavigation() {
    const swiper = this;

    if (swiper.params.loop) return;
    const { $nextEl, $prevEl } = swiper.navigation;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        swiper.a11y.disableEl($prevEl);
      } else {
        swiper.a11y.enableEl($prevEl);
      }
    }
    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        swiper.a11y.disableEl($nextEl);
      } else {
        swiper.a11y.enableEl($nextEl);
      }
    }
  },
  updatePagination() {
    const swiper = this;
    const params = swiper.params.a11y;
    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.bullets.each((bulletIndex, bulletEl) => {
        const $bulletEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(bulletEl);
        swiper.a11y.makeElFocusable($bulletEl);
        swiper.a11y.addElRole($bulletEl, 'button');
        swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));
      });
    }
  },
  init() {
    const swiper = this;

    swiper.$el.append(swiper.a11y.liveRegion);

    // Navigation
    const params = swiper.params.a11y;
    let $nextEl;
    let $prevEl;
    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }
    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }
    if ($nextEl) {
      swiper.a11y.makeElFocusable($nextEl);
      swiper.a11y.addElRole($nextEl, 'button');
      swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
      $nextEl.on('keydown', swiper.a11y.onEnterKey);
    }
    if ($prevEl) {
      swiper.a11y.makeElFocusable($prevEl);
      swiper.a11y.addElRole($prevEl, 'button');
      swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
      $prevEl.on('keydown', swiper.a11y.onEnterKey);
    }

    // Pagination
    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.on('keydown', `.${swiper.params.pagination.bulletClass}`, swiper.a11y.onEnterKey);
    }
  },
  destroy() {
    const swiper = this;
    if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) swiper.a11y.liveRegion.remove();

    let $nextEl;
    let $prevEl;
    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }
    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }
    if ($nextEl) {
      $nextEl.off('keydown', swiper.a11y.onEnterKey);
    }
    if ($prevEl) {
      $prevEl.off('keydown', swiper.a11y.onEnterKey);
    }

    // Pagination
    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.off('keydown', `.${swiper.params.pagination.bulletClass}`, swiper.a11y.onEnterKey);
    }
  },
};
var A11y = {
  name: 'a11y',
  params: {
    a11y: {
      enabled: true,
      notificationClass: 'swiper-notification',
      prevSlideMessage: 'Previous slide',
      nextSlideMessage: 'Next slide',
      firstSlideMessage: 'This is the first slide',
      lastSlideMessage: 'This is the last slide',
      paginationBulletMessage: 'Go to slide {{index}}',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      a11y: {
        liveRegion: Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<span class="${swiper.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`),
      },
    });
    Object.keys(a11y).forEach((methodName) => {
      swiper.a11y[methodName] = a11y[methodName].bind(swiper);
    });
  },
  on: {
    init() {
      const swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.init();
      swiper.a11y.updateNavigation();
    },
    toEdge() {
      const swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    fromEdge() {
      const swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    paginationUpdate() {
      const swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updatePagination();
    },
    destroy() {
      const swiper = this;
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.destroy();
    },
  },
};

const History = {
  init() {
    const swiper = this;
    if (!swiper.params.history) return;
    if (!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history || !ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.pushState) {
      swiper.params.history.enabled = false;
      swiper.params.hashNavigation.enabled = true;
      return;
    }
    const history = swiper.history;
    history.initialized = true;
    history.paths = History.getPathValues();
    if (!history.paths.key && !history.paths.value) return;
    history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);
    if (!swiper.params.history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].addEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  destroy() {
    const swiper = this;
    if (!swiper.params.history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].removeEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  setHistoryPopState() {
    const swiper = this;
    swiper.history.paths = History.getPathValues();
    swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
  },
  getPathValues() {
    const pathArray = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].location.pathname.slice(1).split('/').filter(part => part !== '');
    const total = pathArray.length;
    const key = pathArray[total - 2];
    const value = pathArray[total - 1];
    return { key, value };
  },
  setHistory(key, index) {
    const swiper = this;
    if (!swiper.history.initialized || !swiper.params.history.enabled) return;
    const slide = swiper.slides.eq(index);
    let value = History.slugify(slide.attr('data-history'));
    if (!ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].location.pathname.includes(key)) {
      value = `${key}/${value}`;
    }
    const currentState = ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.state;
    if (currentState && currentState.value === value) {
      return;
    }
    if (swiper.params.history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.replaceState({ value }, null, value);
    } else {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.pushState({ value }, null, value);
    }
  },
  slugify(text) {
    return text.toString()
      .replace(/\s+/g, '-')
      .replace(/[^\w-]+/g, '')
      .replace(/--+/g, '-')
      .replace(/^-+/, '')
      .replace(/-+$/, '');
  },
  scrollToSlide(speed, value, runCallbacks) {
    const swiper = this;
    if (value) {
      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
        const slide = swiper.slides.eq(i);
        const slideHistory = History.slugify(slide.attr('data-history'));
        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
          const index = slide.index();
          swiper.slideTo(index, speed, runCallbacks);
        }
      }
    } else {
      swiper.slideTo(0, speed, runCallbacks);
    }
  },
};

var History$1 = {
  name: 'history',
  params: {
    history: {
      enabled: false,
      replaceState: false,
      key: 'slides',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      history: {
        init: History.init.bind(swiper),
        setHistory: History.setHistory.bind(swiper),
        setHistoryPopState: History.setHistoryPopState.bind(swiper),
        scrollToSlide: History.scrollToSlide.bind(swiper),
        destroy: History.destroy.bind(swiper),
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      if (swiper.params.history.enabled) {
        swiper.history.init();
      }
    },
    destroy() {
      const swiper = this;
      if (swiper.params.history.enabled) {
        swiper.history.destroy();
      }
    },
    transitionEnd() {
      const swiper = this;
      if (swiper.history.initialized) {
        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    },
  },
};

const HashNavigation = {
  onHashCange() {
    const swiper = this;
    const newHash = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].location.hash.replace('#', '');
    const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');
    if (newHash !== activeSlideHash) {
      const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash="${newHash}"]`).index();
      if (typeof newIndex === 'undefined') return;
      swiper.slideTo(newIndex);
    }
  },
  setHash() {
    const swiper = this;
    if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) return;
    if (swiper.params.hashNavigation.replaceState && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history && ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.replaceState) {
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"].history.replaceState(null, null, (`#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || ''));
    } else {
      const slide = swiper.slides.eq(swiper.activeIndex);
      const hash = slide.attr('data-hash') || slide.attr('data-history');
      ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].location.hash = hash || '';
    }
  },
  init() {
    const swiper = this;
    if (!swiper.params.hashNavigation.enabled || (swiper.params.history && swiper.params.history.enabled)) return;
    swiper.hashNavigation.initialized = true;
    const hash = ssr_window__WEBPACK_IMPORTED_MODULE_1__["document"].location.hash.replace('#', '');
    if (hash) {
      const speed = 0;
      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
        const slide = swiper.slides.eq(i);
        const slideHash = slide.attr('data-hash') || slide.attr('data-history');
        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
          const index = slide.index();
          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
        }
      }
    }
    if (swiper.params.hashNavigation.watchState) {
      Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"]).on('hashchange', swiper.hashNavigation.onHashCange);
    }
  },
  destroy() {
    const swiper = this;
    if (swiper.params.hashNavigation.watchState) {
      Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(ssr_window__WEBPACK_IMPORTED_MODULE_1__["window"]).off('hashchange', swiper.hashNavigation.onHashCange);
    }
  },
};
var HashNavigation$1 = {
  name: 'hash-navigation',
  params: {
    hashNavigation: {
      enabled: false,
      replaceState: false,
      watchState: false,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      hashNavigation: {
        initialized: false,
        init: HashNavigation.init.bind(swiper),
        destroy: HashNavigation.destroy.bind(swiper),
        setHash: HashNavigation.setHash.bind(swiper),
        onHashCange: HashNavigation.onHashCange.bind(swiper),
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.init();
      }
    },
    destroy() {
      const swiper = this;
      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.destroy();
      }
    },
    transitionEnd() {
      const swiper = this;
      if (swiper.hashNavigation.initialized) {
        swiper.hashNavigation.setHash();
      }
    },
  },
};

/* eslint no-underscore-dangle: "off" */

const Autoplay = {
  run() {
    const swiper = this;
    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    let delay = swiper.params.autoplay.delay;
    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }
    swiper.autoplay.timeout = Utils.nextTick(() => {
      if (swiper.params.autoplay.reverseDirection) {
        if (swiper.params.loop) {
          swiper.loopFix();
          swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isBeginning) {
          swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
      } else if (swiper.params.loop) {
        swiper.loopFix();
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }
    }, delay);
  },
  start() {
    const swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') return false;
    if (swiper.autoplay.running) return false;
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop() {
    const swiper = this;
    if (!swiper.autoplay.running) return false;
    if (typeof swiper.autoplay.timeout === 'undefined') return false;

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }
    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause(speed) {
    const swiper = this;
    if (!swiper.autoplay.running) return;
    if (swiper.autoplay.paused) return;
    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.paused = true;
    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
    }
  },
};

var Autoplay$1 = {
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      waitForTransition: true,
      disableOnInteraction: true,
      stopOnLastSlide: false,
      reverseDirection: false,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      autoplay: {
        running: false,
        paused: false,
        run: Autoplay.run.bind(swiper),
        start: Autoplay.start.bind(swiper),
        stop: Autoplay.stop.bind(swiper),
        pause: Autoplay.pause.bind(swiper),
        onTransitionEnd(e) {
          if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
          swiper.autoplay.paused = false;
          if (!swiper.autoplay.running) {
            swiper.autoplay.stop();
          } else {
            swiper.autoplay.run();
          }
        },
      },
    });
  },
  on: {
    init() {
      const swiper = this;
      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
      }
    },
    beforeTransitionStart(speed, internal) {
      const swiper = this;
      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove() {
      const swiper = this;
      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    destroy() {
      const swiper = this;
      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }
    },
  },
};

const Fade = {
  setTranslate() {
    const swiper = this;
    const { slides } = swiper;
    for (let i = 0; i < slides.length; i += 1) {
      const $slideEl = swiper.slides.eq(i);
      const offset = $slideEl[0].swiperSlideOffset;
      let tx = -offset;
      if (!swiper.params.virtualTranslate) tx -= swiper.translate;
      let ty = 0;
      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }
      const slideOpacity = swiper.params.fadeEffect.crossFade
        ? Math.max(1 - Math.abs($slideEl[0].progress), 0)
        : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
      $slideEl
        .css({
          opacity: slideOpacity,
        })
        .transform(`translate3d(${tx}px, ${ty}px, 0px)`);
    }
  },
  setTransition(duration) {
    const swiper = this;
    const { slides, $wrapperEl } = swiper;
    slides.transition(duration);
    if (swiper.params.virtualTranslate && duration !== 0) {
      let eventTriggered = false;
      slides.transitionEnd(() => {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        eventTriggered = true;
        swiper.animating = false;
        const triggerEvents = ['webkitTransitionEnd', 'transitionend'];
        for (let i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  },
};

var EffectFade = {
  name: 'effect-fade',
  params: {
    fadeEffect: {
      crossFade: false,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      fadeEffect: {
        setTranslate: Fade.setTranslate.bind(swiper),
        setTransition: Fade.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (swiper.params.effect !== 'fade') return;
      swiper.classNames.push(`${swiper.params.containerModifierClass}fade`);
      const overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true,
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);
    },
    setTranslate() {
      const swiper = this;
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTranslate();
    },
    setTransition(duration) {
      const swiper = this;
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTransition(duration);
    },
  },
};

const Cube = {
  setTranslate() {
    const swiper = this;
    const {
      $el, $wrapperEl, slides, width: swiperWidth, height: swiperHeight, rtlTranslate: rtl, size: swiperSize,
    } = swiper;
    const params = swiper.params.cubeEffect;
    const isHorizontal = swiper.isHorizontal();
    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    let wrapperRotate = 0;
    let $cubeShadowEl;
    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');
        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])('<div class="swiper-cube-shadow"></div>');
          $wrapperEl.append($cubeShadowEl);
        }
        $cubeShadowEl.css({ height: `${swiperWidth}px` });
      } else {
        $cubeShadowEl = $el.find('.swiper-cube-shadow');
        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])('<div class="swiper-cube-shadow"></div>');
          $el.append($cubeShadowEl);
        }
      }
    }
    for (let i = 0; i < slides.length; i += 1) {
      const $slideEl = slides.eq(i);
      let slideIndex = i;
      if (isVirtual) {
        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
      }
      let slideAngle = slideIndex * 90;
      let round = Math.floor(slideAngle / 360);
      if (rtl) {
        slideAngle = -slideAngle;
        round = Math.floor(-slideAngle / 360);
      }
      const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      let tx = 0;
      let ty = 0;
      let tz = 0;
      if (slideIndex % 4 === 0) {
        tx = -round * 4 * swiperSize;
        tz = 0;
      } else if ((slideIndex - 1) % 4 === 0) {
        tx = 0;
        tz = -round * 4 * swiperSize;
      } else if ((slideIndex - 2) % 4 === 0) {
        tx = swiperSize + (round * 4 * swiperSize);
        tz = swiperSize;
      } else if ((slideIndex - 3) % 4 === 0) {
        tx = -swiperSize;
        tz = (3 * swiperSize) + (swiperSize * 4 * round);
      }
      if (rtl) {
        tx = -tx;
      }

      if (!isHorizontal) {
        ty = tx;
        tx = 0;
      }

      const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;
      if (progress <= 1 && progress > -1) {
        wrapperRotate = (slideIndex * 90) + (progress * 90);
        if (rtl) wrapperRotate = (-slideIndex * 90) - (progress * 90);
      }
      $slideEl.transform(transform);
      if (params.slideShadows) {
        // Set shadows
        let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
        if (shadowBefore.length === 0) {
          shadowBefore = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}"></div>`);
          $slideEl.append(shadowBefore);
        }
        if (shadowAfter.length === 0) {
          shadowAfter = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}"></div>`);
          $slideEl.append(shadowAfter);
        }
        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }
    }
    $wrapperEl.css({
      '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,
      '-moz-transform-origin': `50% 50% -${swiperSize / 2}px`,
      '-ms-transform-origin': `50% 50% -${swiperSize / 2}px`,
      'transform-origin': `50% 50% -${swiperSize / 2}px`,
    });

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl.transform(`translate3d(0px, ${(swiperWidth / 2) + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);
      } else {
        const shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);
        const multiplier = 1.5 - (
          (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2)
          + (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)
        );
        const scale1 = params.shadowScale;
        const scale2 = params.shadowScale / multiplier;
        const offset = params.shadowOffset;
        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${(swiperHeight / 2) + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);
      }
    }
    const zFactor = (Browser.isSafari || Browser.isUiWebView) ? (-swiperSize / 2) : 0;
    $wrapperEl
      .transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);
  },
  setTransition(duration) {
    const swiper = this;
    const { $el, slides } = swiper;
    slides
      .transition(duration)
      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
      .transition(duration);
    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
      $el.find('.swiper-cube-shadow').transition(duration);
    }
  },
};

var EffectCube = {
  name: 'effect-cube',
  params: {
    cubeEffect: {
      slideShadows: true,
      shadow: true,
      shadowOffset: 20,
      shadowScale: 0.94,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      cubeEffect: {
        setTranslate: Cube.setTranslate.bind(swiper),
        setTransition: Cube.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (swiper.params.effect !== 'cube') return;
      swiper.classNames.push(`${swiper.params.containerModifierClass}cube`);
      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
      const overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: false,
        virtualTranslate: true,
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);
    },
    setTranslate() {
      const swiper = this;
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTranslate();
    },
    setTransition(duration) {
      const swiper = this;
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTransition(duration);
    },
  },
};

const Flip = {
  setTranslate() {
    const swiper = this;
    const { slides, rtlTranslate: rtl } = swiper;
    for (let i = 0; i < slides.length; i += 1) {
      const $slideEl = slides.eq(i);
      let progress = $slideEl[0].progress;
      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      }
      const offset = $slideEl[0].swiperSlideOffset;
      const rotate = -180 * progress;
      let rotateY = rotate;
      let rotateX = 0;
      let tx = -offset;
      let ty = 0;
      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
        rotateX = -rotateY;
        rotateY = 0;
      } else if (rtl) {
        rotateY = -rotateY;
      }

      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

      if (swiper.params.flipEffect.slideShadows) {
        // Set shadows
        let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
        if (shadowBefore.length === 0) {
          shadowBefore = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="swiper-slide-shadow-${swiper.isHorizontal() ? 'left' : 'top'}"></div>`);
          $slideEl.append(shadowBefore);
        }
        if (shadowAfter.length === 0) {
          shadowAfter = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="swiper-slide-shadow-${swiper.isHorizontal() ? 'right' : 'bottom'}"></div>`);
          $slideEl.append(shadowAfter);
        }
        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }
      $slideEl
        .transform(`translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`);
    }
  },
  setTransition(duration) {
    const swiper = this;
    const { slides, activeIndex, $wrapperEl } = swiper;
    slides
      .transition(duration)
      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
      .transition(duration);
    if (swiper.params.virtualTranslate && duration !== 0) {
      let eventTriggered = false;
      // eslint-disable-next-line
      slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;
        eventTriggered = true;
        swiper.animating = false;
        const triggerEvents = ['webkitTransitionEnd', 'transitionend'];
        for (let i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  },
};

var EffectFlip = {
  name: 'effect-flip',
  params: {
    flipEffect: {
      slideShadows: true,
      limitRotation: true,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      flipEffect: {
        setTranslate: Flip.setTranslate.bind(swiper),
        setTransition: Flip.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (swiper.params.effect !== 'flip') return;
      swiper.classNames.push(`${swiper.params.containerModifierClass}flip`);
      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
      const overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true,
      };
      Utils.extend(swiper.params, overwriteParams);
      Utils.extend(swiper.originalParams, overwriteParams);
    },
    setTranslate() {
      const swiper = this;
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTranslate();
    },
    setTransition(duration) {
      const swiper = this;
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTransition(duration);
    },
  },
};

const Coverflow = {
  setTranslate() {
    const swiper = this;
    const {
      width: swiperWidth, height: swiperHeight, slides, $wrapperEl, slidesSizesGrid,
    } = swiper;
    const params = swiper.params.coverflowEffect;
    const isHorizontal = swiper.isHorizontal();
    const transform = swiper.translate;
    const center = isHorizontal ? -transform + (swiperWidth / 2) : -transform + (swiperHeight / 2);
    const rotate = isHorizontal ? params.rotate : -params.rotate;
    const translate = params.depth;
    // Each slide offset from center
    for (let i = 0, length = slides.length; i < length; i += 1) {
      const $slideEl = slides.eq(i);
      const slideSize = slidesSizesGrid[i];
      const slideOffset = $slideEl[0].swiperSlideOffset;
      const offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;

      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
      // var rotateZ = 0
      let translateZ = -translate * Math.abs(offsetMultiplier);

      let translateY = isHorizontal ? 0 : params.stretch * (offsetMultiplier);
      let translateX = isHorizontal ? params.stretch * (offsetMultiplier) : 0;

      // Fix for ultra small values
      if (Math.abs(translateX) < 0.001) translateX = 0;
      if (Math.abs(translateY) < 0.001) translateY = 0;
      if (Math.abs(translateZ) < 0.001) translateZ = 0;
      if (Math.abs(rotateY) < 0.001) rotateY = 0;
      if (Math.abs(rotateX) < 0.001) rotateX = 0;

      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;

      $slideEl.transform(slideTransform);
      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
      if (params.slideShadows) {
        // Set shadows
        let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
        if ($shadowBeforeEl.length === 0) {
          $shadowBeforeEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}"></div>`);
          $slideEl.append($shadowBeforeEl);
        }
        if ($shadowAfterEl.length === 0) {
          $shadowAfterEl = Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(`<div class="swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}"></div>`);
          $slideEl.append($shadowAfterEl);
        }
        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0;
      }
    }

    // Set correct perspective for IE10
    if (Support.pointerEvents || Support.prefixedPointerEvents) {
      const ws = $wrapperEl[0].style;
      ws.perspectiveOrigin = `${center}px 50%`;
    }
  },
  setTransition(duration) {
    const swiper = this;
    swiper.slides
      .transition(duration)
      .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
      .transition(duration);
  },
};

var EffectCoverflow = {
  name: 'effect-coverflow',
  params: {
    coverflowEffect: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: true,
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      coverflowEffect: {
        setTranslate: Coverflow.setTranslate.bind(swiper),
        setTransition: Coverflow.setTransition.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      if (swiper.params.effect !== 'coverflow') return;

      swiper.classNames.push(`${swiper.params.containerModifierClass}coverflow`);
      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);

      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    setTranslate() {
      const swiper = this;
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTranslate();
    },
    setTransition(duration) {
      const swiper = this;
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTransition(duration);
    },
  },
};

const Thumbs = {
  init() {
    const swiper = this;
    const { thumbs: thumbsParams } = swiper.params;
    const SwiperClass = swiper.constructor;
    if (thumbsParams.swiper instanceof SwiperClass) {
      swiper.thumbs.swiper = thumbsParams.swiper;
      Utils.extend(swiper.thumbs.swiper.originalParams, {
        watchSlidesProgress: true,
        slideToClickedSlide: false,
      });
      Utils.extend(swiper.thumbs.swiper.params, {
        watchSlidesProgress: true,
        slideToClickedSlide: false,
      });
    } else if (Utils.isObject(thumbsParams.swiper)) {
      swiper.thumbs.swiper = new SwiperClass(Utils.extend({}, thumbsParams.swiper, {
        watchSlidesVisibility: true,
        watchSlidesProgress: true,
        slideToClickedSlide: false,
      }));
      swiper.thumbs.swiperCreated = true;
    }
    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
    swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
  },
  onThumbClick() {
    const swiper = this;
    const thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    const clickedIndex = thumbsSwiper.clickedIndex;
    const clickedSlide = thumbsSwiper.clickedSlide;
    if (clickedSlide && Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
    let slideToIndex;
    if (thumbsSwiper.params.loop) {
      slideToIndex = parseInt(Object(dom7_dist_dom7_modular__WEBPACK_IMPORTED_MODULE_0__["$"])(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
    } else {
      slideToIndex = clickedIndex;
    }
    if (swiper.params.loop) {
      let currentIndex = swiper.activeIndex;
      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
        swiper.loopFix();
        // eslint-disable-next-line
        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        currentIndex = swiper.activeIndex;
      }
      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index="${slideToIndex}"]`).eq(0).index();
      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index="${slideToIndex}"]`).eq(0).index();
      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;
      else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;
      else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;
      else slideToIndex = prevIndex;
    }
    swiper.slideTo(slideToIndex);
  },
  update(initial) {
    const swiper = this;
    const thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;

    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto'
      ? thumbsSwiper.slidesPerViewDynamic()
      : thumbsSwiper.params.slidesPerView;

    if (swiper.realIndex !== thumbsSwiper.realIndex) {
      let currentThumbsIndex = thumbsSwiper.activeIndex;
      let newThumbsIndex;
      if (thumbsSwiper.params.loop) {
        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
          thumbsSwiper.loopFix();
          // eslint-disable-next-line
          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
          currentThumbsIndex = thumbsSwiper.activeIndex;
        }
        // Find actual thumbs index to slide to
        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index="${swiper.realIndex}"]`).eq(0).index();
        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index="${swiper.realIndex}"]`).eq(0).index();
        if (typeof prevThumbsIndex === 'undefined') newThumbsIndex = nextThumbsIndex;
        else if (typeof nextThumbsIndex === 'undefined') newThumbsIndex = prevThumbsIndex;
        else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) newThumbsIndex = currentThumbsIndex;
        else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) newThumbsIndex = nextThumbsIndex;
        else newThumbsIndex = prevThumbsIndex;
      } else {
        newThumbsIndex = swiper.realIndex;
      }
      if (thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
        if (thumbsSwiper.params.centeredSlides) {
          if (newThumbsIndex > currentThumbsIndex) {
            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
          } else {
            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
          }
        } else if (newThumbsIndex > currentThumbsIndex) {
          newThumbsIndex = newThumbsIndex - slidesPerView + 1;
        }
        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
      }
    }

    // Activate thumbs
    let thumbsToActivate = 1;
    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
      thumbsToActivate = swiper.params.slidesPerView;
    }

    thumbsSwiper.slides.removeClass(thumbActiveClass);
    if (thumbsSwiper.params.loop) {
      for (let i = 0; i < thumbsToActivate; i += 1) {
        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index="${swiper.realIndex + i}"]`).addClass(thumbActiveClass);
      }
    } else {
      for (let i = 0; i < thumbsToActivate; i += 1) {
        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);
      }
    }
  },
};
var Thumbs$1 = {
  name: 'thumbs',
  params: {
    thumbs: {
      swiper: null,
      slideThumbActiveClass: 'swiper-slide-thumb-active',
      thumbsContainerClass: 'swiper-container-thumbs',
    },
  },
  create() {
    const swiper = this;
    Utils.extend(swiper, {
      thumbs: {
        swiper: null,
        init: Thumbs.init.bind(swiper),
        update: Thumbs.update.bind(swiper),
        onThumbClick: Thumbs.onThumbClick.bind(swiper),
      },
    });
  },
  on: {
    beforeInit() {
      const swiper = this;
      const { thumbs } = swiper.params;
      if (!thumbs || !thumbs.swiper) return;
      swiper.thumbs.init();
      swiper.thumbs.update(true);
    },
    slideChange() {
      const swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    update() {
      const swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    resize() {
      const swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    observerUpdate() {
      const swiper = this;
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    setTransition(duration) {
      const swiper = this;
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;
      thumbsSwiper.setTransition(duration);
    },
    beforeDestroy() {
      const swiper = this;
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;
      if (swiper.thumbs.swiperCreated && thumbsSwiper) {
        thumbsSwiper.destroy();
      }
    },
  },
};

// Swiper Class

const components = [
  Device$1,
  Support$1,
  Browser$1,
  Resize,
  Observer$1,
  Virtual$1,
  Keyboard$1,
  Mousewheel$1,
  Navigation$1,
  Pagination$1,
  Scrollbar$1,
  Parallax$1,
  Zoom$1,
  Lazy$1,
  Controller$1,
  A11y,
  History$1,
  HashNavigation$1,
  Autoplay$1,
  EffectFade,
  EffectCube,
  EffectFlip,
  EffectCoverflow,
  Thumbs$1
];

if (typeof Swiper.use === 'undefined') {
  Swiper.use = Swiper.Class.use;
  Swiper.installModule = Swiper.Class.installModule;
}

Swiper.use(components);

/* harmony default export */ __webpack_exports__["default"] = (Swiper);


/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */


/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.10';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being pased as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving the component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (false) {} else {
  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
}


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(bootstrap__WEBPACK_IMPORTED_MODULE_5__);
/**
 * This bootstrap file is used for both frontend and backend
 */




 // Required for BS4


/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

window.$ = window.jQuery = jquery__WEBPACK_IMPORTED_MODULE_3___default.a;
window.Swal = sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a;
window._ = lodash__WEBPACK_IMPORTED_MODULE_0___default.a; // Lodash

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = axios__WEBPACK_IMPORTED_MODULE_1___default.a;
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
/**
 * Next we will register the CSRF Token as a common header with Axios so that
 * all outgoing HTTP requests automatically have it attached. This is just
 * a simple convenience so we don't have to attach every token manually.
 */

var token = document.head.querySelector('meta[name="csrf-token"]');

if (token) {
  window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;
} else {
  console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');
}
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo'
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     encrypted: true
// });

/***/ }),

/***/ "./resources/js/frontend/app.js":
/*!**************************************!*\
  !*** ./resources/js/frontend/app.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bootstrap */ "./resources/js/bootstrap.js");
/* harmony import */ var _plugins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins */ "./resources/js/plugins.js");
/* harmony import */ var _plugins__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_plugins__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _vendor_circle_progress_circle_progress_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vendor/circle-progress/circle-progress.min */ "./resources/js/frontend/vendor/circle-progress/circle-progress.min.js");
/* harmony import */ var _vendor_circle_progress_circle_progress_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_vendor_circle_progress_circle_progress_min__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _vendor_cookie_jquery_cookie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vendor/cookie/jquery.cookie */ "./resources/js/frontend/vendor/cookie/jquery.cookie.js");
/* harmony import */ var _vendor_cookie_jquery_cookie__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_vendor_cookie_jquery_cookie__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _vendor_bootstrap_footable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vendor/bootstrap/footable */ "./resources/js/frontend/vendor/bootstrap/footable.js");
/* harmony import */ var _vendor_bootstrap_footable__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_vendor_bootstrap_footable__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _vendor_intlTelInput_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vendor/intlTelInput/utils */ "./resources/js/frontend/vendor/intlTelInput/utils.js");
/* harmony import */ var _vendor_intlTelInput_utils__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_vendor_intlTelInput_utils__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _vendor_EasyAutocomplete_1_3_5_jquery_easy_autocomplete__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vendor/EasyAutocomplete-1.3.5/jquery.easy-autocomplete */ "./resources/js/frontend/vendor/EasyAutocomplete-1.3.5/jquery.easy-autocomplete.js");
/* harmony import */ var _vendor_EasyAutocomplete_1_3_5_jquery_easy_autocomplete__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_vendor_EasyAutocomplete_1_3_5_jquery_easy_autocomplete__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! intl-tel-input */ "./node_modules/intl-tel-input/index.js");
/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(intl_tel_input__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var swiper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! swiper */ "./node_modules/swiper/dist/js/swiper.esm.bundle.js");
/**
 * First we will load all of this project's JavaScript dependencies which
 * includes Vue and other libraries. It is a great starting point when
 * building robust, powerful web applications using Vue and Laravel.
 */










window.Vue = vue__WEBPACK_IMPORTED_MODULE_7___default.a;
window.Swiper = swiper__WEBPACK_IMPORTED_MODULE_9__["default"];
window.intlTelInput = intl_tel_input__WEBPACK_IMPORTED_MODULE_8___default.a;
/* Vue.use(VueMaterial); */

/**
 * The following block of code may be used to automatically register your
 * Vue components. It will recursively scan this directory for the Vue
 * components and automatically register them with their "basename".
 *
 * Eg. ./components/ExampleComponent.vue -> <example-component></example-component>
 */
// const files = require.context('./', true, /\.vue$/i);
// files.keys().map(key => Vue.component(key.split('/').pop().split('.')[0], files(key).default));

/* Vue.component('example-component', require('./components/ExampleComponent.vue').default); */

/*  Vue.component('dial-payment', require('./components/DialPaymentComponent.vue').default);   */

/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */

/* const app = new Vue({
    el: '#dial-payment',
});
  */

/***/ }),

/***/ "./resources/js/frontend/vendor/EasyAutocomplete-1.3.5/jquery.easy-autocomplete.js":
/*!*****************************************************************************************!*\
  !*** ./resources/js/frontend/vendor/EasyAutocomplete-1.3.5/jquery.easy-autocomplete.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * easy-autocomplete
 * jQuery plugin for autocompletion
 * 
 * @author Łukasz Pawełczak (http://github.com/pawelczak)
 * @version 1.3.5
 * Copyright  License: 
 */

/*
 * EasyAutocomplete - Configuration 
 */
var EasyAutocomplete = function (scope) {
  scope.Configuration = function Configuration(options) {
    var defaults = {
      data: "list-required",
      url: "list-required",
      dataType: "json",
      listLocation: function listLocation(data) {
        return data;
      },
      xmlElementName: "",
      getValue: function getValue(element) {
        return element;
      },
      autocompleteOff: true,
      placeholder: false,
      ajaxCallback: function ajaxCallback() {},
      matchResponseProperty: false,
      list: {
        sort: {
          enabled: false,
          method: function method(a, b) {
            a = defaults.getValue(a);
            b = defaults.getValue(b);

            if (a < b) {
              return -1;
            }

            if (a > b) {
              return 1;
            }

            return 0;
          }
        },
        maxNumberOfElements: 6,
        hideOnEmptyPhrase: true,
        match: {
          enabled: false,
          caseSensitive: false,
          method: function method(element, phrase) {
            if (element.search(phrase) > -1) {
              return true;
            } else {
              return false;
            }
          }
        },
        showAnimation: {
          type: "normal",
          //normal|slide|fade
          time: 400,
          callback: function callback() {}
        },
        hideAnimation: {
          type: "normal",
          time: 400,
          callback: function callback() {}
        },

        /* Events */
        onClickEvent: function onClickEvent() {},
        onSelectItemEvent: function onSelectItemEvent() {},
        onLoadEvent: function onLoadEvent() {},
        onChooseEvent: function onChooseEvent() {},
        onKeyEnterEvent: function onKeyEnterEvent() {},
        onMouseOverEvent: function onMouseOverEvent() {},
        onMouseOutEvent: function onMouseOutEvent() {},
        onShowListEvent: function onShowListEvent() {},
        onHideListEvent: function onHideListEvent() {}
      },
      highlightPhrase: true,
      theme: "",
      cssClasses: "",
      minCharNumber: 0,
      requestDelay: 0,
      adjustWidth: true,
      ajaxSettings: {},
      preparePostData: function preparePostData(data, inputPhrase) {
        return data;
      },
      loggerEnabled: true,
      template: "",
      categoriesAssigned: false,
      categories: [{
        maxNumberOfElements: 4
      }]
    };
    var externalObjects = ["ajaxSettings", "template"];

    this.get = function (propertyName) {
      return defaults[propertyName];
    };

    this.equals = function (name, value) {
      if (isAssigned(name)) {
        if (defaults[name] === value) {
          return true;
        }
      }

      return false;
    };

    this.checkDataUrlProperties = function () {
      if (defaults.url === "list-required" && defaults.data === "list-required") {
        return false;
      }

      return true;
    };

    this.checkRequiredProperties = function () {
      for (var propertyName in defaults) {
        if (defaults[propertyName] === "required") {
          logger.error("Option " + propertyName + " must be defined");
          return false;
        }
      }

      return true;
    };

    this.printPropertiesThatDoesntExist = function (consol, optionsToCheck) {
      printPropertiesThatDoesntExist(consol, optionsToCheck);
    };

    prepareDefaults();
    mergeOptions();

    if (defaults.loggerEnabled === true) {
      printPropertiesThatDoesntExist(console, options);
    }

    addAjaxSettings();
    processAfterMerge();

    function prepareDefaults() {
      if (options.dataType === "xml") {
        if (!options.getValue) {
          options.getValue = function (element) {
            return $(element).text();
          };
        }

        if (!options.list) {
          options.list = {};
        }

        if (!options.list.sort) {
          options.list.sort = {};
        }

        options.list.sort.method = function (a, b) {
          a = options.getValue(a);
          b = options.getValue(b);

          if (a < b) {
            return -1;
          }

          if (a > b) {
            return 1;
          }

          return 0;
        };

        if (!options.list.match) {
          options.list.match = {};
        }

        options.list.match.method = function (element, phrase) {
          if (element.search(phrase) > -1) {
            return true;
          } else {
            return false;
          }
        };
      }

      if (options.categories !== undefined && options.categories instanceof Array) {
        var categories = [];

        for (var i = 0, length = options.categories.length; i < length; i += 1) {
          var category = options.categories[i];

          for (var property in defaults.categories[0]) {
            if (category[property] === undefined) {
              category[property] = defaults.categories[0][property];
            }
          }

          categories.push(category);
        }

        options.categories = categories;
      }
    }

    function mergeOptions() {
      defaults = mergeObjects(defaults, options);

      function mergeObjects(source, target) {
        var mergedObject = source || {};

        for (var propertyName in source) {
          if (target[propertyName] !== undefined && target[propertyName] !== null) {
            if (_typeof(target[propertyName]) !== "object" || target[propertyName] instanceof Array) {
              mergedObject[propertyName] = target[propertyName];
            } else {
              mergeObjects(source[propertyName], target[propertyName]);
            }
          }
        }
        /* If data is an object */


        if (target.data !== undefined && target.data !== null && _typeof(target.data) === "object") {
          mergedObject.data = target.data;
        }

        return mergedObject;
      }
    }

    function processAfterMerge() {
      if (defaults.url !== "list-required" && typeof defaults.url !== "function") {
        var defaultUrl = defaults.url;

        defaults.url = function () {
          return defaultUrl;
        };
      }

      if (defaults.ajaxSettings.url !== undefined && typeof defaults.ajaxSettings.url !== "function") {
        var defaultUrl = defaults.ajaxSettings.url;

        defaults.ajaxSettings.url = function () {
          return defaultUrl;
        };
      }

      if (typeof defaults.listLocation === "string") {
        var defaultlistLocation = defaults.listLocation;

        if (defaults.dataType.toUpperCase() === "XML") {
          defaults.listLocation = function (data) {
            return $(data).find(defaultlistLocation);
          };
        } else {
          defaults.listLocation = function (data) {
            return data[defaultlistLocation];
          };
        }
      }

      if (typeof defaults.getValue === "string") {
        var defaultsGetValue = defaults.getValue;

        defaults.getValue = function (element) {
          return element[defaultsGetValue];
        };
      }

      if (options.categories !== undefined) {
        defaults.categoriesAssigned = true;
      }
    }

    function addAjaxSettings() {
      if (options.ajaxSettings !== undefined && _typeof(options.ajaxSettings) === "object") {
        defaults.ajaxSettings = options.ajaxSettings;
      } else {
        defaults.ajaxSettings = {};
      }
    }

    function isAssigned(name) {
      if (defaults[name] !== undefined && defaults[name] !== null) {
        return true;
      } else {
        return false;
      }
    }

    function printPropertiesThatDoesntExist(consol, optionsToCheck) {
      checkPropertiesIfExist(defaults, optionsToCheck);

      function checkPropertiesIfExist(source, target) {
        for (var property in target) {
          if (source[property] === undefined) {
            consol.log("Property '" + property + "' does not exist in EasyAutocomplete options API.");
          }

          if (_typeof(source[property]) === "object" && $.inArray(property, externalObjects) === -1) {
            checkPropertiesIfExist(source[property], target[property]);
          }
        }
      }
    }
  };

  return scope;
}(EasyAutocomplete || {});
/*
 * EasyAutocomplete - Logger 
 */


var EasyAutocomplete = function (scope) {
  scope.Logger = function Logger() {
    this.error = function (message) {
      console.log("ERROR: " + message);
    };

    this.warning = function (message) {
      console.log("WARNING: " + message);
    };
  };

  return scope;
}(EasyAutocomplete || {});
/*
 * EasyAutocomplete - Constans
 */


var EasyAutocomplete = function (scope) {
  scope.Constans = function Constans() {
    var constants = {
      CONTAINER_CLASS: "easy-autocomplete-container",
      CONTAINER_ID: "eac-container-",
      WRAPPER_CSS_CLASS: "easy-autocomplete"
    };

    this.getValue = function (propertyName) {
      return constants[propertyName];
    };
  };

  return scope;
}(EasyAutocomplete || {});
/*
 * EasyAutocomplete - ListBuilderService 
 *
 * @author Łukasz Pawełczak 
 *
 */


var EasyAutocomplete = function (scope) {
  scope.ListBuilderService = function ListBuilderService(configuration, proccessResponseData) {
    this.init = function (data) {
      var listBuilder = [],
          builder = {};
      builder.data = configuration.get("listLocation")(data);
      builder.getValue = configuration.get("getValue");
      builder.maxListSize = configuration.get("list").maxNumberOfElements;
      listBuilder.push(builder);
      return listBuilder;
    };

    this.updateCategories = function (listBuilder, data) {
      if (configuration.get("categoriesAssigned")) {
        listBuilder = [];

        for (var i = 0; i < configuration.get("categories").length; i += 1) {
          var builder = convertToListBuilder(configuration.get("categories")[i], data);
          listBuilder.push(builder);
        }
      }

      return listBuilder;
    };

    this.convertXml = function (listBuilder) {
      if (configuration.get("dataType").toUpperCase() === "XML") {
        for (var i = 0; i < listBuilder.length; i += 1) {
          listBuilder[i].data = convertXmlToList(listBuilder[i]);
        }
      }

      return listBuilder;
    };

    this.processData = function (listBuilder, inputPhrase) {
      for (var i = 0, length = listBuilder.length; i < length; i += 1) {
        listBuilder[i].data = proccessResponseData(configuration, listBuilder[i], inputPhrase);
      }

      return listBuilder;
    };

    this.checkIfDataExists = function (listBuilders) {
      for (var i = 0, length = listBuilders.length; i < length; i += 1) {
        if (listBuilders[i].data !== undefined && listBuilders[i].data instanceof Array) {
          if (listBuilders[i].data.length > 0) {
            return true;
          }
        }
      }

      return false;
    };

    function convertToListBuilder(category, data) {
      var builder = {};

      if (configuration.get("dataType").toUpperCase() === "XML") {
        builder = convertXmlToListBuilder();
      } else {
        builder = convertDataToListBuilder();
      }

      if (category.header !== undefined) {
        builder.header = category.header;
      }

      if (category.maxNumberOfElements !== undefined) {
        builder.maxNumberOfElements = category.maxNumberOfElements;
      }

      if (configuration.get("list").maxNumberOfElements !== undefined) {
        builder.maxListSize = configuration.get("list").maxNumberOfElements;
      }

      if (category.getValue !== undefined) {
        if (typeof category.getValue === "string") {
          var defaultsGetValue = category.getValue;

          builder.getValue = function (element) {
            return element[defaultsGetValue];
          };
        } else if (typeof category.getValue === "function") {
          builder.getValue = category.getValue;
        }
      } else {
        builder.getValue = configuration.get("getValue");
      }

      return builder;

      function convertXmlToListBuilder() {
        var builder = {},
            listLocation;

        if (category.xmlElementName !== undefined) {
          builder.xmlElementName = category.xmlElementName;
        }

        if (category.listLocation !== undefined) {
          listLocation = category.listLocation;
        } else if (configuration.get("listLocation") !== undefined) {
          listLocation = configuration.get("listLocation");
        }

        if (listLocation !== undefined) {
          if (typeof listLocation === "string") {
            builder.data = $(data).find(listLocation);
          } else if (typeof listLocation === "function") {
            builder.data = listLocation(data);
          }
        } else {
          builder.data = data;
        }

        return builder;
      }

      function convertDataToListBuilder() {
        var builder = {};

        if (category.listLocation !== undefined) {
          if (typeof category.listLocation === "string") {
            builder.data = data[category.listLocation];
          } else if (typeof category.listLocation === "function") {
            builder.data = category.listLocation(data);
          }
        } else {
          builder.data = data;
        }

        return builder;
      }
    }

    function convertXmlToList(builder) {
      var simpleList = [];

      if (builder.xmlElementName === undefined) {
        builder.xmlElementName = configuration.get("xmlElementName");
      }

      $(builder.data).find(builder.xmlElementName).each(function () {
        simpleList.push(this);
      });
      return simpleList;
    }
  };

  return scope;
}(EasyAutocomplete || {});
/*
 * EasyAutocomplete - Data proccess module
 *
 * Process list to display:
 * - sort 
 * - decrease number to specific number
 * - show only matching list
 *
 */


var EasyAutocomplete = function (scope) {
  scope.proccess = function proccessData(config, listBuilder, phrase) {
    scope.proccess.match = match;
    var list = listBuilder.data,
        inputPhrase = phrase; //TODO REFACTOR

    list = findMatch(list, inputPhrase);
    list = reduceElementsInList(list);
    list = sort(list);
    return list;

    function findMatch(list, phrase) {
      var preparedList = [],
          value = "";

      if (config.get("list").match.enabled) {
        for (var i = 0, length = list.length; i < length; i += 1) {
          value = config.get("getValue")(list[i]);

          if (match(value, phrase)) {
            preparedList.push(list[i]);
          }
        }
      } else {
        preparedList = list;
      }

      return preparedList;
    }

    function match(value, phrase) {
      if (!config.get("list").match.caseSensitive) {
        if (typeof value === "string") {
          value = value.toLowerCase();
        }

        phrase = phrase.toLowerCase();
      }

      if (config.get("list").match.method(value, phrase)) {
        return true;
      } else {
        return false;
      }
    }

    function reduceElementsInList(list) {
      if (listBuilder.maxNumberOfElements !== undefined && list.length > listBuilder.maxNumberOfElements) {
        list = list.slice(0, listBuilder.maxNumberOfElements);
      }

      return list;
    }

    function sort(list) {
      if (config.get("list").sort.enabled) {
        list.sort(config.get("list").sort.method);
      }

      return list;
    }
  };

  return scope;
}(EasyAutocomplete || {});
/*
 * EasyAutocomplete - Template 
 *
 * 
 *
 */


var EasyAutocomplete = function (scope) {
  scope.Template = function Template(options) {
    var genericTemplates = {
      basic: {
        type: "basic",
        method: function method(element) {
          return element;
        },
        cssClass: ""
      },
      description: {
        type: "description",
        fields: {
          description: "description"
        },
        method: function method(element) {
          return element + " - description";
        },
        cssClass: "eac-description"
      },
      iconLeft: {
        type: "iconLeft",
        fields: {
          icon: ""
        },
        method: function method(element) {
          return element;
        },
        cssClass: "eac-icon-left"
      },
      iconRight: {
        type: "iconRight",
        fields: {
          iconSrc: ""
        },
        method: function method(element) {
          return element;
        },
        cssClass: "eac-icon-right"
      },
      links: {
        type: "links",
        fields: {
          link: ""
        },
        method: function method(element) {
          return element;
        },
        cssClass: ""
      },
      custom: {
        type: "custom",
        method: function method() {},
        cssClass: ""
      }
    },

    /*
     * Converts method with {{text}} to function
     */
    convertTemplateToMethod = function convertTemplateToMethod(template) {
      var _fields = template.fields,
          buildMethod;

      if (template.type === "description") {
        buildMethod = genericTemplates.description.method;

        if (typeof _fields.description === "string") {
          buildMethod = function buildMethod(elementValue, element) {
            return elementValue + " - <span>" + element[_fields.description] + "</span>";
          };
        } else if (typeof _fields.description === "function") {
          buildMethod = function buildMethod(elementValue, element) {
            return elementValue + " - <span>" + _fields.description(element) + "</span>";
          };
        }

        return buildMethod;
      }

      if (template.type === "iconRight") {
        if (typeof _fields.iconSrc === "string") {
          buildMethod = function buildMethod(elementValue, element) {
            return elementValue + "<img class='eac-icon' src='" + element[_fields.iconSrc] + "' />";
          };
        } else if (typeof _fields.iconSrc === "function") {
          buildMethod = function buildMethod(elementValue, element) {
            return elementValue + "<img class='eac-icon' src='" + _fields.iconSrc(element) + "' />";
          };
        }

        return buildMethod;
      }

      if (template.type === "iconLeft") {
        if (typeof _fields.iconSrc === "string") {
          buildMethod = function buildMethod(elementValue, element) {
            return "<img class='eac-icon' src='" + element[_fields.iconSrc] + "' />" + elementValue;
          };
        } else if (typeof _fields.iconSrc === "function") {
          buildMethod = function buildMethod(elementValue, element) {
            return "<img class='eac-icon' src='" + _fields.iconSrc(element) + "' />" + elementValue;
          };
        }

        return buildMethod;
      }

      if (template.type === "links") {
        if (typeof _fields.link === "string") {
          buildMethod = function buildMethod(elementValue, element) {
            return "<a href='" + element[_fields.link] + "' >" + elementValue + "</a>";
          };
        } else if (typeof _fields.link === "function") {
          buildMethod = function buildMethod(elementValue, element) {
            return "<a href='" + _fields.link(element) + "' >" + elementValue + "</a>";
          };
        }

        return buildMethod;
      }

      if (template.type === "custom") {
        return template.method;
      }

      return genericTemplates.basic.method;
    },
        prepareBuildMethod = function prepareBuildMethod(options) {
      if (!options || !options.type) {
        return genericTemplates.basic.method;
      }

      if (options.type && genericTemplates[options.type]) {
        return convertTemplateToMethod(options);
      } else {
        return genericTemplates.basic.method;
      }
    },
        templateClass = function templateClass(options) {
      var emptyStringFunction = function emptyStringFunction() {
        return "";
      };

      if (!options || !options.type) {
        return emptyStringFunction;
      }

      if (options.type && genericTemplates[options.type]) {
        return function () {
          var _cssClass = genericTemplates[options.type].cssClass;
          return function () {
            return _cssClass;
          };
        }();
      } else {
        return emptyStringFunction;
      }
    };

    this.getTemplateClass = templateClass(options);
    this.build = prepareBuildMethod(options);
  };

  return scope;
}(EasyAutocomplete || {});
/*
 * EasyAutocomplete - jQuery plugin for autocompletion
 *
 */


var EasyAutocomplete = function (scope) {
  scope.main = function Core($input, options) {
    var module = {
      name: "EasyAutocomplete",
      shortcut: "eac"
    };
    var consts = new scope.Constans(),
        config = new scope.Configuration(options),
        logger = new scope.Logger(),
        template = new scope.Template(options.template),
        listBuilderService = new scope.ListBuilderService(config, scope.proccess),
        checkParam = config.equals,
        $field = $input,
        $container = "",
        elementsList = [],
        selectedElement = -1,
        requestDelayTimeoutId;
    scope.consts = consts;

    this.getConstants = function () {
      return consts;
    };

    this.getConfiguration = function () {
      return config;
    };

    this.getContainer = function () {
      return $container;
    };

    this.getSelectedItemIndex = function () {
      return selectedElement;
    };

    this.getItems = function () {
      return elementsList;
    };

    this.getItemData = function (index) {
      if (elementsList.length < index || elementsList[index] === undefined) {
        return -1;
      } else {
        return elementsList[index];
      }
    };

    this.getSelectedItemData = function () {
      return this.getItemData(selectedElement);
    };

    this.build = function () {
      prepareField();
    };

    this.init = function () {
      init();
    };

    function init() {
      if ($field.length === 0) {
        logger.error("Input field doesn't exist.");
        return;
      }

      if (!config.checkDataUrlProperties()) {
        logger.error("One of options variables 'data' or 'url' must be defined.");
        return;
      }

      if (!config.checkRequiredProperties()) {
        logger.error("Will not work without mentioned properties.");
        return;
      }

      prepareField();
      bindEvents();
    }

    function prepareField() {
      if ($field.parent().hasClass(consts.getValue("WRAPPER_CSS_CLASS"))) {
        removeContainer();
        removeWrapper();
      }

      createWrapper();
      createContainer();
      $container = $("#" + getContainerId());

      if (config.get("placeholder")) {
        $field.attr("placeholder", config.get("placeholder"));
      }

      function createWrapper() {
        var $wrapper = $("<div>"),
            classes = consts.getValue("WRAPPER_CSS_CLASS");

        if (config.get("theme") && config.get("theme") !== "") {
          classes += " eac-" + config.get("theme");
        }

        if (config.get("cssClasses") && config.get("cssClasses") !== "") {
          classes += " " + config.get("cssClasses");
        }

        if (template.getTemplateClass() !== "") {
          classes += " " + template.getTemplateClass();
        }

        $wrapper.addClass(classes);
        $field.wrap($wrapper);

        if (config.get("adjustWidth") === true) {
          adjustWrapperWidth();
        }
      }

      function adjustWrapperWidth() {
        var fieldWidth = $field.outerWidth();
        $field.parent().css("width", fieldWidth);
      }

      function removeWrapper() {
        $field.unwrap();
      }

      function createContainer() {
        var $elements_container = $("<div>").addClass(consts.getValue("CONTAINER_CLASS"));
        $elements_container.attr("id", getContainerId()).prepend($("<ul>"));

        (function () {
          $elements_container
          /* List show animation */
          .on("show.eac", function () {
            switch (config.get("list").showAnimation.type) {
              case "slide":
                var animationTime = config.get("list").showAnimation.time,
                    callback = config.get("list").showAnimation.callback;
                $elements_container.find("ul").slideDown(animationTime, callback);
                break;

              case "fade":
                var animationTime = config.get("list").showAnimation.time,
                    callback = config.get("list").showAnimation.callback;
                $elements_container.find("ul").fadeIn(animationTime), callback;
                break;

              default:
                $elements_container.find("ul").show();
                break;
            }

            config.get("list").onShowListEvent();
          })
          /* List hide animation */
          .on("hide.eac", function () {
            switch (config.get("list").hideAnimation.type) {
              case "slide":
                var animationTime = config.get("list").hideAnimation.time,
                    callback = config.get("list").hideAnimation.callback;
                $elements_container.find("ul").slideUp(animationTime, callback);
                break;

              case "fade":
                var animationTime = config.get("list").hideAnimation.time,
                    callback = config.get("list").hideAnimation.callback;
                $elements_container.find("ul").fadeOut(animationTime, callback);
                break;

              default:
                $elements_container.find("ul").hide();
                break;
            }

            config.get("list").onHideListEvent();
          }).on("selectElement.eac", function () {
            $elements_container.find("ul li").removeClass("selected");
            $elements_container.find("ul li").eq(selectedElement).addClass("selected");
            config.get("list").onSelectItemEvent();
          }).on("loadElements.eac", function (event, listBuilders, phrase) {
            var $item = "",
                $listContainer = $elements_container.find("ul");
            $listContainer.empty().detach();
            elementsList = [];
            var counter = 0;

            for (var builderIndex = 0, listBuildersLength = listBuilders.length; builderIndex < listBuildersLength; builderIndex += 1) {
              var listData = listBuilders[builderIndex].data;

              if (listData.length === 0) {
                continue;
              }

              if (listBuilders[builderIndex].header !== undefined && listBuilders[builderIndex].header.length > 0) {
                $listContainer.append("<div class='eac-category' >" + listBuilders[builderIndex].header + "</div>");
              }

              for (var i = 0, listDataLength = listData.length; i < listDataLength && counter < listBuilders[builderIndex].maxListSize; i += 1) {
                $item = $("<li><div class='eac-item'></div></li>");

                (function () {
                  var j = i,
                      itemCounter = counter,
                      elementsValue = listBuilders[builderIndex].getValue(listData[j]);
                  $item.find(" > div").on("click", function () {
                    $field.val(elementsValue).trigger("change");
                    selectedElement = itemCounter;
                    selectElement(itemCounter);
                    config.get("list").onClickEvent();
                    config.get("list").onChooseEvent();
                  }).mouseover(function () {
                    selectedElement = itemCounter;
                    selectElement(itemCounter);
                    config.get("list").onMouseOverEvent();
                  }).mouseout(function () {
                    config.get("list").onMouseOutEvent();
                  }).html(template.build(highlight(elementsValue, phrase), listData[j]));
                })();

                $listContainer.append($item);
                elementsList.push(listData[i]);
                counter += 1;
              }
            }

            $elements_container.append($listContainer);
            config.get("list").onLoadEvent();
          });
        })();

        $field.after($elements_container);
      }

      function removeContainer() {
        $field.next("." + consts.getValue("CONTAINER_CLASS")).remove();
      }

      function highlight(string, phrase) {
        if (config.get("highlightPhrase") && phrase !== "") {
          return highlightPhrase(string, phrase);
        } else {
          return string;
        }
      }

      function escapeRegExp(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      }

      function highlightPhrase(string, phrase) {
        var escapedPhrase = escapeRegExp(phrase);
        return (string + "").replace(new RegExp("(" + escapedPhrase + ")", "gi"), "<b>$1</b>");
      }
    }

    function getContainerId() {
      var elementId = $field.attr("id");
      elementId = consts.getValue("CONTAINER_ID") + elementId;
      return elementId;
    }

    function bindEvents() {
      bindAllEvents();

      function bindAllEvents() {
        if (checkParam("autocompleteOff", true)) {
          removeAutocomplete();
        }

        bindFocusOut();
        bindKeyup();
        bindKeydown();
        bindKeypress();
        bindFocus();
        bindBlur();
      }

      function bindFocusOut() {
        $field.focusout(function () {
          var fieldValue = $field.val(),
              phrase;

          if (!config.get("list").match.caseSensitive) {
            fieldValue = fieldValue.toLowerCase();
          }

          for (var i = 0, length = elementsList.length; i < length; i += 1) {
            phrase = config.get("getValue")(elementsList[i]);

            if (!config.get("list").match.caseSensitive) {
              phrase = phrase.toLowerCase();
            }

            if (phrase === fieldValue) {
              selectedElement = i;
              selectElement(selectedElement);
              return;
            }
          }
        });
      }

      function bindKeyup() {
        $field.off("keyup").keyup(function (event) {
          switch (event.keyCode) {
            case 27:
              hideContainer();
              loseFieldFocus();
              break;

            case 38:
              event.preventDefault();

              if (elementsList.length > 0 && selectedElement > 0) {
                selectedElement -= 1;
                $field.val(config.get("getValue")(elementsList[selectedElement]));
                selectElement(selectedElement);
              }

              break;

            case 40:
              event.preventDefault();

              if (elementsList.length > 0 && selectedElement < elementsList.length - 1) {
                selectedElement += 1;
                $field.val(config.get("getValue")(elementsList[selectedElement]));
                selectElement(selectedElement);
              }

              break;

            default:
              if (event.keyCode > 40 || event.keyCode === 8) {
                var inputPhrase = $field.val();

                if (!(config.get("list").hideOnEmptyPhrase === true && event.keyCode === 8 && inputPhrase === "")) {
                  if (config.get("requestDelay") > 0) {
                    if (requestDelayTimeoutId !== undefined) {
                      clearTimeout(requestDelayTimeoutId);
                    }

                    requestDelayTimeoutId = setTimeout(function () {
                      loadData(inputPhrase);
                    }, config.get("requestDelay"));
                  } else {
                    loadData(inputPhrase);
                  }
                } else {
                  hideContainer();
                }
              }

              break;
          }

          function loadData(inputPhrase) {
            if (inputPhrase.length < config.get("minCharNumber")) {
              return;
            }

            if (config.get("data") !== "list-required") {
              var data = config.get("data");
              var listBuilders = listBuilderService.init(data);
              listBuilders = listBuilderService.updateCategories(listBuilders, data);
              listBuilders = listBuilderService.processData(listBuilders, inputPhrase);
              loadElements(listBuilders, inputPhrase);

              if ($field.parent().find("li").length > 0) {
                showContainer();
              } else {
                hideContainer();
              }
            }

            var settings = createAjaxSettings();

            if (settings.url === undefined || settings.url === "") {
              settings.url = config.get("url");
            }

            if (settings.dataType === undefined || settings.dataType === "") {
              settings.dataType = config.get("dataType");
            }

            if (settings.url !== undefined && settings.url !== "list-required") {
              settings.url = settings.url(inputPhrase);
              settings.data = config.get("preparePostData")(settings.data, inputPhrase);
              $.ajax(settings).done(function (data) {
                var listBuilders = listBuilderService.init(data);
                listBuilders = listBuilderService.updateCategories(listBuilders, data);
                listBuilders = listBuilderService.convertXml(listBuilders);

                if (checkInputPhraseMatchResponse(inputPhrase, data)) {
                  listBuilders = listBuilderService.processData(listBuilders, inputPhrase);
                  loadElements(listBuilders, inputPhrase);
                }

                if (listBuilderService.checkIfDataExists(listBuilders) && $field.parent().find("li").length > 0) {
                  showContainer();
                } else {
                  hideContainer();
                }

                config.get("ajaxCallback")();
              }).fail(function () {
                logger.warning("Fail to load response data");
              }).always(function () {});
            }

            function createAjaxSettings() {
              var settings = {},
                  ajaxSettings = config.get("ajaxSettings") || {};

              for (var set in ajaxSettings) {
                settings[set] = ajaxSettings[set];
              }

              return settings;
            }

            function checkInputPhraseMatchResponse(inputPhrase, data) {
              if (config.get("matchResponseProperty") !== false) {
                if (typeof config.get("matchResponseProperty") === "string") {
                  return data[config.get("matchResponseProperty")] === inputPhrase;
                }

                if (typeof config.get("matchResponseProperty") === "function") {
                  return config.get("matchResponseProperty")(data) === inputPhrase;
                }

                return true;
              } else {
                return true;
              }
            }
          }
        });
      }

      function bindKeydown() {
        $field.on("keydown", function (evt) {
          evt = evt || window.event;
          var keyCode = evt.keyCode;

          if (keyCode === 38) {
            suppressKeypress = true;
            return false;
          }
        }).keydown(function (event) {
          if (event.keyCode === 13 && selectedElement > -1) {
            $field.val(config.get("getValue")(elementsList[selectedElement]));
            config.get("list").onKeyEnterEvent();
            config.get("list").onChooseEvent();
            selectedElement = -1;
            hideContainer();
            event.preventDefault();
          }
        });
      }

      function bindKeypress() {
        $field.off("keypress");
      }

      function bindFocus() {
        $field.focus(function () {
          if ($field.val() !== "" && elementsList.length > 0) {
            selectedElement = -1;
            showContainer();
          }
        });
      }

      function bindBlur() {
        $field.blur(function () {
          setTimeout(function () {
            selectedElement = -1;
            hideContainer();
          }, 250);
        });
      }

      function removeAutocomplete() {
        $field.attr("autocomplete", "off");
      }
    }

    function showContainer() {
      $container.trigger("show.eac");
    }

    function hideContainer() {
      $container.trigger("hide.eac");
    }

    function selectElement(index) {
      $container.trigger("selectElement.eac", index);
    }

    function loadElements(list, phrase) {
      $container.trigger("loadElements.eac", [list, phrase]);
    }

    function loseFieldFocus() {
      $field.trigger("blur");
    }
  };

  scope.eacHandles = [];

  scope.getHandle = function (id) {
    return scope.eacHandles[id];
  };

  scope.inputHasId = function (input) {
    if ($(input).attr("id") !== undefined && $(input).attr("id").length > 0) {
      return true;
    } else {
      return false;
    }
  };

  scope.assignRandomId = function (input) {
    var fieldId = "";

    do {
      fieldId = "eac-" + Math.floor(Math.random() * 10000);
    } while ($("#" + fieldId).length !== 0);

    elementId = scope.consts.getValue("CONTAINER_ID") + fieldId;
    $(input).attr("id", fieldId);
  };

  scope.setHandle = function (handle, id) {
    scope.eacHandles[id] = handle;
  };

  return scope;
}(EasyAutocomplete || {});

(function ($) {
  $.fn.easyAutocomplete = function (options) {
    return this.each(function () {
      var $this = $(this),
          eacHandle = new EasyAutocomplete.main($this, options);

      if (!EasyAutocomplete.inputHasId($this)) {
        EasyAutocomplete.assignRandomId($this);
      }

      eacHandle.init();
      EasyAutocomplete.setHandle(eacHandle, $this.attr("id"));
    });
  };

  $.fn.getSelectedItemIndex = function () {
    var inputId = $(this).attr("id");

    if (inputId !== undefined) {
      return EasyAutocomplete.getHandle(inputId).getSelectedItemIndex();
    }

    return -1;
  };

  $.fn.getItems = function () {
    var inputId = $(this).attr("id");

    if (inputId !== undefined) {
      return EasyAutocomplete.getHandle(inputId).getItems();
    }

    return -1;
  };

  $.fn.getItemData = function (index) {
    var inputId = $(this).attr("id");

    if (inputId !== undefined && index > -1) {
      return EasyAutocomplete.getHandle(inputId).getItemData(index);
    }

    return -1;
  };

  $.fn.getSelectedItemData = function () {
    var inputId = $(this).attr("id");

    if (inputId !== undefined) {
      return EasyAutocomplete.getHandle(inputId).getSelectedItemData();
    }

    return -1;
  };
})(jQuery);

/***/ }),

/***/ "./resources/js/frontend/vendor/bootstrap/footable.js":
/*!************************************************************!*\
  !*** ./resources/js/frontend/vendor/bootstrap/footable.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
* FooTable v3 - FooTable is a jQuery plugin that aims to make HTML tables on smaller devices look awesome.
* @version 3.1.4
* @link http://fooplugins.com
* @copyright Steven Usher & Brad Vincent 2015
* @license Released under the GPLv3 license.
*/
(function ($, F) {
  // add in console we use in case it's missing
  window.console = window.console || {
    log: function log() {},
    error: function error() {}
  };
  /**
   * The jQuery plugin initializer.
   * @function jQuery.fn.footable
   * @param {(object|FooTable.Defaults)} [options] - The options to initialize the plugin with.
   * @param {function} [ready] - A callback function to execute for each initialized plugin.
   * @returns {jQuery}
   */

  $.fn.footable = function (options, ready) {
    options = options || {}; // make sure we only work with tables

    return this.filter('table').each(function (i, tbl) {
      F.init(tbl, options, ready);
    });
  };

  var debug_defaults = {
    events: []
  };
  F.__debug__ = JSON.parse(localStorage.getItem('footable_debug')) || false;
  F.__debug_options__ = JSON.parse(localStorage.getItem('footable_debug_options')) || debug_defaults;
  /**
   * Gets or sets the internal debug variable which enables some additional logging to the console.
   * When enabled this value is stored in the localStorage so it can persist across page reloads.
   * @param {boolean} value - Whether or not to enable additional logging.
   * @param {object} [options] - Any debug specific options.
   * @returns {(boolean|undefined)}
   */

  F.debug = function (value, options) {
    if (!F.is.boolean(value)) return F.__debug__;
    F.__debug__ = value;

    if (F.__debug__) {
      localStorage.setItem('footable_debug', JSON.stringify(F.__debug__));
      F.__debug_options__ = $.extend(true, {}, debug_defaults, options || {});

      if (F.is.hash(options)) {
        localStorage.setItem('footable_debug_options', JSON.stringify(F.__debug_options__));
      }
    } else {
      localStorage.removeItem('footable_debug');
      localStorage.removeItem('footable_debug_options');
    }
  };
  /**
   * Gets the FooTable instance of the supplied table if one exists.
   * @param {(jQuery|jQuery.selector|HTMLTableElement)} table - The jQuery table object, selector or the HTMLTableElement to retrieve FooTable from.
   * @returns {(FooTable.Table|undefined)}
   */


  F.get = function (table) {
    return $(table).first().data('__FooTable__');
  };
  /**
   * Initializes a new instance of FooTable on the supplied table.
   * @param {(jQuery|jQuery.selector|HTMLTableElement)} table - The jQuery table object, selector or the HTMLTableElement to initialize FooTable on.
   * @param {object} options - The options to initialize FooTable with.
   * @param {function} [ready] - A callback function to execute once the plugin is initialized.
   * @returns {FooTable.Table}
   */


  F.init = function (table, options, ready) {
    var ft = F.get(table);
    if (ft instanceof F.Table) ft.destroy();
    return new F.Table(table, options, ready);
  };
  /**
   * Gets the FooTable.Row instance for the supplied element.
   * @param {(jQuery|jQuery.selector|HTMLTableElement)} element - A jQuery object, selector or the HTMLElement of an element to retrieve the FooTable.Row for.
   * @returns {FooTable.Row}
   */


  F.getRow = function (element) {
    // to get the FooTable.Row object simply walk up the DOM, find the TR and grab the __FooTableRow__ data value
    var $row = $(element).closest('tr'); // if this is a detail row get the previous row in the table to get the main TR element

    if ($row.hasClass('footable-detail-row')) {
      $row = $row.prev();
    } // grab the row object


    return $row.data('__FooTableRow__');
  }; // The below are external type definitions mainly used as pointers to jQuery docs for important information

  /**
   * jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API
   * that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.
   * @name jQuery
   * @constructor
   * @returns {jQuery}
   * @see {@link http://api.jquery.com/}
   */

  /**
   * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, and state) to prevent users from changing the state of the Deferred.
   * @typedef {object} jQuery.Promise
   * @see {@link http://api.jquery.com/Types/#Promise}
   */

  /**
   * As of jQuery 1.5, the Deferred object provides a way to register multiple callbacks into self-managed callback queues, invoke callback queues as appropriate,
   * and relay the success or failure state of any synchronous or asynchronous function.
   * @typedef {object} jQuery.Deferred
   * @see {@link http://api.jquery.com/Types/#Deferred}
   */

  /**
   * jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler. Most properties from
   * the original event are copied over and normalized to the new event object.
   * @typedef {object} jQuery.Event
   * @see {@link http://api.jquery.com/category/events/event-object/}
   */

  /**
   * Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.
   * @memberof jQuery
   * @function when
   * @param {...jQuery.Deferred} deferreds - Any number of deferred objects to wait for.
   * @returns {jQuery.Promise}
   * @see {@link http://api.jquery.com/jQuery.when/}
   */

  /**
   * The jQuery.fn namespace used to register plugins with jQuery.
   * @memberof jQuery
   * @namespace fn
   * @see {@link http://learn.jquery.com/plugins/basic-plugin-creation/}
   */

})(jQuery,
/**
 * The core FooTable namespace containing all the plugin code.
 * @namespace
 */
FooTable = window.FooTable || {});

(function (F) {
  var returnTrue = function returnTrue() {
    return true;
  };
  /**
   * This namespace contains commonly used array utility methods.
   * @namespace {object} FooTable.arr
   */


  F.arr = {};
  /**
   * Iterates over each item in the supplied array and performs the supplied function passing in the current item as the first argument.
   * @memberof FooTable.arr
   * @function each
   * @param {Array} array - The array to iterate
   * @param {function} func - The function to execute for each item. The first argument supplied to this function is the current item and the second is the current index.
   */

  F.arr.each = function (array, func) {
    if (!F.is.array(array) || !F.is.fn(func)) return;

    for (var i = 0, len = array.length; i < len; i++) {
      if (func(array[i], i) === false) break;
    }
  };
  /**
   * Get all items in the supplied array that optionally matches the supplied where function. If no items are found an empty array is returned.
   * @memberof FooTable.arr
   * @function get
   * @param {Array} array - The array to get items from.
   * @param {function} where - This function must return a boolean value, true includes the item in the result array.
   * @returns {Array}
   */


  F.arr.get = function (array, where) {
    var result = [];
    if (!F.is.array(array)) return result;
    if (!F.is.fn(where)) return array;

    for (var i = 0, len = array.length; i < len; i++) {
      if (where(array[i], i)) result.push(array[i]);
    }

    return result;
  };
  /**
   * Get a boolean value indicating if any item exists in the supplied array that optionally matches the supplied where function.
   * @memberof FooTable.arr
   * @function any
   * @param {Array} array - The array to check.
   * @param {function} [where] - [Optional] This function must return a boolean value, true indicates that the current item is a valid match.
   * @returns {boolean}
   */


  F.arr.any = function (array, where) {
    if (!F.is.array(array)) return false;
    where = F.is.fn(where) ? where : returnTrue;

    for (var i = 0, len = array.length; i < len; i++) {
      if (where(array[i], i)) return true;
    }

    return false;
  };
  /**
   * Checks if the supplied value exists in the array.
   * @memberof FooTable.arr
   * @function contains
   * @param {Array} array - The array to check.
   * @param {*} value - The value to check for.
   * @returns {boolean}
   */


  F.arr.contains = function (array, value) {
    if (!F.is.array(array) || F.is.undef(value)) return false;

    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] == value) return true;
    }

    return false;
  };
  /**
   * Get the first item in the supplied array that optionally matches the supplied where function. If no item is found null is returned.
   * @memberof FooTable.arr
   * @function first
   * @param {Array} array - The array to get the item from.
   * @param {function} [where] - [Optional] This function must return a boolean value, true indicates that the current item can be returned.
   * @returns {(*|null)}
   */


  F.arr.first = function (array, where) {
    if (!F.is.array(array)) return null;
    where = F.is.fn(where) ? where : returnTrue;

    for (var i = 0, len = array.length; i < len; i++) {
      if (where(array[i], i)) return array[i];
    }

    return null;
  };
  /**
   * Creates a new array from the results of the supplied getter function. If no items are found an empty array is returned, to exclude an item from the results return null.
   * @memberof FooTable.arr
   * @function map
   * @param {Array} array - The array to iterate.
   * @param {function} getter - This function must return either a new value or null.
   * The first argument is the result being returned at this point in the iteration. The second argument is the current item being iterated.
   * @returns {(*|null)}
   */


  F.arr.map = function (array, getter) {
    var result = [],
        returned = null;
    if (!F.is.array(array) || !F.is.fn(getter)) return result;

    for (var i = 0, len = array.length; i < len; i++) {
      if ((returned = getter(array[i], i)) != null) result.push(returned);
    }

    return result;
  };
  /**
   * Removes items from the array matching the supplied where function. All removed items are returned in a new array.
   * @memberof FooTable.arr
   * @function remove
   * @param {Array} array - The array to iterate and remove items from.
   * @param {function} where - This function must return a boolean value, true includes the item in the result array.
   * @returns {*}
   */


  F.arr.remove = function (array, where) {
    var remove = [],
        removed = [];
    if (!F.is.array(array) || !F.is.fn(where)) return removed;
    var i = 0,
        len = array.length;

    for (; i < len; i++) {
      if (where(array[i], i, removed)) {
        remove.push(i);
        removed.push(array[i]);
      }
    } // sort the indexes to be removed from largest to smallest


    remove.sort(function (a, b) {
      return b - a;
    });
    i = 0;
    len = remove.length;

    for (; i < len; i++) {
      var index = remove[i] - i;
      array.splice(index, 1);
    }

    return removed;
  };
  /**
   * Deletes a single item from the array. The item if removed is returned.
   * @memberof FooTable.arr
   * @function delete
   * @param {Array} array - The array to iterate and delete the item from.
   * @param {*} item - The item to find and delete.
   * @returns {(*|null)}
   */


  F.arr.delete = function (array, item) {
    var remove = -1,
        removed = null;
    if (!F.is.array(array) || F.is.undef(item)) return removed;
    var i = 0,
        len = array.length;

    for (; i < len; i++) {
      if (array[i] == item) {
        remove = i;
        removed = array[i];
        break;
      }
    }

    if (remove != -1) array.splice(remove, 1);
    return removed;
  };
  /**
   * Replaces a single item in the array with a new one.
   * @memberof FooTable.arr
   * @function replace
   * @param {Array} array - The array to iterate and replace the item in.
   * @param {*} oldItem - The item to be replaced.
   * @param {*} newItem - The item to be inserted.
   */


  F.arr.replace = function (array, oldItem, newItem) {
    var index = array.indexOf(oldItem);
    if (index !== -1) array[index] = newItem;
  };
})(FooTable);

(function (F) {
  /**
   * This namespace contains commonly used 'is' type methods that return boolean values.
   * @namespace FooTable.is
   */
  F.is = {};
  /**
   * Checks if the type of the value is the same as that supplied.
   * @memberof FooTable.is
   * @function type
   * @param {*} value - The value to check the type of.
   * @param {string} type - The type to check for.
   * @returns {boolean}
   */

  F.is.type = function (value, type) {
    return _typeof(value) === type;
  };
  /**
   * Checks if the value is defined.
   * @memberof FooTable.is
   * @function defined
   * @param {*} value - The value to check is defined.
   * @returns {boolean}
   */


  F.is.defined = function (value) {
    return typeof value !== 'undefined';
  };
  /**
   * Checks if the value is undefined.
   * @memberof FooTable.is
   * @function undef
   * @param {*} value - The value to check is undefined.
   * @returns {boolean}
   */


  F.is.undef = function (value) {
    return typeof value === 'undefined';
  };
  /**
   * Checks if the value is an array.
   * @memberof FooTable.is
   * @function array
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.array = function (value) {
    return '[object Array]' === Object.prototype.toString.call(value);
  };
  /**
   * Checks if the value is a date.
   * @memberof FooTable.is
   * @function date
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.date = function (value) {
    return '[object Date]' === Object.prototype.toString.call(value) && !isNaN(value.getTime());
  };
  /**
   * Checks if the value is a boolean.
   * @memberof FooTable.is
   * @function boolean
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.boolean = function (value) {
    return '[object Boolean]' === Object.prototype.toString.call(value);
  };
  /**
   * Checks if the value is a string.
   * @memberof FooTable.is
   * @function string
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.string = function (value) {
    return '[object String]' === Object.prototype.toString.call(value);
  };
  /**
   * Checks if the value is a number.
   * @memberof FooTable.is
   * @function number
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.number = function (value) {
    return '[object Number]' === Object.prototype.toString.call(value) && !isNaN(value);
  };
  /**
   * Checks if the value is a function.
   * @memberof FooTable.is
   * @function fn
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.fn = function (value) {
    return F.is.defined(window) && value === window.alert || '[object Function]' === Object.prototype.toString.call(value);
  };
  /**
   * Checks if the value is an error.
   * @memberof FooTable.is
   * @function error
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.error = function (value) {
    return '[object Error]' === Object.prototype.toString.call(value);
  };
  /**
   * Checks if the value is an object.
   * @memberof FooTable.is
   * @function object
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.object = function (value) {
    return '[object Object]' === Object.prototype.toString.call(value);
  };
  /**
   * Checks if the value is a hash.
   * @memberof FooTable.is
   * @function hash
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.hash = function (value) {
    return F.is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;
  };
  /**
   * Checks if the supplied object is an HTMLElement
   * @memberof FooTable.is
   * @function element
   * @param {object} obj - The object to check.
   * @returns {boolean}
   */


  F.is.element = function (obj) {
    return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === 'object' ? obj instanceof HTMLElement : obj && _typeof(obj) === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string';
  };
  /**
   * This is a simple check to determine if an object is a jQuery promise object. It simply checks the object has a "then" and "promise" function defined.
   * The promise object is created as an object literal inside of jQuery.Deferred.
   * It has no prototype, nor any other truly unique properties that could be used to distinguish it.
   * This method should be a little more accurate than the internal jQuery one that simply checks for a "promise" method.
   * @memberof FooTable.is
   * @function promise
   * @param {object} obj - The object to check.
   * @returns {boolean}
   */


  F.is.promise = function (obj) {
    return F.is.object(obj) && F.is.fn(obj.then) && F.is.fn(obj.promise);
  };
  /**
   * Checks if the supplied object is an instance of a jQuery object.
   * @memberof FooTable.is
   * @function jq
   * @param {object} obj - The object to check.
   * @returns {boolean}
   */


  F.is.jq = function (obj) {
    return F.is.defined(window.jQuery) && obj instanceof jQuery && obj.length > 0;
  };
  /**
   * Checks if the supplied object is a moment.js date object.
   * @memberof FooTable.is
   * @function moment
   * @param {object} obj - The object to check.
   * @returns {boolean}
   */


  F.is.moment = function (obj) {
    return F.is.defined(window.moment) && F.is.object(obj) && F.is.boolean(obj._isAMomentObject);
  };
  /**
   * Checks if the supplied value is an object and if it is empty.
   * @memberof FooTable.is
   * @function emptyObject
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.emptyObject = function (value) {
    if (!F.is.hash(value)) return false;

    for (var prop in value) {
      if (value.hasOwnProperty(prop)) return false;
    }

    return true;
  };
  /**
   * Checks if the supplied value is an array and if it is empty.
   * @memberof FooTable.is
   * @function emptyArray
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.emptyArray = function (value) {
    return F.is.array(value) ? value.length === 0 : true;
  };
  /**
   * Checks if the supplied value is a string and if it is empty.
   * @memberof FooTable.is
   * @function emptyString
   * @param {*} value - The value to check.
   * @returns {boolean}
   */


  F.is.emptyString = function (value) {
    return F.is.string(value) ? value.length === 0 : true;
  };
})(FooTable);

(function (F) {
  /**
   * This namespace contains commonly used string utility methods.
   * @namespace FooTable.str
   */
  F.str = {};
  /**
   * Checks if the supplied string contains the given substring.
   * @memberof FooTable.str
   * @function contains
   * @param {string} str - The string to check.
   * @param {string} contains - The string to check for.
   * @param {boolean} [ignoreCase=false] - Whether or not to ignore casing when performing the check.
   * @returns {boolean}
   */

  F.str.contains = function (str, contains, ignoreCase) {
    if (F.is.emptyString(str) || F.is.emptyString(contains)) return false;
    return contains.length <= str.length && (ignoreCase ? str.toUpperCase().indexOf(contains.toUpperCase()) : str.indexOf(contains)) !== -1;
  };
  /**
   * Checks if the supplied string contains the exact given substring.
   * @memberof FooTable.str
   * @function contains
   * @param {string} str - The string to check.
   * @param {string} contains - The string to check for.
   * @param {boolean} [ignoreCase=false] - Whether or not to ignore casing when performing the check.
   * @returns {boolean}
   */


  F.str.containsExact = function (str, contains, ignoreCase) {
    if (F.is.emptyString(str) || F.is.emptyString(contains) || contains.length > str.length) return false;
    return new RegExp('\\b' + F.str.escapeRegExp(contains) + '\\b', ignoreCase ? 'i' : '').test(str);
  };
  /**
   * Checks if the supplied string contains the given word.
   * @memberof FooTable.str
   * @function containsWord
   * @param {string} str - The string to check.
   * @param {string} word - The word to check for.
   * @param {boolean} [ignoreCase=false] - Whether or not to ignore casing when performing the check.
   * @returns {boolean}
   */


  F.str.containsWord = function (str, word, ignoreCase) {
    if (F.is.emptyString(str) || F.is.emptyString(word) || str.length < word.length) return false;
    var parts = str.split(/\W/);

    for (var i = 0, len = parts.length; i < len; i++) {
      if (ignoreCase ? parts[i].toUpperCase() == word.toUpperCase() : parts[i] == word) return true;
    }

    return false;
  };
  /**
   * Returns the remainder of a string split on the first index of the given substring.
   * @memberof FooTable.str
   * @function from
   * @param {string} str - The string to split.
   * @param {string} from - The substring to split on.
   * @returns {string}
   */


  F.str.from = function (str, from) {
    if (F.is.emptyString(str)) return str;
    return F.str.contains(str, from) ? str.substring(str.indexOf(from) + 1) : str;
  };
  /**
   * Checks if a string starts with the supplied prefix.
   * @memberof FooTable.str
   * @function startsWith
   * @param {string} str - The string to check.
   * @param {string} prefix - The prefix to check for.
   * @returns {boolean}
   */


  F.str.startsWith = function (str, prefix) {
    if (F.is.emptyString(str)) return str == prefix;
    return str.slice(0, prefix.length) == prefix;
  };
  /**
   * Takes the supplied string and converts it to camel case.
   * @memberof FooTable.str
   * @function toCamelCase
   * @param {string} str - The string to camel case.
   * @returns {string}
   */


  F.str.toCamelCase = function (str) {
    if (F.is.emptyString(str)) return str;
    if (str.toUpperCase() === str) return str.toLowerCase();
    return str.replace(/^([A-Z])|[-\s_](\w)/g, function (match, p1, p2) {
      if (F.is.string(p2)) return p2.toUpperCase();
      return p1.toLowerCase();
    });
  };
  /**
   * Generates a random string 9 characters long using the optional prefix if supplied.
   * @memberof FooTable.str
   * @function random
   * @param {string} [prefix] - The prefix to append to the 9 random characters.
   * @returns {string}
   */


  F.str.random = function (prefix) {
    prefix = F.is.emptyString(prefix) ? '' : prefix;
    return prefix + Math.random().toString(36).substr(2, 9);
  };
  /**
   * Escapes a string for use in a regular expression.
   * @memberof FooTable.str
   * @function escapeRegExp
   * @param {string} str - The string to escape.
   * @returns {string}
   */


  F.str.escapeRegExp = function (str) {
    if (F.is.emptyString(str)) return str;
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  };
})(FooTable);

(function (F) {
  "use strict";

  if (!Object.create) {
    Object.create = function () {
      var Object = function Object() {};

      return function (prototype) {
        if (arguments.length > 1) throw Error('Second argument not supported');
        if (!F.is.object(prototype)) throw TypeError('Argument must be an object');
        Object.prototype = prototype;
        var result = new Object();
        Object.prototype = null;
        return result;
      };
    }();
  }
  /**
   * This base implementation does nothing except provide access to the {@link FooTable.Class#extend} method.
   * @constructs FooTable.Class
   * @classdesc This class is based off of John Resig's [Simple JavaScript Inheritance]{@link http://ejohn.org/blog/simple-javascript-inheritance} but it has been updated to be ES 5.1
   * compatible by implementing an [Object.create polyfill]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill}
   * for older browsers.
   * @see {@link http://ejohn.org/blog/simple-javascript-inheritance}
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill}
   * @returns {FooTable.Class}
   */


  function Class() {}

  var __extendable__ = /xyz/.test(function () {
    xyz;
  }) ? /\b_super\b/ : /.*/; // this._super() within the context of the new function is a pointer to the original function
  // except if the hook param is specified then the this._super variable is the result of the original function


  Class.__extend__ = function (proto, name, func, original) {
    // to all who venture here, here be dragons!
    proto[name] = F.is.fn(original) && __extendable__.test(func) ? function (name, fn) {
      return function () {
        var tmp, ret;
        tmp = this._super;
        this._super = original;
        ret = fn.apply(this, arguments);
        this._super = tmp;
        return ret;
      };
    }(name, func) : func;
  };
  /**
   * Creates a new class that inherits from this class which in turn allows itself to be extended or if a name and function is supplied extends only that specific function on the class.
   * @param {(object|string)} arg1 - An object containing any new methods/members to implement or the name of the method to extend.
   * @param {function} arg2 - If the first argument is a method name then this is the new function to replace it with.
   * @returns {FooTable.Class} A new class that inherits from the base class.
   * @example <caption>The below shows an example of how to implement inheritance using this method.</caption>
   * var Person = FooTable.Class.extend({
   *   construct: function(isDancing){
   *     this.dancing = isDancing;
   *   },
   *   dance: function(){
   *     return this.dancing;
   *   }
   * });
   *
   * var Ninja = Person.extend({
   *   construct: function(){
   *     this._super( false );
   *   },
   *   dance: function(){
   *     // Call the inherited version of dance()
   *     return this._super();
   *   },
   *   swingSword: function(){
   *     return true;
   *   }
   * });
   *
   * var p = new Person(true);
   * p.dance(); // => true
   *
   * var n = new Ninja();
   * n.dance(); // => false
   * n.swingSword(); // => true
   *
   * // Should all be true
   * p instanceof Person && p instanceof FooTable.Class &&
   * n instanceof Ninja && n instanceof Person && n instanceof FooTable.Class
   */


  Class.extend = function (arg1, arg2) {
    var args = Array.prototype.slice.call(arguments);
    arg1 = args.shift();
    arg2 = args.shift();

    function __extend__(proto, name, func, original) {
      // to all who venture here, here be dragons!
      proto[name] = F.is.fn(original) && __extendable__.test(func) ? function (name, fn, ofn) {
        return function () {
          var tmp, ret;
          tmp = this._super;
          this._super = ofn;
          ret = fn.apply(this, arguments);
          this._super = tmp;
          return ret;
        };
      }(name, func, original) : func;
    }

    if (F.is.hash(arg1)) {
      var proto = Object.create(this.prototype),
          _super = this.prototype;

      for (var name in arg1) {
        if (name === '__ctor__') continue;

        __extend__(proto, name, arg1[name], _super[name]);
      }

      var obj = F.is.fn(proto.__ctor__) ? proto.__ctor__ : function () {
        if (!F.is.fn(this.construct)) throw new SyntaxError('FooTable class objects must be constructed with the "new" keyword.');
        this.construct.apply(this, arguments);
      };
      proto.construct = F.is.fn(proto.construct) ? proto.construct : function () {};
      obj.prototype = proto;
      proto.constructor = obj;
      obj.extend = Class.extend;
      return obj;
    } else if (F.is.string(arg1) && F.is.fn(arg2)) {
      __extend__(this.prototype, arg1, arg2, this.prototype[arg1]);
    }
  };

  F.Class = Class;
  F.ClassFactory = F.Class.extend(
  /** @lends FooTable.ClassFactory */
  {
    /**
     * This is a simple factory for {@link FooTable.Class} objects allowing them to be registered using a friendly name
     * and then new instances can be created using this friendly name.
     * @constructs
     * @extends FooTable.Class
     * @returns {FooTable.ClassFactory}
     * @this FooTable.ClassFactory
     */
    construct: function construct() {
      /**
       * An object containing all registered classes.
       * @type {{}}
       */
      this.registered = {};
    },

    /**
     * Checks if the factory contains a class registered using the supplied name.
     * @instance
     * @param {string} name - The name of the class to check.
     * @returns {boolean}
     * @this FooTable.ClassFactory
     */
    contains: function contains(name) {
      return F.is.defined(this.registered[name]);
    },

    /**
     * Gets an array of all registered names.
     * @instance
     * @returns {Array.<string>}
     * @this FooTable.ClassFactory
     */
    names: function names() {
      var names = [],
          name;

      for (name in this.registered) {
        if (!this.registered.hasOwnProperty(name)) continue;
        names.push(name);
      }

      return names;
    },

    /**
     * Registers a class object using the supplied friendly name and priority. The priority is only taken into account when loading all registered classes
     * using the {@link FooTable.ClassFactory#load} method.
     * @instance
     * @param {string} name - The friendly name of the class.
     * @param {function} klass - The class to register.
     * @param {number} priority - This determines the order that the class is created when using the {@link FooTable.ClassFactory#load} method, higher values are loaded first.
     * @this FooTable.ClassFactory
     */
    register: function register(name, klass, priority) {
      if (!F.is.string(name) || !F.is.fn(klass)) return;
      var current = this.registered[name];
      this.registered[name] = {
        name: name,
        klass: klass,
        priority: F.is.number(priority) ? priority : F.is.defined(current) ? current.priority : 0
      };
    },

    /**
     * Creates new instances of all registered classes using there priority and the supplied arguments to return them in an array.
     * @instance
     * @param {object} subs - An object containing classes to substitute on load.
     * @param {*} arg1 - The first argument to supply when creating new instances of all registered classes.
     * @param {*} [argN...] - Any number of additional arguments to supply when creating new instances of all registered classes.
     * @returns {Array.<FooTable.Class>}
     * @this FooTable.ClassFactory
     */
    load: function load(subs, arg1, argN) {
      var self = this,
          args = Array.prototype.slice.call(arguments),
          reg = [],
          loaded = [],
          name,
          klass;
      subs = args.shift() || {};

      for (name in self.registered) {
        if (!self.registered.hasOwnProperty(name)) continue;
        var component = self.registered[name];

        if (subs.hasOwnProperty(name)) {
          klass = subs[name];
          if (F.is.string(klass)) klass = F.getFnPointer(subs[name]);

          if (F.is.fn(klass)) {
            component = {
              name: name,
              klass: klass,
              priority: self.registered[name].priority
            };
          }
        }

        reg.push(component);
      }

      for (name in subs) {
        if (!subs.hasOwnProperty(name) || self.registered.hasOwnProperty(name)) continue;
        klass = subs[name];
        if (F.is.string(klass)) klass = F.getFnPointer(subs[name]);

        if (F.is.fn(klass)) {
          reg.push({
            name: name,
            klass: klass,
            priority: 0
          });
        }
      }

      reg.sort(function (a, b) {
        return b.priority - a.priority;
      });
      F.arr.each(reg, function (r) {
        if (F.is.fn(r.klass)) {
          loaded.push(self._make(r.klass, args));
        }
      });
      return loaded;
    },

    /**
     * Create a new instance of a single class using the supplied name and arguments.
     * @instance
     * @param {string} name - The name of the class to create.
     * @param {*} arg1 - The first argument to supply to the new instance.
     * @param {*} [argN...] - Any number of additional arguments to supply to the new instance.
     * @returns {FooTable.Class}
     * @this FooTable.ClassFactory
     */
    make: function make(name, arg1, argN) {
      var self = this,
          args = Array.prototype.slice.call(arguments),
          reg;
      name = args.shift();
      reg = self.registered[name];

      if (F.is.fn(reg.klass)) {
        return self._make(reg.klass, args);
      }

      return null;
    },

    /**
     * This in effect lets us use the "apply" method on a function using the "new" keyword.
     * @instance
     * @private
     * @param {function} klass
     * @param args
     * @returns {FooTable.Class}
     * @this FooTable.ClassFactory
     */
    _make: function _make(klass, args) {
      function Class() {
        return klass.apply(this, args);
      }

      Class.prototype = klass.prototype;
      return new Class();
    }
  });
})(FooTable);

(function ($, F) {
  /**
   * Converts the supplied cssText string into JSON object.
   * @param {string} cssText - The cssText to convert to a JSON object.
   * @returns {object}
   */
  F.css2json = function (cssText) {
    if (F.is.emptyString(cssText)) return {};
    var json = {},
        props = cssText.split(';'),
        pair,
        key,
        value;

    for (var i = 0, i_len = props.length; i < i_len; i++) {
      if (F.is.emptyString(props[i])) continue;
      pair = props[i].split(':');
      if (F.is.emptyString(pair[0]) || F.is.emptyString(pair[1])) continue;
      key = F.str.toCamelCase($.trim(pair[0]));
      value = $.trim(pair[1]);
      json[key] = value;
    }

    return json;
  };
  /**
   * Attempts to retrieve a function pointer using the given name.
   * @param {string} functionName - The name of the function to fetch a pointer to.
   * @returns {(function|object|null)}
   */


  F.getFnPointer = function (functionName) {
    if (F.is.emptyString(functionName)) return null;
    var pointer = window,
        parts = functionName.split('.');
    F.arr.each(parts, function (part) {
      if (pointer[part]) pointer = pointer[part];
    });
    return F.is.fn(pointer) ? pointer : null;
  };
  /**
   * Checks the value for function properties such as the {@link FooTable.Column#formatter} option which could also be specified using just the name
   * and attempts to return the correct function pointer or null if none was found matching the value.
   * @param {FooTable.Class} self - The class to use as the 'this' keyword within the context of the function.
   * @param {(function|string)} value - The actual function or the name of the function for the property.
   * @param {function} [def] - A default function to return if none is found.
   * @returns {(function|null)}
   */


  F.checkFnValue = function (self, value, def) {
    def = F.is.fn(def) ? def : null;

    function wrap(t, fn, d) {
      if (!F.is.fn(fn)) return d;
      return function () {
        return fn.apply(t, arguments);
      };
    }

    return F.is.fn(value) ? wrap(self, value, def) : F.is.type(value, 'string') ? wrap(self, F.getFnPointer(value), def) : def;
  };
})(jQuery, FooTable);

(function ($, F) {
  F.Cell = F.Class.extend(
  /** @lends FooTable.Cell */
  {
    /**
     * The cell class containing all the properties for cells.
     * @constructs
     * @extends FooTable.Class
     * @param {FooTable.Table} table -  The root {@link FooTable.Table} this cell belongs to.
     * @param {FooTable.Row} row - The parent {@link FooTable.Row} this cell belongs to.
     * @param {FooTable.Column} column - The {@link FooTable.Column} this cell falls under.
     * @param {(*|HTMLElement|jQuery)} valueOrElement - Either the value or the element for the cell.
     * @returns {FooTable.Cell}
     * @this FooTable.Cell
     */
    construct: function construct(table, row, column, valueOrElement) {
      /**
       * The root {@link FooTable.Table} for the cell.
       * @instance
       * @readonly
       * @type {FooTable.Table}
       */
      this.ft = table;
      /**
       * The parent {@link FooTable.Row} for the cell.
       * @instance
       * @readonly
       * @type {FooTable.Row}
       */

      this.row = row;
      /**
       * The {@link FooTable.Column} this cell falls under.
       * @instance
       * @readonly
       * @type {FooTable.Column}
       */

      this.column = column;
      this.created = false;
      this.define(valueOrElement);
    },

    /**
     * This is supplied either the value or the cell element/jQuery object if it exists.
     * If supplied the element we need set the $el property and parse the value from it.
     * @instance
     * @protected
     * @param {(*|jQuery)} valueOrElement - The value or element to define the cell.
     * @this FooTable.Cell
     */
    define: function define(valueOrElement) {
      /**
       * The jQuery table cell object this instance wraps.
       * @instance
       * @type {jQuery}
       */
      this.$el = F.is.element(valueOrElement) || F.is.jq(valueOrElement) ? $(valueOrElement) : null;
      /**
       * The jQuery row object that represents this cell in the details table.
       * @type {jQuery}
       */

      this.$detail = null;
      var hasOptions = F.is.hash(valueOrElement) && F.is.hash(valueOrElement.options) && F.is.defined(valueOrElement.value);
      /**
       * The value of the cell.
       * @instance
       * @type {*}
       */

      this.value = this.column.parser.call(this.column, F.is.jq(this.$el) ? this.$el : hasOptions ? valueOrElement.value : valueOrElement, this.ft.o);
      /**
       * Contains any options for the cell. These are the options supplied through the plugin constructor as part of the row object itself.
       * @type {object}
       */

      this.o = $.extend(true, {
        classes: null,
        style: null
      }, hasOptions ? valueOrElement.options : {});
      /**
       * An array of CSS classes for the cell.
       * @instance
       * @protected
       * @type {Array.<string>}
       */

      this.classes = F.is.jq(this.$el) && this.$el.attr('class') ? this.$el.attr('class').match(/\S+/g) : F.is.array(this.o.classes) ? this.o.classes : F.is.string(this.o.classes) ? this.o.classes.match(/\S+/g) : [];
      /**
       * The inline styles for the cell.
       * @instance
       * @protected
       * @type {object}
       */

      this.style = F.is.jq(this.$el) && this.$el.attr('style') ? F.css2json(this.$el.attr('style')) : F.is.hash(this.o.style) ? this.o.style : F.is.string(this.o.style) ? F.css2json(this.o.style) : {};
    },

    /**
     * After the cell has been defined this ensures that the $el and #detail properties are jQuery objects by either creating or updating them.
     * @instance
     * @protected
     * @this FooTable.Cell
     */
    $create: function $create() {
      if (this.created) return;
      (this.$el = F.is.jq(this.$el) ? this.$el : $('<td/>')).data('value', this.value).contents().detach().end().append(this.format(this.value));

      this._setClasses(this.$el);

      this._setStyle(this.$el);

      this.$detail = $('<tr/>').addClass(this.row.classes.join(' ')).data('__FooTableCell__', this).append($('<th/>')).append($('<td/>'));
      this.created = true;
    },

    /**
     * Collapses this cell and displays it in the details row.
     * @instance
     * @protected
     */
    collapse: function collapse() {
      if (!this.created) return;
      this.$detail.children('th').html(this.column.title);
      this.$el.clone().attr('id', this.$el.attr('id') ? this.$el.attr('id') + '-detail' : undefined).css('display', 'table-cell').html('').append(this.$el.contents().detach()).replaceAll(this.$detail.children('td').first());
      if (!F.is.jq(this.$detail.parent())) this.$detail.appendTo(this.row.$details.find('.footable-details > tbody'));
    },

    /**
     * Restores this cell from a detail row back into the normal row.
     * @instance
     * @protected
     */
    restore: function restore() {
      if (!this.created) return;

      if (F.is.jq(this.$detail.parent())) {
        var $cell = this.$detail.children('td').first();
        this.$el.attr('class', $cell.attr('class')).attr('style', $cell.attr('style')).css('display', this.column.hidden || !this.column.visible ? 'none' : 'table-cell').append($cell.contents().detach());
      }

      this.$detail.detach();
    },

    /**
     * Helper method to call this cell's column parser function supplying the required parameters.
     * @instance
     * @protected
     * @returns {*}
     * @see FooTable.Column#parser
     * @this FooTable.Cell
     */
    parse: function parse() {
      return this.column.parser.call(this.column, this.$el, this.ft.o);
    },

    /**
     * Helper method to call this cell's column formatter function using the supplied value and any additional required parameters.
     * @instance
     * @protected
     * @param {*} value - The value to format.
     * @returns {(string|HTMLElement|jQuery)}
     * @see FooTable.Column#formatter
     * @this FooTable.Cell
     */
    format: function format(value) {
      return this.column.formatter.call(this.column, value, this.ft.o);
    },

    /**
     * Allows easy access to getting or setting the cell's value. If the value is set all associated properties are also updated along with the actual element.
     * Using this method also allows us to supply an object containing options and the value for the cell.
     * @instance
     * @param {*} [value] - The value to set for the cell. If not supplied the current value of the cell is returned.
     * @param {boolean} [redraw=true] - Whether or not to redraw the row once the value has been set.
     * @returns {(*|undefined)}
     * @this FooTable.Cell
     */
    val: function val(value, redraw) {
      if (F.is.undef(value)) {
        // get
        return this.value;
      } // set


      var self = this,
          hasOptions = F.is.hash(value) && F.is.hash(value.options) && F.is.defined(value.value);
      this.o = $.extend(true, {
        classes: self.classes,
        style: self.style
      }, hasOptions ? value.options : {});
      this.value = hasOptions ? value.value : value;
      this.classes = F.is.array(this.o.classes) ? this.o.classes : F.is.string(this.o.classes) ? this.o.classes.match(/\S+/g) : [];
      this.style = F.is.hash(this.o.style) ? this.o.style : F.is.string(this.o.style) ? F.css2json(this.o.style) : {};

      if (this.created) {
        this.$el.data('value', this.value).empty();
        var $detail = this.$detail.children('td').first().empty(),
            $target = F.is.jq(this.$detail.parent()) ? $detail : this.$el;
        $target.append(this.format(this.value));

        this._setClasses($target);

        this._setStyle($target);

        if (F.is.boolean(redraw) ? redraw : true) this.row.draw();
      }
    },
    _setClasses: function _setClasses($el) {
      var hasColClasses = !F.is.emptyArray(this.column.classes),
          hasClasses = !F.is.emptyArray(this.classes),
          classes = null;
      $el.removeAttr('class');
      if (!hasColClasses && !hasClasses) return;

      if (hasColClasses && hasClasses) {
        classes = this.classes.concat(this.column.classes).join(' ');
      } else if (hasColClasses) {
        classes = this.column.classes.join(' ');
      } else if (hasClasses) {
        classes = this.classes.join(' ');
      }

      if (!F.is.emptyString(classes)) {
        $el.addClass(classes);
      }
    },
    _setStyle: function _setStyle($el) {
      var hasColStyle = !F.is.emptyObject(this.column.style),
          hasStyle = !F.is.emptyObject(this.style),
          style = null;
      $el.removeAttr('style');
      if (!hasColStyle && !hasStyle) return;

      if (hasColStyle && hasStyle) {
        style = $.extend({}, this.column.style, this.style);
      } else if (hasColStyle) {
        style = this.column.style;
      } else if (hasStyle) {
        style = this.style;
      }

      if (F.is.hash(style)) {
        $el.css(style);
      }
    }
  });
})(jQuery, FooTable);

(function ($, F) {
  F.Column = F.Class.extend(
  /** @lends FooTable.Column */
  {
    /**
     * The column class containing all the properties for columns. All members marked as "readonly" should not be used when defining {@link FooTable.Defaults#columns}.
     * @constructs
     * @extends FooTable.Class
     * @param {FooTable.Table} instance -  The parent {@link FooTable.Table} this component belongs to.
     * @param {object} definition - An object containing all the properties to set for the column.
     * @param {string} [type] - The type of column, "text" by default.
     * @returns {FooTable.Column}
     * @this FooTable.Column
     */
    construct: function construct(instance, definition, type) {
      /**
       * The root {@link FooTable.Table} for the column.
       * @instance
       * @readonly
       * @type {FooTable.Table}
       */
      this.ft = instance;
      /**
       * The type of data displayed by the column.
       * @instance
       * @readonly
       * @type {string}
       */

      this.type = F.is.emptyString(type) ? 'text' : type;
      /**
       * Whether or not the column was parsed from a standard table row containing data instead of from an actual header row.
       * @instance
       * @readonly
       * @type {boolean}
       */

      this.virtual = F.is.boolean(definition.virtual) ? definition.virtual : false;
      /**
       * The jQuery cell object for the column header.
       * @instance
       * @readonly
       * @type {jQuery}
       */

      this.$el = F.is.jq(definition.$el) ? definition.$el : null;
      /**
       * The index of the column in the table. This is set by the plugin during initialization.
       * @instance
       * @readonly
       * @type {number}
       * @default -1
       */

      this.index = F.is.number(definition.index) ? definition.index : -1;
      this.define(definition);
      this.$create();
    },

    /**
     * This is supplied the column definition in the form of a simple object created by merging options supplied via the plugin constructor with those parsed from the DOM.
     * @instance
     * @protected
     * @param {object} definition - The object containing the column definition.
     * @this FooTable.Column
     */
    define: function define(definition) {
      /**
       * Whether or not this column is hidden from view and appears in the details row.
       * @type {boolean}
       * @default false
       */
      this.hidden = F.is.boolean(definition.hidden) ? definition.hidden : false;
      /**
       * Whether or not this column is completely hidden from view and will not appear in the details row.
       * @type {boolean}
       * @default true
       */

      this.visible = F.is.boolean(definition.visible) ? definition.visible : true;
      /**
       * The name of the column. This name must correspond to the property name of the JSON row data.
       * @type {string}
       * @default null
       */

      this.name = F.is.string(definition.name) ? definition.name : null;
      if (this.name == null) this.name = 'col' + (definition.index + 1);
      /**
       * The title to display in the column header, this can be HTML.
       * @type {string}
       * @default null
       */

      this.title = F.is.string(definition.title) ? definition.title : null;
      if (!this.virtual && this.title == null && F.is.jq(this.$el)) this.title = this.$el.html();
      if (this.title == null) this.title = 'Column ' + (definition.index + 1);
      /**
       * The styles to apply to all cells in this column.
       * @type {object}
       */

      this.style = F.is.hash(definition.style) ? definition.style : F.is.string(definition.style) ? F.css2json(definition.style) : {};
      /**
       * The classes to apply to all cells in this column.
       * @type {Array.<string>}
       */

      this.classes = F.is.array(definition.classes) ? definition.classes : F.is.string(definition.classes) ? definition.classes.match(/\S+/g) : []; // override any default functions ensuring when they are executed "this" within the context of the function points to the instance of this object.

      this.parser = F.checkFnValue(this, definition.parser, this.parser);
      this.formatter = F.checkFnValue(this, definition.formatter, this.formatter);
    },

    /**
     * After the column has been defined this ensures that the $el property is a jQuery object by either creating or updating the current value.
     * @instance
     * @protected
     * @this FooTable.Column
     */
    $create: function $create() {
      (this.$el = !this.virtual && F.is.jq(this.$el) ? this.$el : $('<th/>')).html(this.title).addClass(this.classes.join(' ')).css(this.style);
    },

    /**
     * This is supplied either the cell value or jQuery object to parse. Any value can be returned from this method and will be provided to the {@link FooTable.Column#format} function
     * to generate the cell contents.
     * @instance
     * @protected
     * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
     * @returns {string}
     * @this FooTable.Column
     */
    parser: function parser(valueOrElement) {
      if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) {
        // use jQuery to get the value
        var data = $(valueOrElement).data('value');
        return F.is.defined(data) ? data : $(valueOrElement).html();
      }

      if (F.is.defined(valueOrElement) && valueOrElement != null) return valueOrElement + ''; // use the native toString of the value

      return null; // otherwise we have no value so return null
    },

    /**
     * This is supplied the value retrieved from the {@link FooTable.Column#parse} function and must return a string, HTMLElement or jQuery object.
     * The return value from this function is what is displayed in the cell in the table.
     * @instance
     * @protected
     * @param {string} value - The value to format.
     * @returns {(string|HTMLElement|jQuery)}
     * @this FooTable.Column
     */
    formatter: function formatter(value) {
      return value == null ? '' : value;
    },

    /**
     * Creates a cell for this column from the supplied {@link FooTable.Row} object. This allows different column types to return different types of cells.
     * @instance
     * @protected
     * @param {FooTable.Row} row - The row to create the cell from.
     * @returns {FooTable.Cell}
     * @this FooTable.Column
     */
    createCell: function createCell(row) {
      var element = F.is.jq(row.$el) ? row.$el.children('td,th').get(this.index) : null,
          data = F.is.hash(row.value) ? row.value[this.name] : null;
      return new F.Cell(this.ft, row, this, element || data);
    }
  });
  F.columns = new F.ClassFactory();
  F.columns.register('text', F.Column);
})(jQuery, FooTable);

(function ($, F) {
  F.Component = F.Class.extend(
  /** @lends FooTable.Component */
  {
    /**
     * The base class for all FooTable components.
     * @constructs
     * @extends FooTable.Class
     * @param {FooTable.Table} instance - The parent {@link FooTable.Table} object for the component.
     * @param {boolean} enabled - Whether or not the component is enabled.
     * @throws {TypeError} The instance parameter must be an instance of {@link FooTable.Table}.
     * @returns {FooTable.Component}
     */
    construct: function construct(instance, enabled) {
      if (!(instance instanceof F.Table)) throw new TypeError('The instance parameter must be an instance of FooTable.Table.');
      /**
       * The parent {@link FooTable.Table} for the component.
       * @type {FooTable.Table}
       */

      this.ft = instance;
      /**
       * Whether or not this component is enabled. Disabled components only have there preinit method called allowing for this value to be overridden.
       * @type {boolean}
       */

      this.enabled = F.is.boolean(enabled) ? enabled : false;
    },

    /**
     * The preinit method is called during the parent {@link FooTable.Table} constructor call.
     * @param {object} data - The jQuery.data() object of the root table.
     * @instance
     * @protected
     * @function
     */
    preinit: function preinit(data) {},

    /**
     * The init method is called during the parent {@link FooTable.Table} constructor call.
     * @instance
     * @protected
     * @function
     */
    init: function init() {},

    /**
     * This method is called from the {@link FooTable.Table#destroy} method.
     * @instance
     * @protected
     * @function
     */
    destroy: function destroy() {},

    /**
     * This method is called from the {@link FooTable.Table#draw} method.
     * @instance
     * @protected
     * @function
     */
    predraw: function predraw() {},

    /**
     * This method is called from the {@link FooTable.Table#draw} method.
     * @instance
     * @protected
     * @function
     */
    draw: function draw() {},

    /**
     * This method is called from the {@link FooTable.Table#draw} method.
     * @instance
     * @protected
     * @function
     */
    postdraw: function postdraw() {}
  });
  F.components = new F.ClassFactory();
})(jQuery, FooTable);

(function ($, F) {
  /**
   * Contains all the available options for the FooTable plugin.
   * @name FooTable.Defaults
   * @function
   * @constructor
   * @returns {FooTable.Defaults}
   */
  F.Defaults = function () {
    /**
     * Whether or not events raised using the {@link FooTable.Table#raise} method are propagated up the DOM. By default this is set to false and all events bubble up the DOM as per usual
     * however the reason for this option is if we have nested tables. If false the parent table would receive all the events raised by it's children and any handlers bound to both the
     * parent and child would be triggered which is not the desired behavior.
     * @type {boolean}
     * @default false
     */
    this.stopPropagation = false;
    /**
     * An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).
     * @type {object.<string, function>}
     * @default NULL
     * @example <caption>This example shows how to pass an object containing the events and handlers.</caption>
     * "on": {
     * 	"click": function(e){
     * 		// bind a custom click event to do something whenever the table is clicked
     * 	},
     * 	"init.ft.table": function(e, ft){
     * 		// bind to the FooTable initialize event to do something
     * 	}
     * }
     */

    this.on = null;
  };
  /**
   * Contains all the default options for the plugin.
   * @type {FooTable.Defaults}
   */


  F.defaults = new F.Defaults();
})(jQuery, FooTable);

(function ($, F) {
  F.Row = F.Class.extend(
  /** @lends FooTable.Row */
  {
    /**
     * The row class containing all the properties for a row and its' cells.
     * @constructs
     * @extends FooTable.Class
     * @param {FooTable.Table} table -  The parent {@link FooTable.Table} this component belongs to.
     * @param {Array.<FooTable.Column>} columns - The array of {@link FooTable.Column} for this row.
     * @param {(*|HTMLElement|jQuery)} dataOrElement - Either the data for the row (create) or the element (parse) for the row.
     * @returns {FooTable.Row}
     */
    construct: function construct(table, columns, dataOrElement) {
      /**
       * The {@link FooTable.Table} for the row.
       * @type {FooTable.Table}
       */
      this.ft = table;
      /**
       * The array of {@link FooTable.Column} for this row.
       * @type {Array.<FooTable.Column>}
       */

      this.columns = columns;
      this.created = false;
      this.define(dataOrElement);
    },

    /**
     * This is supplied either the object containing the values for the row or the row element/jQuery object if it exists.
     * If supplied the element we need to set the $el property and parse the cells from it using the column index.
     * If we have an object we parse the cells from it using the column name.
     * @param {(object|jQuery)} dataOrElement - The row object or element to define the row.
     */
    define: function define(dataOrElement) {
      /**
       * The jQuery table row object this instance wraps.
       * @instance
       * @protected
       * @type {jQuery}
       */
      this.$el = F.is.element(dataOrElement) || F.is.jq(dataOrElement) ? $(dataOrElement) : null;
      /**
       * The jQuery toggle element for the row.
       * @instance
       * @protected
       * @type {jQuery}
       */

      this.$toggle = $('<span/>', {
        'class': 'footable-toggle fooicon fooicon-plus'
      });
      var isObj = F.is.hash(dataOrElement),
          hasOptions = isObj && F.is.hash(dataOrElement.options) && F.is.hash(dataOrElement.value);
      /**
       * The value of the row.
       * @instance
       * @protected
       * @type {Object}
       */

      this.value = isObj ? hasOptions ? dataOrElement.value : dataOrElement : null;
      /**
       * Contains any options for the row.
       * @type {object}
       */

      this.o = $.extend(true, {
        expanded: false,
        classes: null,
        style: null
      }, hasOptions ? dataOrElement.options : {});
      /**
       * Whether or not this row is expanded and will display it's detail row when there are any hidden columns.
       * @instance
       * @protected
       * @type {boolean}
       */

      this.expanded = F.is.jq(this.$el) ? this.$el.data('expanded') || this.o.expanded : this.o.expanded;
      /**
       * An array of CSS classes for the row.
       * @instance
       * @protected
       * @type {Array.<string>}
       */

      this.classes = F.is.jq(this.$el) && this.$el.attr('class') ? this.$el.attr('class').match(/\S+/g) : F.is.array(this.o.classes) ? this.o.classes : F.is.string(this.o.classes) ? this.o.classes.match(/\S+/g) : [];
      /**
       * The inline styles for the row.
       * @instance
       * @protected
       * @type {object}
       */

      this.style = F.is.jq(this.$el) && this.$el.attr('style') ? F.css2json(this.$el.attr('style')) : F.is.hash(this.o.style) ? this.o.style : F.is.string(this.o.style) ? F.css2json(this.o.style) : {};
      /**
       * The cells array. This is populated before the call to the {@link FooTable.Row#$create} method.
       * @instance
       * @type {Array.<FooTable.Cell>}
       */

      this.cells = this.createCells(); // this ensures the value contains the parsed cell values and not the supplied values

      var self = this;
      self.value = {};
      F.arr.each(self.cells, function (cell) {
        self.value[cell.column.name] = cell.val();
      });
    },

    /**
     * After the row has been defined this ensures that the $el property is a jQuery object by either creating or updating the current value.
     * @instance
     * @protected
     * @this FooTable.Row
     */
    $create: function $create() {
      if (this.created) return;
      (this.$el = F.is.jq(this.$el) ? this.$el : $('<tr/>')).data('__FooTableRow__', this);

      this._setClasses(this.$el);

      this._setStyle(this.$el);

      if (this.ft.rows.toggleColumn == 'last') this.$toggle.addClass('last-column');
      this.$details = $('<tr/>', {
        'class': 'footable-detail-row'
      }).append($('<td/>', {
        colspan: this.ft.columns.visibleColspan
      }).append($('<table/>', {
        'class': 'footable-details ' + this.ft.classes.join(' ')
      }).append('<tbody/>')));
      var self = this;
      F.arr.each(self.cells, function (cell) {
        if (!cell.created) cell.$create();
        self.$el.append(cell.$el);
      });
      self.$el.off('click.ft.row').on('click.ft.row', {
        self: self
      }, self._onToggle);
      this.created = true;
    },

    /**
     * This is called during the construct method and uses the current column definitions to create an array of {@link FooTable.Cell} objects for the row.
     * @instance
     * @protected
     * @returns {Array.<FooTable.Cell>}
     * @this FooTable.Row
     */
    createCells: function createCells() {
      var self = this;
      return F.arr.map(self.columns, function (col) {
        return col.createCell(self);
      });
    },

    /**
     * Allows easy access to getting or setting the row's data. If the data is set all associated properties are also updated along with the actual element.
     * Using this method also allows us to supply an object containing options and the data for the row at the same time.
     * @instance
     * @param {object} [data] - The data to set for the row. If not supplied the current value of the row is returned.
     * @param {boolean} [redraw=true] - Whether or not to redraw the row once the value has been set.
     * @returns {(*|undefined)}
     */
    val: function val(data, redraw) {
      var self = this;

      if (!F.is.hash(data)) {
        // get - check the value property and build it from the cells if required.
        if (!F.is.hash(this.value) || F.is.emptyObject(this.value)) {
          this.value = {};
          F.arr.each(this.cells, function (cell) {
            self.value[cell.column.name] = cell.val();
          });
        }

        return this.value;
      } // set


      this.collapse(false);
      var isObj = F.is.hash(data),
          hasOptions = isObj && F.is.hash(data.options) && F.is.hash(data.value);
      this.o = $.extend(true, {
        expanded: self.expanded,
        classes: self.classes,
        style: self.style
      }, hasOptions ? data.options : {});
      this.expanded = this.o.expanded;
      this.classes = F.is.array(this.o.classes) ? this.o.classes : F.is.string(this.o.classes) ? this.o.classes.match(/\S+/g) : [];
      this.style = F.is.hash(this.o.style) ? this.o.style : F.is.string(this.o.style) ? F.css2json(this.o.style) : {};

      if (isObj) {
        if (hasOptions) data = data.value;

        if (F.is.hash(this.value)) {
          for (var prop in data) {
            if (!data.hasOwnProperty(prop)) continue;
            this.value[prop] = data[prop];
          }
        } else {
          this.value = data;
        }
      } else {
        this.value = null;
      }

      F.arr.each(this.cells, function (cell) {
        if (F.is.defined(self.value[cell.column.name])) cell.val(self.value[cell.column.name], false);
      });

      if (this.created) {
        this._setClasses(this.$el);

        this._setStyle(this.$el);

        if (F.is.boolean(redraw) ? redraw : true) this.draw();
      }
    },
    _setClasses: function _setClasses($el) {
      var hasClasses = !F.is.emptyArray(this.classes),
          classes = null;
      $el.removeAttr('class');
      if (!hasClasses) return;else classes = this.classes.join(' ');

      if (!F.is.emptyString(classes)) {
        $el.addClass(classes);
      }
    },
    _setStyle: function _setStyle($el) {
      var hasStyle = !F.is.emptyObject(this.style),
          style = null;
      $el.removeAttr('style');
      if (!hasStyle) return;else style = this.style;

      if (F.is.hash(style)) {
        $el.css(style);
      }
    },

    /**
     * Sets the current row to an expanded state displaying any hidden columns in a detail row just below it.
     * @instance
     * @fires FooTable.Row#"expand.ft.row"
     */
    expand: function expand() {
      if (!this.created) return;
      var self = this;
      /**
       * The expand.ft.row event is raised before the the row is expanded.
       * Calling preventDefault on this event will stop the row being expanded.
       * @event FooTable.Row#"expand.ft.row"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {FooTable.Row} row - The row about to be expanded.
       */

      self.ft.raise('expand.ft.row', [self]).then(function () {
        self.__hidden__ = F.arr.map(self.cells, function (cell) {
          return cell.column.hidden && cell.column.visible ? cell : null;
        });

        if (self.__hidden__.length > 0) {
          self.$details.insertAfter(self.$el).children('td').first().attr('colspan', self.ft.columns.visibleColspan);
          F.arr.each(self.__hidden__, function (cell) {
            cell.collapse();
          });
        }

        self.$el.attr('data-expanded', true);
        self.$toggle.removeClass('fooicon-plus').addClass('fooicon-minus');
        self.expanded = true;
      });
    },

    /**
     * Sets the current row to a collapsed state removing the detail row if it exists.
     * @instance
     * @param {boolean} [setExpanded] - Whether or not to set the {@link FooTable.Row#expanded} property to false.
     * @fires FooTable.Row#"collapse.ft.row"
     */
    collapse: function collapse(setExpanded) {
      if (!this.created) return;
      var self = this;
      /**
       * The collapse.ft.row event is raised before the the row is collapsed.
       * Calling preventDefault on this event will stop the row being collapsed.
       * @event FooTable.Row#"collapse.ft.row"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {FooTable.Row} row - The row about to be expanded.
       */

      self.ft.raise('collapse.ft.row', [self]).then(function () {
        F.arr.each(self.__hidden__, function (cell) {
          cell.restore();
        });
        self.$details.detach();
        self.$el.removeAttr('data-expanded');
        self.$toggle.removeClass('fooicon-minus').addClass('fooicon-plus');
        if (F.is.boolean(setExpanded) ? setExpanded : true) self.expanded = false;
      });
    },

    /**
     * Prior to drawing this moves the details contents back to there original cells and detaches the toggle element from the row.
     * @instance
     * @param {boolean} [detach] - Whether or not to detach the row.
     * @this FooTable.Row
     */
    predraw: function predraw(detach) {
      if (this.created) {
        if (this.expanded) {
          this.collapse(false);
        }

        this.$toggle.detach();
        detach = F.is.boolean(detach) ? detach : true;
        if (detach) this.$el.detach();
      }
    },

    /**
     * Draws the current row and cells.
     * @instance
     * @this FooTable.Row
     */
    draw: function draw($parent) {
      if (!this.created) this.$create();
      if (F.is.jq($parent)) $parent.append(this.$el);
      var self = this;
      F.arr.each(self.cells, function (cell) {
        cell.$el.css('display', cell.column.hidden || !cell.column.visible ? 'none' : 'table-cell');

        if (self.ft.rows.showToggle && self.ft.columns.hasHidden) {
          if (self.ft.rows.toggleColumn == 'first' && cell.column.index == self.ft.columns.firstVisibleIndex || self.ft.rows.toggleColumn == 'last' && cell.column.index == self.ft.columns.lastVisibleIndex) {
            cell.$el.prepend(self.$toggle);
          }
        }

        cell.$el.add(cell.column.$el).removeClass('footable-first-visible footable-last-visible');

        if (cell.column.index == self.ft.columns.firstVisibleIndex) {
          cell.$el.add(cell.column.$el).addClass('footable-first-visible');
        }

        if (cell.column.index == self.ft.columns.lastVisibleIndex) {
          cell.$el.add(cell.column.$el).addClass('footable-last-visible');
        }
      });

      if (this.expanded) {
        this.expand();
      }
    },

    /**
     * Toggles the row between it's expanded and collapsed state if there are hidden columns.
     * @instance
     * @this FooTable.Row
     */
    toggle: function toggle() {
      if (this.created && this.ft.columns.hasHidden) {
        if (this.expanded) this.collapse();else this.expand();
      }
    },

    /**
     * Handles the toggle click event for rows.
     * @instance
     * @param {jQuery.Event} e - The jQuery.Event object for the click event.
     * @private
     * @this jQuery
     */
    _onToggle: function _onToggle(e) {
      var self = e.data.self; // only execute the toggle if the event.target is one of the approved initiators

      if ($(e.target).is(self.ft.rows.toggleSelector)) {
        self.toggle();
      }
    }
  });
})(jQuery, FooTable);

(function ($, F) {
  /**
   * An array of all currently loaded instances of the plugin.
   * @protected
   * @readonly
   * @type {Array.<FooTable.Table>}
   */
  F.instances = [];
  F.Table = F.Class.extend(
  /** @lends FooTable.Table */
  {
    /**
     * This class is the core of the plugin and drives the logic of all components.
     * @constructs
     * @this FooTable.Table
     * @extends FooTable.Class
     * @param {(HTMLTableElement|jQuery)} element - The element or jQuery table object to bind the plugin to.
     * @param {object} options - The options to initialize the plugin with.
     * @param {function} [ready] - A callback function to execute once the plugin is initialized.
     * @returns {FooTable.Table}
     */
    construct: function construct(element, options, ready) {
      //BEGIN MEMBERS

      /**
       * The timeout ID for the resize event.
       * @instance
       * @private
       * @type {?number}
       */
      this._resizeTimeout = null;
      /**
       * The ID of the FooTable instance.
       * @instance
       * @type {number}
       */

      this.id = F.instances.push(this);
      /**
       * Whether or not the plugin and all components and add-ons are fully initialized.
       * @instance
       * @type {boolean}
       */

      this.initialized = false;
      /**
       * The jQuery table object the plugin is bound to.
       * @instance
       * @type {jQuery}
       */

      this.$el = (F.is.jq(element) ? element : $(element)).first(); // ensure one table, one instance

      /**
       * A loader jQuery instance
       * @instance
       * @type {jQuery}
       */

      this.$loader = $('<div/>', {
        'class': 'footable-loader'
      }).append($('<span/>', {
        'class': 'fooicon fooicon-loader'
      }));
      /**
       * The options for the plugin. This is a merge of user defined options and the default options.
       * @instance
       * @type {object}
       */

      this.o = $.extend(true, {}, F.defaults, options);
      /**
       * The jQuery data object for the table at initialization.
       * @instance
       * @type {object}
       */

      this.data = this.$el.data() || {};
      /**
       * An array of all CSS classes on the table that do not start with "footable".
       * @instance
       * @protected
       * @type {Array.<string>}
       */

      this.classes = [];
      /**
       * All components for this instance of the plugin. These are executed in the order they appear in the array for the initialize phase and in reverse order for the destroy phase of the plugin.
       * @instance
       * @protected
       * @type {object}
       * @prop {Array.<FooTable.Component>} internal - The internal components for the plugin. These are executed either before all other components in the initialize phase or after them in the destroy phase of the plugin.
       * @prop {Array.<FooTable.Component>} core - The core components for the plugin. These are executed either after the internal components in the initialize phase or before them in the destroy phase of the plugin.
       * @prop {Array.<FooTable.Component>} custom - The custom components for the plugin. These are executed either after the core components in the initialize phase or before them in the destroy phase of the plugin.
       */

      this.components = F.components.load(F.is.hash(this.data.components) ? this.data.components : this.o.components, this);
      /**
       * The breakpoints component for this instance of the plugin.
       * @instance
       * @type {FooTable.Breakpoints}
       */

      this.breakpoints = this.use(FooTable.Breakpoints);
      /**
       * The columns component for this instance of the plugin.
       * @instance
       * @type {FooTable.Columns}
       */

      this.columns = this.use(FooTable.Columns);
      /**
       * The rows component for this instance of the plugin.
       * @instance
       * @type {FooTable.Rows}
       */

      this.rows = this.use(FooTable.Rows); //END MEMBERS

      this._construct(ready);
    },

    /**
     * Once all properties are set this performs the actual initialization of the plugin calling the {@link FooTable.Table#_preinit} and
     * {@link FooTable.Table#_init} methods as well as raising the {@link FooTable.Table#"ready.ft.table"} event.
     * @this FooTable.Table
     * @instance
     * @param {function} [ready] - A callback function to execute once the plugin is initialized.
     * @private
     * @returns {jQuery.Promise}
     * @fires FooTable.Table#"ready.ft.table"
     */
    _construct: function _construct(ready) {
      var self = this;

      this._preinit().then(function () {
        return self._init();
      }).always(function (arg) {
        self.$el.show();

        if (F.is.error(arg)) {
          console.error('FooTable: unhandled error thrown during initialization.', arg);
        } else {
          /**
           * The postinit.ft.table event is raised after the plugin has been initialized and the table drawn.
           * Calling preventDefault on this event will stop the ready callback being executed.
           * @event FooTable.Table#"postinit.ft.table"
           * @param {jQuery.Event} e - The jQuery.Event object for the event.
           * @param {FooTable.Table} ft - The instance of the plugin raising the event.
           */
          return self.raise('ready.ft.table').then(function () {
            if (F.is.fn(ready)) ready.call(self, self);
          });
        }
      });
    },

    /**
     * The preinit method is called prior to the plugins actual initialization and provides itself and it's components an opportunity to parse any additional option values.
     * @instance
     * @private
     * @returns {jQuery.Promise}
     * @fires FooTable.Table#"preinit.ft.table"
     */
    _preinit: function _preinit() {
      var self = this;
      /**
       * The preinit.ft.table event is raised before any components.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Table#"preinit.ft.table"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object from the root table element.
       */

      return this.raise('preinit.ft.table', [self.data]).then(function () {
        var classes = (self.$el.attr('class') || '').match(/\S+/g) || [];
        self.o.ajax = F.checkFnValue(self, self.data.ajax, self.o.ajax);
        self.o.stopPropagation = F.is.boolean(self.data.stopPropagation) ? self.data.stopPropagation : self.o.stopPropagation;

        for (var i = 0, len = classes.length; i < len; i++) {
          if (!F.str.startsWith(classes[i], 'footable')) self.classes.push(classes[i]);
        }

        self.$el.hide().after(self.$loader);
        return self.execute(false, false, 'preinit', self.data);
      });
    },

    /**
     * Initializes this instance of the plugin and calls the callback function if one is supplied once complete.
     * @this FooTable.Table
     * @instance
     * @private
     * @return {jQuery.Promise}
     * @fires FooTable.Table#"init.ft.table"
     */
    _init: function _init() {
      var self = this;
      /**
       * The init.ft.table event is raised before any components are initialized.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Table#"init.ft.table"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      return self.raise('init.ft.table').then(function () {
        var $thead = self.$el.children('thead'),
            $tbody = self.$el.children('tbody'),
            $tfoot = self.$el.children('tfoot');
        self.$el.addClass('footable footable-' + self.id);
        if (F.is.hash(self.o.on)) self.$el.on(self.o.on);
        if ($tfoot.length == 0) self.$el.append($tfoot = $('<tfoot/>'));
        if ($tbody.length == 0) self.$el.append('<tbody/>');
        if ($thead.length == 0) self.$el.prepend($thead = $('<thead/>'));
        return self.execute(false, true, 'init').then(function () {
          self.$el.data('__FooTable__', self);
          if ($tfoot.children('tr').length == 0) $tfoot.remove();
          if ($thead.children('tr').length == 0) $thead.remove();
          /**
           * The postinit.ft.table event is raised after any components are initialized but before the table is
           * drawn for the first time.
           * Calling preventDefault on this event will disable the initial drawing of the table.
           * @event FooTable.Table#"postinit.ft.table"
           * @param {jQuery.Event} e - The jQuery.Event object for the event.
           * @param {FooTable.Table} ft - The instance of the plugin raising the event.
           */

          return self.raise('postinit.ft.table').then(function () {
            return self.draw();
          }).always(function () {
            $(window).off('resize.ft' + self.id, self._onWindowResize).on('resize.ft' + self.id, {
              self: self
            }, self._onWindowResize);
            self.initialized = true;
          });
        });
      });
    },

    /**
     * Destroys this plugin removing it from the table.
     * @this FooTable.Table
     * @instance
     * @fires FooTable.Table#"destroy.ft.table"
     */
    destroy: function destroy() {
      var self = this;
      /**
       * The destroy.ft.table event is called before all core components.
       * Calling preventDefault on this event will prevent the entire plugin from being destroyed.
       * @event FooTable.Table#"destroy.ft.table"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      return self.raise('destroy.ft.table').then(function () {
        return self.execute(true, true, 'destroy').then(function () {
          self.$el.removeData('__FooTable__').removeClass('footable-' + self.id);
          if (F.is.hash(self.o.on)) self.$el.off(self.o.on);
          $(window).off('resize.ft' + self.id, self._onWindowResize);
          self.initialized = false;
        });
      }).fail(function (err) {
        if (F.is.error(err)) {
          console.error('FooTable: unhandled error thrown while destroying the plugin.', err);
        }
      });
    },

    /**
     * Raises an event on this instance supplying the args array as additional parameters to the handlers.
     * @this FooTable.Table
     * @instance
     * @param {string} eventName - The name of the event to raise, this can include namespaces.
     * @param {Array} [args] - An array containing additional parameters to be passed to any bound handlers.
     * @returns {jQuery.Event}
     */
    raise: function raise(eventName, args) {
      var self = this,
          debug = F.__debug__ && (F.is.emptyArray(F.__debug_options__.events) || F.arr.any(F.__debug_options__.events, function (name) {
        return F.str.contains(eventName, name);
      }));
      args = args || [];
      args.unshift(this);
      return $.Deferred(function (d) {
        var evt = $.Event(eventName);

        if (self.o.stopPropagation == true) {
          self.$el.one(eventName, function (e) {
            e.stopPropagation();
          });
        }

        if (debug) console.log('FooTable:' + eventName + ': ', args);
        self.$el.trigger(evt, args);

        if (evt.isDefaultPrevented()) {
          if (debug) console.log('FooTable: default prevented for the "' + eventName + '" event.');
          d.reject(evt);
        } else d.resolve(evt);
      });
    },

    /**
     * Attempts to retrieve the instance of the supplied component type for this instance.
     * @this FooTable.Table
     * @instance
     * @param {object} type - The content type to retrieve for this instance.
     * @returns {(*|null)}
     */
    use: function use(type) {
      for (var i = 0, len = this.components.length; i < len; i++) {
        if (this.components[i] instanceof type) return this.components[i];
      }

      return null;
    },

    /**
     * Performs the drawing of the table.
     * @this FooTable.Table
     * @instance
     * @protected
     * @returns {jQuery.Promise}
     * @fires FooTable.Table#"predraw.ft.table"
     * @fires FooTable.Table#"draw.ft.table"
     * @fires FooTable.Table#"postdraw.ft.table"
     */
    draw: function draw() {
      var self = this; // Clone the current table and insert it into the original's place

      var $elCopy = self.$el.clone().insertBefore(self.$el); // Detach `self.$el` from the DOM, retaining its event handlers

      self.$el.detach(); // when drawing the order that the components are executed is important so chain the methods but use promises to retain async safety.

      return self.execute(false, true, 'predraw').then(function () {
        /**
         * The predraw.ft.table event is raised after all core components and add-ons have executed there predraw functions but before they execute there draw functions.
         * @event FooTable.Table#"predraw.ft.table"
         * @param {jQuery.Event} e - The jQuery.Event object for the event.
         * @param {FooTable.Table} ft - The instance of the plugin raising the event.
         */
        return self.raise('predraw.ft.table').then(function () {
          return self.execute(false, true, 'draw').then(function () {
            /**
             * The draw.ft.table event is raised after all core components and add-ons have executed there draw functions.
             * @event FooTable.Table#"draw.ft.table"
             * @param {jQuery.Event} e - The jQuery.Event object for the event.
             * @param {FooTable.Table} ft - The instance of the plugin raising the event.
             */
            return self.raise('draw.ft.table').then(function () {
              return self.execute(false, true, 'postdraw').then(function () {
                /**
                 * The postdraw.ft.table event is raised after all core components and add-ons have executed there postdraw functions.
                 * @event FooTable.Table#"postdraw.ft.table"
                 * @param {jQuery.Event} e - The jQuery.Event object for the event.
                 * @param {FooTable.Table} ft - The instance of the plugin raising the event.
                 */
                return self.raise('postdraw.ft.table');
              });
            });
          });
        });
      }).fail(function (err) {
        if (F.is.error(err)) {
          console.error('FooTable: unhandled error thrown during a draw operation.', err);
        }
      }).always(function () {
        // Replace the copy that we added above with the modified `self.$el`
        $elCopy.replaceWith(self.$el);
        self.$loader.remove();
      });
    },

    /**
     * Executes the specified method with the optional number of parameters on all components and waits for the promise from each to be resolved before executing the next.
     * @this FooTable.Table
     * @instance
     * @protected
     * @param {boolean} reverse - Whether or not to execute the component methods in the reverse order to what they were registered in.
     * @param {boolean} enabled - Whether or not to execute the method on enabled components only.
     * @param {string} methodName - The name of the method to execute.
     * @param {*} [param1] - The first parameter for the method.
     * @param {...*} [paramN] - Any number of additional parameters for the method.
     * @returns {jQuery.Promise}
     */
    execute: function execute(reverse, enabled, methodName, param1, paramN) {
      var self = this,
          args = Array.prototype.slice.call(arguments);
      reverse = args.shift();
      enabled = args.shift();
      var components = enabled ? F.arr.get(self.components, function (c) {
        return c.enabled;
      }) : self.components.slice(0);
      args.unshift(reverse ? components.reverse() : components);
      return self._execute.apply(self, args);
    },

    /**
     * Executes the specified method with the optional number of parameters on all supplied components waiting for the result of each before executing the next.
     * @this FooTable.Table
     * @instance
     * @private
     * @param {Array.<FooTable.Component>} components - The components to call the method on.
     * @param {string} methodName - The name of the method to execute
     * @param {*} [param1] - The first parameter for the method.
     * @param {...*} [paramN] - Any additional parameters for the method.
     * @returns {jQuery.Promise}
     */
    _execute: function _execute(components, methodName, param1, paramN) {
      if (!components || !components.length) return $.when();
      var self = this,
          args = Array.prototype.slice.call(arguments),
          component;
      components = args.shift();
      methodName = args.shift();
      component = components.shift();
      if (!F.is.fn(component[methodName])) return self._execute.apply(self, [components, methodName].concat(args));
      return $.Deferred(function (d) {
        try {
          var result = component[methodName].apply(component, args);

          if (F.is.promise(result)) {
            return result.then(d.resolve, d.reject);
          } else {
            d.resolve(result);
          }
        } catch (err) {
          d.reject(err);
        }
      }).then(function () {
        return self._execute.apply(self, [components, methodName].concat(args));
      });
    },

    /**
     * Listens to the window resize event and performs a check to see if the breakpoint has changed.
     * @this window
     * @instance
     * @private
     * @fires FooTable.Table#"resize.ft.table"
     */
    _onWindowResize: function _onWindowResize(e) {
      var self = e.data.self;

      if (self._resizeTimeout != null) {
        clearTimeout(self._resizeTimeout);
      }

      self._resizeTimeout = setTimeout(function () {
        self._resizeTimeout = null;
        /**
         * The resize event is raised a short time after window resize operations cease.
         * @event FooTable.Table#"resize.ft.table"
         * @param {jQuery.Event} e - The jQuery.Event object for the event.
         * @param {FooTable.Table} ft - The instance of the plugin raising the event.
         */

        self.raise('resize.ft.table').then(function () {
          self.breakpoints.check();
        });
      }, 300);
    }
  });
})(jQuery, FooTable);

(function ($, F) {
  if (F.is.undef(window.moment)) {
    // The DateColumn requires moment.js to parse and format date values. Goto http://momentjs.com/ to get it.
    return;
  }

  F.DateColumn = F.Column.extend(
  /** @lends FooTable.DateColumn */
  {
    /**
     * The date column class is used to handle date values. This column is dependent on [moment.js]{@link http://momentjs.com/} to provide date parsing and formatting functionality.
     * @constructs
     * @extends FooTable.Column
     * @param {FooTable.Table} instance -  The parent {@link FooTable.Table} this column belongs to.
     * @param {object} definition - An object containing all the properties to set for the column.
     * @returns {FooTable.DateColumn}
     */
    construct: function construct(instance, definition) {
      this._super(instance, definition, 'date');
      /**
       * The format string to use when parsing and formatting dates.
       * @instance
       * @type {string}
       */


      this.formatString = F.is.string(definition.formatString) ? definition.formatString : 'MM-DD-YYYY';
    },

    /**
     * This is supplied either the cell value or jQuery object to parse. Any value can be returned from this method and will be provided to the {@link FooTable.DateColumn#format} function
     * to generate the cell contents.
     * @instance
     * @protected
     * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
     * @returns {(moment|null)}
     * @this FooTable.DateColumn
     */
    parser: function parser(valueOrElement) {
      if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) {
        var data = $(valueOrElement).data('value');
        valueOrElement = F.is.defined(data) ? data : $(valueOrElement).text();
        if (F.is.string(valueOrElement)) valueOrElement = isNaN(valueOrElement) ? valueOrElement : +valueOrElement;
      }

      if (F.is.date(valueOrElement)) return moment(valueOrElement);
      if (F.is.object(valueOrElement) && F.is.boolean(valueOrElement._isAMomentObject)) return valueOrElement;

      if (F.is.string(valueOrElement)) {
        // if it looks like a number convert it and do nothing else otherwise create a new moment using the string value and formatString
        if (isNaN(valueOrElement)) {
          return moment(valueOrElement, this.formatString);
        } else {
          valueOrElement = +valueOrElement;
        }
      }

      if (F.is.number(valueOrElement)) {
        return moment(valueOrElement);
      }

      return null;
    },

    /**
     * This is supplied the value retrieved from the {@link FooTable.DateColumn#parser} function and must return a string, HTMLElement or jQuery object.
     * The return value from this function is what is displayed in the cell in the table.
     * @instance
     * @protected
     * @param {*} value - The value to format.
     * @returns {(string|HTMLElement|jQuery)}
     * @this FooTable.DateColumn
     */
    formatter: function formatter(value) {
      return F.is.object(value) && F.is.boolean(value._isAMomentObject) && value.isValid() ? value.format(this.formatString) : '';
    },

    /**
     * This is supplied either the cell value or jQuery object to parse. A string value must be returned from this method and will be used during filtering operations.
     * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
     * @returns {string}
     * @this FooTable.DateColumn
     */
    filterValue: function filterValue(valueOrElement) {
      // if we have an element or a jQuery object use jQuery to get the value
      if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) valueOrElement = $(valueOrElement).data('filterValue') || $(valueOrElement).text(); // if options are supplied with the value

      if (F.is.hash(valueOrElement) && F.is.hash(valueOrElement.options)) {
        if (F.is.string(valueOrElement.options.filterValue)) valueOrElement = valueOrElement.options.filterValue;
        if (F.is.defined(valueOrElement.value)) valueOrElement = valueOrElement.value;
      } // if the value is a moment object just return the formatted value


      if (F.is.object(valueOrElement) && F.is.boolean(valueOrElement._isAMomentObject)) return valueOrElement.format(this.formatString); // if its a string

      if (F.is.string(valueOrElement)) {
        // if its not a number return it
        if (isNaN(valueOrElement)) {
          return valueOrElement;
        } else {
          // otherwise convert it and carry on
          valueOrElement = +valueOrElement;
        }
      } // if the value is a number or date convert to a moment object and return the formatted result.


      if (F.is.number(valueOrElement) || F.is.date(valueOrElement)) {
        return moment(valueOrElement).format(this.formatString);
      } // try use the native toString of the value if its not undefined or null


      if (F.is.defined(valueOrElement) && valueOrElement != null) return valueOrElement + '';
      return ''; // otherwise we have no value so return an empty string
    }
  });
  F.columns.register('date', F.DateColumn);
})(jQuery, FooTable);

(function ($, F) {
  F.HTMLColumn = F.Column.extend(
  /** @lends FooTable.HTMLColumn */
  {
    /**
     * The HTML column class is used to handle any raw HTML columns.
     * @constructs
     * @extends FooTable.Column
     * @param {FooTable.Table} instance -  The parent {@link FooTable.Table} this column belongs to.
     * @param {object} definition - An object containing all the properties to set for the column.
     * @returns {FooTable.HTMLColumn}
     */
    construct: function construct(instance, definition) {
      this._super(instance, definition, 'html');
    },

    /**
     * This is supplied either the cell value or jQuery object to parse. Any value can be returned from this method and will be provided to the {@link FooTable.HTMLColumn#format} function
     * to generate the cell contents.
     * @instance
     * @protected
     * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
     * @returns {(jQuery|null)}
     * @this FooTable.HTMLColumn
     */
    parser: function parser(valueOrElement) {
      if (F.is.string(valueOrElement)) valueOrElement = $($.trim(valueOrElement));
      if (F.is.element(valueOrElement)) valueOrElement = $(valueOrElement);

      if (F.is.jq(valueOrElement)) {
        var tagName = valueOrElement.prop('tagName').toLowerCase();

        if (tagName == 'td' || tagName == 'th') {
          var data = valueOrElement.data('value');
          return F.is.defined(data) ? data : valueOrElement.contents();
        }

        return valueOrElement;
      }

      return null;
    }
  });
  F.columns.register('html', F.HTMLColumn);
})(jQuery, FooTable);

(function ($, F) {
  F.NumberColumn = F.Column.extend(
  /** @lends FooTable.NumberColumn */
  {
    /**
     * The number column class is used to handle simple number columns.
     * @constructs
     * @extends FooTable.Column
     * @param {FooTable.Table} instance -  The parent {@link FooTable.Table} this column belongs to.
     * @param {object} definition - An object containing all the properties to set for the column.
     * @returns {FooTable.NumberColumn}
     */
    construct: function construct(instance, definition) {
      this._super(instance, definition, 'number');

      this.decimalSeparator = F.is.string(definition.decimalSeparator) ? definition.decimalSeparator : '.';
      this.thousandSeparator = F.is.string(definition.thousandSeparator) ? definition.thousandSeparator : ',';
      this.decimalSeparatorRegex = new RegExp(F.str.escapeRegExp(this.decimalSeparator), 'g');
      this.thousandSeparatorRegex = new RegExp(F.str.escapeRegExp(this.thousandSeparator), 'g');
      this.cleanRegex = new RegExp('[^0-9' + F.str.escapeRegExp(this.decimalSeparator) + ']', 'g');
    },

    /**
     * This is supplied either the cell value or jQuery object to parse. Any value can be returned from this method and will be provided to the {@link FooTable.Column#formatter} function
     * to generate the cell contents.
     * @instance
     * @protected
     * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
     * @returns {(number|null)}
     * @this FooTable.NumberColumn
     */
    parser: function parser(valueOrElement) {
      if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) {
        var data = $(valueOrElement).data('value');
        valueOrElement = F.is.defined(data) ? data : $(valueOrElement).text().replace(this.cleanRegex, '');
      }

      if (F.is.string(valueOrElement)) {
        valueOrElement = valueOrElement.replace(this.thousandSeparatorRegex, '').replace(this.decimalSeparatorRegex, '.');
        valueOrElement = parseFloat(valueOrElement);
      }

      if (F.is.number(valueOrElement)) return valueOrElement;
      return null;
    },

    /**
     * This is supplied the value retrieved from the {@link FooTable.NumberColumn#parse} function and must return a string, HTMLElement or jQuery object.
     * The return value from this function is what is displayed in the cell in the table.
     * @instance
     * @protected
     * @param {number} value - The value to format.
     * @returns {(string|HTMLElement|jQuery)}
     * @this FooTable.NumberColumn
     */
    formatter: function formatter(value) {
      if (value == null) return '';
      var s = (value + '').split('.');

      if (s.length == 2 && s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, this.thousandSeparator);
      }

      return s.join(this.decimalSeparator);
    }
  });
  F.columns.register('number', F.NumberColumn);
})(jQuery, FooTable);

(function ($, F) {
  F.Breakpoint = F.Class.extend(
  /** @lends FooTable.Breakpoint */
  {
    /**
     * The breakpoint class containing the name and maximum width for the breakpoint.
     * @constructs
     * @extends FooTable.Class
     * @param {string} name - The name of the breakpoint. Must contain no spaces or special characters.
     * @param {number} width - The width of the breakpoint in pixels.
     * @returns {FooTable.Breakpoint}
     */
    construct: function construct(name, width) {
      /**
       * The name of the breakpoint.
       * @type {string}
       */
      this.name = name;
      /**
       * The maximum width of the breakpoint in pixels.
       * @type {number}
       */

      this.width = width;
    }
  });
})(jQuery, FooTable);

(function ($, F) {
  F.Breakpoints = F.Component.extend(
  /** @lends FooTable.Breakpoints */
  {
    /**
     * Contains the logic to calculate and apply breakpoints for the plugin.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table -  The parent {@link FooTable.Table} this component belongs to.
     * @returns {FooTable.Breakpoints}
     */
    construct: function construct(table) {
      // call the base class constructor
      this._super(table, true);
      /* PROTECTED */

      /**
       * This provides a shortcut to the {@link FooTable.Table#options} object.
       * @protected
       * @type {FooTable.Table#options}
       */


      this.o = table.o;
      /* PUBLIC */

      /**
       * The current breakpoint.
       * @type {FooTable.Breakpoint}
       */

      this.current = null;
      /**
       * An array of {@link FooTable.Breakpoint} objects created from parsing the options.
       * @type {Array.<FooTable.Breakpoint>}
       */

      this.array = [];
      /**
       * Whether or not breakpoints cascade. When set to true all breakpoints larger than the current will be hidden along with it.
       * @type {boolean}
       */

      this.cascade = this.o.cascade;
      /**
       * Whether or not to calculate breakpoints on the width of the parent element rather than the viewport.
       * @type {boolean}
       */

      this.useParentWidth = this.o.useParentWidth;
      /**
       * This value is updated each time the current breakpoint changes and contains a space delimited string of the names of the current breakpoint and all those smaller than it.
       * @type {string}
       */

      this.hidden = null;
      /* PRIVATE */

      /**
       * This value is set once when the {@link FooTable.Breakpoints#array} is generated and contains a space delimited string of all the breakpoint class names.
       * @type {string}
       * @private
       */

      this._classNames = ''; // check if a function was supplied to override the default getWidth

      this.getWidth = F.checkFnValue(this, this.o.getWidth, this.getWidth);
    },

    /* PROTECTED */

    /**
     * Checks the supplied data and options for the breakpoints component.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the parent table.
     * @fires FooTable.Breakpoints#"preinit.ft.breakpoints"
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.breakpoints event is raised before any UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Breakpoints#"preinit.ft.breakpoints"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      return this.ft.raise('preinit.ft.breakpoints', [data]).then(function () {
        self.cascade = F.is.boolean(data.cascade) ? data.cascade : self.cascade;
        self.o.breakpoints = F.is.hash(data.breakpoints) ? data.breakpoints : self.o.breakpoints;
        self.getWidth = F.checkFnValue(self, data.getWidth, self.getWidth);
        if (self.o.breakpoints == null) self.o.breakpoints = {
          "xs": 480,
          "sm": 768,
          "md": 992,
          "lg": 1200
        }; // Create a nice friendly array to work with out of the breakpoints object.

        for (var name in self.o.breakpoints) {
          if (!self.o.breakpoints.hasOwnProperty(name)) continue;
          self.array.push(new F.Breakpoint(name, self.o.breakpoints[name]));
          self._classNames += 'breakpoint-' + name + ' ';
        } // Sort the breakpoints so the largest is checked first


        self.array.sort(function (a, b) {
          return b.width - a.width;
        });
      });
    },

    /**
     * Initializes the class parsing the options into a sorted array of {@link FooTable.Breakpoint} objects.
     * @instance
     * @protected
     * @fires FooTable.Breakpoints#"init.ft.breakpoints"
     */
    init: function init() {
      var self = this;
      /**
       * The init.ft.breakpoints event is raised before any UI is generated.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Breakpoints#"init.ft.breakpoints"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      return this.ft.raise('init.ft.breakpoints').then(function () {
        self.current = self.get();
      });
    },

    /**
     * Whenever the table is drawn this ensures the correct breakpoint class is applied to the table.
     * @instance
     * @protected
     */
    draw: function draw() {
      this.ft.$el.removeClass(this._classNames).addClass('breakpoint-' + this.current.name);
    },

    /* PUBLIC */

    /**
     * Calculates the current breakpoint from the {@link FooTable.Breakpoints#array} and sets the {@link FooTable.Breakpoints#current} property.
     * @instance
     * @returns {FooTable.Breakpoint}
     */
    calculate: function calculate() {
      var self = this,
          current = null,
          hidden = [],
          breakpoint,
          prev = null,
          width = self.getWidth();

      for (var i = 0, len = self.array.length; i < len; i++) {
        breakpoint = self.array[i]; // if the width is smaller than the smallest breakpoint set the smallest as the current.
        // if the width is larger than the largest breakpoint set the largest as the current.
        // otherwise if the width is somewhere in between check all breakpoints testing if the width
        // is greater than the current but smaller than the previous.

        if (!current && i == len - 1 || width >= breakpoint.width && (prev instanceof F.Breakpoint ? width < prev.width : true)) {
          current = breakpoint;
        }

        if (!current) hidden.push(breakpoint.name);
        prev = breakpoint;
      }

      hidden.push(current.name);
      self.hidden = hidden.join(' ');
      return current;
    },

    /**
     * Supplied a columns breakpoints this returns a boolean value indicating whether or not the column is visible.
     * @param {string} breakpoints - A space separated string of breakpoint names.
     * @returns {boolean}
     */
    visible: function visible(breakpoints) {
      if (F.is.emptyString(breakpoints)) return true;
      if (breakpoints === 'all') return false;
      var parts = breakpoints.split(' '),
          i = 0,
          len = parts.length;

      for (; i < len; i++) {
        if (this.cascade ? F.str.containsWord(this.hidden, parts[i]) : parts[i] == this.current.name) return false;
      }

      return true;
    },

    /**
     * Performs a check between the current breakpoint and the previous breakpoint and performs a redraw if they differ.
     * @instance
     * @fires FooTable.Breakpoints#"before.ft.breakpoints"
     * @fires FooTable.Breakpoints#"after.ft.breakpoints"
     */
    check: function check() {
      var self = this,
          bp = self.get();
      if (!(bp instanceof F.Breakpoint) || bp == self.current) return;
      /**
       * The before.ft.breakpoints event is raised if the breakpoint has changed but before the UI is redrawn and is supplied both the current breakpoint
       * and the next "new" one that is about to be applied.
       * Calling preventDefault on this event will prevent the next breakpoint from being applied.
       * @event FooTable.Breakpoints#"before.ft.breakpoints"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {FooTable.Breakpoint} current - The current breakpoint.
       * @param {FooTable.Breakpoint} next - The breakpoint that is about to be applied.
       */

      self.ft.raise('before.ft.breakpoints', [self.current, bp]).then(function () {
        var previous = self.current;
        self.current = bp;
        return self.ft.draw().then(function () {
          /**
           * The after.ft.breakpoints event is raised after the breakpoint has changed and the UI is redrawn and is supplied both the "new" current breakpoint
           * and the previous one that was replaced.
           * @event FooTable.Breakpoints#"after.ft.breakpoints"
           * @param {jQuery.Event} e - The jQuery.Event object for the event.
           * @param {FooTable.Table} ft - The instance of the plugin raising the event.
           * @param {FooTable.Breakpoint} current - The current breakpoint.
           * @param {FooTable.Breakpoint} previous - The breakpoint that was just replaced.
           */
          self.ft.raise('after.ft.breakpoints', [self.current, previous]);
        });
      });
    },

    /**
     * Attempts to return a {@link FooTable.Breakpoint} instance when passed a {@link FooTable.Breakpoint},
     * the {@link FooTable.Breakpoint#name} string or if nothing is supplied the current breakpoint.
     * @instance
     * @param {(FooTable.Breakpoint|string|number)} [breakpoint] - The breakpoint to retrieve.
     * @returns {FooTable.Breakpoint}
     */
    get: function get(breakpoint) {
      if (F.is.undef(breakpoint)) return this.calculate();
      if (breakpoint instanceof F.Breakpoint) return breakpoint;
      if (F.is.string(breakpoint)) return F.arr.first(this.array, function (bp) {
        return bp.name == breakpoint;
      });
      if (F.is.number(breakpoint)) return breakpoint >= 0 && breakpoint < this.array.length ? this.array[breakpoint] : null;
      return null;
    },

    /**
     * Gets the width used to determine breakpoints whether it be from the viewport, parent or a custom function.
     * @instance
     * @returns {number}
     */
    getWidth: function getWidth() {
      if (F.is.fn(this.o.getWidth)) return this.o.getWidth(this.ft);
      if (this.useParentWidth == true) return this.getParentWidth();
      return this.getViewportWidth();
    },

    /**
     * Gets the tables direct parents width.
     * @instance
     * @returns {number}
     */
    getParentWidth: function getParentWidth() {
      return this.ft.$el.parent().width();
    },

    /**
     * Gets the current viewport width.
     * @instance
     * @returns {number}
     */
    getViewportWidth: function getViewportWidth() {
      return Math.max(document.documentElement.clientWidth, window.innerWidth, 0);
    }
  });
  F.components.register('breakpoints', F.Breakpoints, 1000);
})(jQuery, FooTable);

(function (F) {
  /**
   * A space delimited string of breakpoint names that specify when the column will be hidden. You can also specify "all" to make a column permanently display in an expandable detail row.
   * @type {string}
   * @default null
   * @example <caption>The below shows how this value would be set</caption>
   * breakpoints: "md"
   */
  F.Column.prototype.breakpoints = null;

  F.Column.prototype.__breakpoints_define__ = function (definition) {
    this.breakpoints = F.is.emptyString(definition.breakpoints) ? null : definition.breakpoints;
  };

  F.Column.extend('define', function (definition) {
    this._super(definition);

    this.__breakpoints_define__(definition);
  });
})(FooTable);

(function (F) {
  /**
   * An object containing the breakpoints for the plugin.
   * @type {object.<string, number>}
   * @default { "xs": 480, "sm": 768, "md": 992, "lg": 1200 }
   */
  F.Defaults.prototype.breakpoints = null;
  /**
   * Whether or not breakpoints cascade. When set to true all breakpoints larger than the current will also be hidden along with it.
   * @type {boolean}
   * @default false
   */

  F.Defaults.prototype.cascade = false;
  /**
   * Whether or not to calculate breakpoints on the width of the parent element rather than the viewport.
   * @type {boolean}
   * @default false
   */

  F.Defaults.prototype.useParentWidth = false;
  /**
   * A function used to override the default getWidth function with a custom one.
   * @type {function}
   * @default null
   * @example <caption>The below shows what the default getWidth function would look like.</caption>
   * getWidth: function(instance){
   * 	if (instance.o.useParentWidth == true) return instance.$el.parent().width();
   * 	return instance.breakpoints.getViewportWidth();
   * }
   */

  F.Defaults.prototype.getWidth = null;
})(FooTable);

(function ($, F) {
  F.Columns = F.Component.extend(
  /** @lends FooTable.Columns */
  {
    /**
     * The columns class contains all the logic for handling columns.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table -  The parent {@link FooTable.Table} this component belongs to.
     * @returns {FooTable.Columns}
     */
    construct: function construct(table) {
      // call the base class constructor
      this._super(table, true);
      /* PROTECTED */

      /**
       * This provides a shortcut to the {@link FooTable.Table#options} object.
       * @protected
       * @type {FooTable.Table#options}
       */


      this.o = table.o;
      /* PUBLIC */

      /**
       * An array of {@link FooTable.Column} objects created from parsing the options and/or DOM.
       * @type {Array.<FooTable.Column>}
       */

      this.array = [];
      /**
       * The jQuery header row object.
       * @type {jQuery}
       */

      this.$header = null;
      /**
       * Whether or not to display the header row.
       * @type {boolean}
       */

      this.showHeader = table.o.showHeader;
      this._fromHTML = F.is.emptyArray(table.o.columns) && !F.is.promise(table.o.columns);
    },

    /* PROTECTED */

    /**
     * This parses the columns from either the tables rows or the supplied options.
     * @instance
     * @protected
     * @param {object} data - The tables jQuery data object.
     * @returns {jQuery.Promise}
     * @this FooTable.Columns
     */
    parse: function parse(data) {
      var self = this;
      return $.Deferred(function (d) {
        function merge(cols1, cols2) {
          var merged = []; // check if either of the arrays is empty as it can save us having to merge them by index.

          if (cols1.length == 0 || cols2.length == 0) {
            merged = cols1.concat(cols2);
          } else {
            // at this point we have two arrays of column definitions, we now need to merge them based on there index properties
            // first figure out the highest column index provided so we can loop that many times to merge all columns and provide
            // defaults where nothing was specified (fill in the gaps in the array as it were).
            var highest = 0;
            F.arr.each(cols1.concat(cols2), function (c) {
              if (c.index > highest) highest = c.index;
            });
            highest++;

            for (var i = 0, cols1_c, cols2_c; i < highest; i++) {
              cols1_c = {};
              F.arr.each(cols1, function (c) {
                if (c.index == i) {
                  cols1_c = c;
                  return false;
                }
              });
              cols2_c = {};
              F.arr.each(cols2, function (c) {
                if (c.index == i) {
                  cols2_c = c;
                  return false;
                }
              });
              merged.push($.extend(true, {}, cols1_c, cols2_c));
            }
          }

          return merged;
        }

        var json = [],
            html = []; // get the column options from the content

        var $header = self.ft.$el.find('tr.footable-header, thead > tr:last:has([data-breakpoints]), tbody > tr:first:has([data-breakpoints]), thead > tr:last, tbody > tr:first').first(),
            $cell,
            cdata;

        if ($header.length > 0) {
          var virtual = $header.parent().is('tbody') && $header.children().length == $header.children('td').length;
          if (!virtual) self.$header = $header.addClass('footable-header');
          $header.children('td,th').each(function (i, cell) {
            $cell = $(cell);
            cdata = $cell.data();
            cdata.index = i;
            cdata.$el = $cell;
            cdata.virtual = virtual;
            html.push(cdata);
          });
          if (virtual) self.showHeader = false;
        } // get the supplied column options


        if (F.is.array(self.o.columns) && !F.is.emptyArray(self.o.columns)) {
          F.arr.each(self.o.columns, function (c, i) {
            c.index = i;
            json.push(c);
          });
          self.parseFinalize(d, merge(json, html));
        } else if (F.is.promise(self.o.columns)) {
          self.o.columns.then(function (cols) {
            F.arr.each(cols, function (c, i) {
              c.index = i;
              json.push(c);
            });
            self.parseFinalize(d, merge(json, html));
          }, function (xhr) {
            d.reject(Error('Columns ajax request error: ' + xhr.status + ' (' + xhr.statusText + ')'));
          });
        } else {
          self.parseFinalize(d, merge(json, html));
        }
      });
    },

    /**
     * Used to finalize the parsing of columns it is supplied the parse deferred object which must be resolved with an array of {@link FooTable.Column} objects
     * or rejected with an error.
     * @instance
     * @protected
     * @param {jQuery.Deferred} deferred - The deferred object used for parsing.
     * @param {Array.<object>} cols - An array of all merged column definitions.
     */
    parseFinalize: function parseFinalize(deferred, cols) {
      // we now have a merged array of all column definitions supplied to the plugin, time to make the objects.
      var self = this,
          columns = [],
          column;
      F.arr.each(cols, function (def) {
        // if we have a column registered using the definition type then create an instance of that column otherwise just create a default text column.
        if (column = F.columns.contains(def.type) ? F.columns.make(def.type, self.ft, def) : new F.Column(self.ft, def)) columns.push(column);
      });

      if (F.is.emptyArray(columns)) {
        deferred.reject(Error("No columns supplied."));
      } else {
        // make sure to sort by the column index as the merge process may have mixed them up
        columns.sort(function (a, b) {
          return a.index - b.index;
        });
        deferred.resolve(columns);
      }
    },

    /**
     * The columns preinit method is used to parse and check the column options supplied from both static content and through the constructor.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the root table element.
     * @this FooTable.Columns
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.columns event is raised before any UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Columns#"preinit.ft.columns"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      return self.ft.raise('preinit.ft.columns', [data]).then(function () {
        return self.parse(data).then(function (columns) {
          self.array = columns;
          self.showHeader = F.is.boolean(data.showHeader) ? data.showHeader : self.showHeader;
        });
      });
    },

    /**
     * Initializes the columns creating the table header if required.
     * @instance
     * @protected
     * @fires FooTable.Columns#"init.ft.columns"
     * @this FooTable.Columns
     */
    init: function init() {
      var self = this;
      /**
       * The init.ft.columns event is raised after the header row is created/parsed for column data.
       * @event FooTable.Columns#"init.ft.columns"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} instance - The instance of the plugin raising the event.
       * @param {Array.<FooTable.Column>} columns - The array of {@link FooTable.Column} objects parsed from the options and/or DOM.
       */

      return this.ft.raise('init.ft.columns', [self.array]).then(function () {
        self.$create();
      });
    },

    /**
     * Destroys the columns component removing any UI generated from the table.
     * @instance
     * @protected
     * @fires FooTable.Columns#"destroy.ft.columns"
     */
    destroy: function destroy() {
      /**
       * The destroy.ft.columns event is raised before its UI is removed.
       * Calling preventDefault on this event will prevent the component from being destroyed.
       * @event FooTable.Columns#"destroy.ft.columns"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('destroy.ft.columns').then(function () {
        if (!self._fromHTML) self.$header.remove();
      });
    },

    /**
     * The predraw method called from within the {@link FooTable.Table#draw} method.
     * @instance
     * @protected
     * @this FooTable.Columns
     */
    predraw: function predraw() {
      var self = this,
          first = true;
      self.visibleColspan = 0;
      self.firstVisibleIndex = 0;
      self.lastVisibleIndex = 0;
      self.hasHidden = false;
      F.arr.each(self.array, function (col) {
        col.hidden = !self.ft.breakpoints.visible(col.breakpoints);

        if (!col.hidden && col.visible) {
          if (first) {
            self.firstVisibleIndex = col.index;
            first = false;
          }

          self.lastVisibleIndex = col.index;
          self.visibleColspan++;
        }

        if (col.hidden) self.hasHidden = true;
      });
      self.ft.$el.toggleClass('breakpoint', self.hasHidden);
    },

    /**
     * Performs the actual drawing of the columns, hiding or displaying them depending on there breakpoints.
     * @instance
     * @protected
     * @this FooTable.Columns
     */
    draw: function draw() {
      F.arr.each(this.array, function (col) {
        col.$el.css('display', col.hidden || !col.visible ? 'none' : 'table-cell');
      });

      if (!this.showHeader && F.is.jq(this.$header.parent())) {
        this.$header.detach();
      }
    },

    /**
     * Creates the header row for the table from the parsed column definitions.
     * @instance
     * @protected
     * @this FooTable.Columns
     */
    $create: function $create() {
      var self = this;
      self.$header = F.is.jq(self.$header) ? self.$header : $('<tr/>', {
        'class': 'footable-header'
      });
      self.$header.children('th,td').detach();
      F.arr.each(self.array, function (col) {
        self.$header.append(col.$el);
      });

      if (self.showHeader && !F.is.jq(self.$header.parent())) {
        self.ft.$el.children('thead').append(self.$header);
      }
    },

    /**
     * Attempts to return a {@link FooTable.Column} instance when passed the {@link FooTable.Column} instance, the {@link FooTable.Column#name} string or the {@link FooTable.Column#index} number.
     * If supplied a function this will return an array by iterating all columns passing the index and column itself to the supplied callback as arguments.
     * Returning true in the callback will include the column in the result.
     * @instance
     * @param {(FooTable.Column|string|number|function)} column - The column to retrieve.
     * @returns {(Array.<FooTable.Column>|FooTable.Column|null)} The column if one is found otherwise it returns NULL.
     * @example <caption>This example shows retrieving a column by name assuming a column called "id" exists. The <code>columns</code> object is an instance of {@link FooTable.Columns}.</caption>
     * var column = columns.get('id');
     * if (column instanceof FooTable.Column){
     * 	// found the "id" column
     * } else {
     * 	// no column with a name of "id" exists
     * }
     * // to get an array of all hidden columns
     * var columns = columns.get(function(col){
     *  return col.hidden;
     * });
     */
    get: function get(column) {
      if (column instanceof F.Column) return column;
      if (F.is.string(column)) return F.arr.first(this.array, function (col) {
        return col.name == column;
      });
      if (F.is.number(column)) return F.arr.first(this.array, function (col) {
        return col.index == column;
      });
      if (F.is.fn(column)) return F.arr.get(this.array, column);
      return null;
    },

    /**
     * Takes an array of column names, index's or actual {@link FooTable.Column} and ensures that an array of only {@link FooTable.Column} is returned.
     * @instance
     * @param {(Array.<string>|Array.<number>|Array.<FooTable.Column>)} columns - The array of column names, index's or {@link FooTable.Column} to check.
     * @returns {Array.<FooTable.Column>}
     */
    ensure: function ensure(columns) {
      var self = this,
          result = [];
      if (!F.is.array(columns)) return result;
      F.arr.each(columns, function (name) {
        result.push(self.get(name));
      });
      return result;
    }
  });
  F.components.register('columns', F.Columns, 900);
})(jQuery, FooTable);

(function (F) {
  /**
   * An array containing the column options or a jQuery promise that resolves returning the columns. The index of the definitions must match the index of each column as it should appear in the table. For more information on the options available see the {@link FooTable.Column} object.
   * @type {(Array.<object>|jQuery.Promise)}
   * @default []
   * @example <caption>The below shows column definitions for a row defined as <code>{ id: Number, name: String, age: Number }</code>. The ID column has a fixed width, the table is initially sorted on the Name column and the Age column will be hidden on phones.</caption>
   * columns: [
   * 	{ name: 'id', title: 'ID', type: 'number' },
   *	{ name: 'name', title: 'Name', sorted: true, direction: 'ASC' }
   *	{ name: 'age', title: 'Age', type: 'number', breakpoints: 'xs' }
   * ]
   */
  F.Defaults.prototype.columns = [];
  /**
   * Specifies whether or not the column headers should be displayed.
   * @type {boolean}
   * @default true
   */

  F.Defaults.prototype.showHeader = true;
})(FooTable);

(function ($, F) {
  F.Rows = F.Component.extend(
  /** @lends FooTable.Rows */
  {
    /**
     * The rows class contains all the logic for handling rows.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table -  The parent {@link FooTable.Table} this component belongs to.
     * @returns {FooTable.Rows}
     */
    construct: function construct(table) {
      // call the base class constructor
      this._super(table, true);
      /**
       * This provides a shortcut to the {@link FooTable.Table#options} object.
       * @instance
       * @protected
       * @type {FooTable.Table#options}
       */


      this.o = table.o;
      /**
       * The current working array of {@link FooTable.Row} objects.
       * @instance
       * @protected
       * @type {Array.<FooTable.Row>}
       * @default []
       */

      this.array = [];
      /**
       * The base array of rows parsed from either the DOM or the constructor options.
       * The {@link FooTable.Rows#current} member is populated with a shallow clone of this array
       * during the predraw operation before any core or custom components are executed.
       * @instance
       * @protected
       * @type {Array.<FooTable.Row>}
       * @default []
       */

      this.all = [];
      /**
       * Whether or not to display a toggle in each row when it contains hidden columns.
       * @type {boolean}
       * @default true
       */

      this.showToggle = table.o.showToggle;
      /**
       * The CSS selector used to filter row click events. If the event.target property matches the selector the row will be toggled.
       * @type {string}
       * @default "tr,td,.footable-toggle"
       */

      this.toggleSelector = table.o.toggleSelector;
      /**
       * Specifies which column the row toggle is appended to. Supports only two values; "first" and "last"
       * @type {string}
       */

      this.toggleColumn = table.o.toggleColumn;
      /**
       * The text to display when the table has no rows.
       * @type {string}
       */

      this.emptyString = table.o.empty;
      /**
       * Whether or not the first rows details are expanded by default when displayed on a device that hides any columns.
       * @type {boolean}
       */

      this.expandFirst = table.o.expandFirst;
      /**
       * Whether or not all row details are expanded by default when displayed on a device that hides any columns.
       * @type {boolean}
       */

      this.expandAll = table.o.expandAll;
      /**
       * The jQuery object that contains the empty row control.
       * @type {jQuery}
       */

      this.$empty = null;
      this._fromHTML = F.is.emptyArray(table.o.rows) && !F.is.promise(table.o.rows);
    },

    /**
     * This parses the rows from either the tables rows or the supplied options.
     * @instance
     * @protected
     * @returns {jQuery.Promise}
     */
    parse: function parse() {
      var self = this;
      return $.Deferred(function (d) {
        var $rows = self.ft.$el.children('tbody').children('tr');

        if (F.is.array(self.o.rows) && self.o.rows.length > 0) {
          self.parseFinalize(d, self.o.rows);
        } else if (F.is.promise(self.o.rows)) {
          self.o.rows.then(function (rows) {
            self.parseFinalize(d, rows);
          }, function (xhr) {
            d.reject(Error('Rows ajax request error: ' + xhr.status + ' (' + xhr.statusText + ')'));
          });
        } else if (F.is.jq($rows)) {
          self.parseFinalize(d, $rows);
          $rows.detach();
        } else {
          self.parseFinalize(d, []);
        }
      });
    },

    /**
     * Used to finalize the parsing of rows it is supplied the parse deferred object which must be resolved with an array of {@link FooTable.Row} objects
     * or rejected with an error.
     * @instance
     * @protected
     * @param {jQuery.Deferred} deferred - The deferred object used for parsing.
     * @param {(Array.<object>|jQuery)} rows - An array of row values and options or the jQuery object containing all rows.
     */
    parseFinalize: function parseFinalize(deferred, rows) {
      var self = this,
          result = $.map(rows, function (r) {
        return new F.Row(self.ft, self.ft.columns.array, r);
      });
      deferred.resolve(result);
    },

    /**
     * The columns preinit method is used to parse and check the column options supplied from both static content and through the constructor.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the root table element.
     * @fires FooTable.Rows#"preinit.ft.rows"
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.rows event is raised before any UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Rows#"preinit.ft.rows"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      return self.ft.raise('preinit.ft.rows', [data]).then(function () {
        return self.parse().then(function (rows) {
          self.all = rows;
          self.array = self.all.slice(0);
          self.showToggle = F.is.boolean(data.showToggle) ? data.showToggle : self.showToggle;
          self.toggleSelector = F.is.string(data.toggleSelector) ? data.toggleSelector : self.toggleSelector;
          self.toggleColumn = F.is.string(data.toggleColumn) ? data.toggleColumn : self.toggleColumn;
          if (self.toggleColumn != "first" && self.toggleColumn != "last") self.toggleColumn = "first";
          self.emptyString = F.is.string(data.empty) ? data.empty : self.emptyString;
          self.expandFirst = F.is.boolean(data.expandFirst) ? data.expandFirst : self.expandFirst;
          self.expandAll = F.is.boolean(data.expandAll) ? data.expandAll : self.expandAll;
        });
      });
    },

    /**
     * Initializes the rows class using the supplied table and options.
     * @instance
     * @protected
     * @fires FooTable.Rows#"init.ft.rows"
     */
    init: function init() {
      var self = this;
      /**
       * The init.ft.rows event is raised after the the rows are parsed from either the DOM or the options.
       * Calling preventDefault on this event will disable the entire plugin.
       * @event FooTable.Rows#"init.ft.rows"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} instance - The instance of the plugin raising the event.
       * @param {Array.<FooTable.Row>} rows - The array of {@link FooTable.Row} objects parsed from the DOM or the options.
       */

      return self.ft.raise('init.ft.rows', [self.all]).then(function () {
        self.$create();
      });
    },

    /**
     * Destroys the rows component removing any UI generated from the table.
     * @instance
     * @protected
     * @fires FooTable.Rows#"destroy.ft.rows"
     */
    destroy: function destroy() {
      /**
       * The destroy.ft.rows event is raised before its UI is removed.
       * Calling preventDefault on this event will prevent the component from being destroyed.
       * @event FooTable.Rows#"destroy.ft.rows"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('destroy.ft.rows').then(function () {
        F.arr.each(self.array, function (row) {
          row.predraw(!self._fromHTML);
        });
      });
    },

    /**
     * Performs the predraw operations that are required including creating the shallow clone of the {@link FooTable.Rows#array} to work with.
     * @instance
     * @protected
     */
    predraw: function predraw() {
      F.arr.each(this.array, function (row) {
        row.predraw();
      });
      this.array = this.all.slice(0);
    },
    $create: function $create() {
      this.$empty = $('<tr/>', {
        'class': 'footable-empty'
      }).append($('<td/>').text(this.emptyString));
    },

    /**
     * Performs the actual drawing of the table rows.
     * @instance
     * @protected
     */
    draw: function draw() {
      var self = this,
          $tbody = self.ft.$el.children('tbody'),
          first = true; // if we have rows

      if (self.array.length > 0) {
        self.$empty.detach(); // loop through them appending to the tbody and then drawing

        F.arr.each(self.array, function (row) {
          if (self.expandFirst && first || self.expandAll) {
            row.expanded = true;
            first = false;
          }

          row.draw($tbody);
        });
      } else {
        // otherwise display the $empty row
        self.$empty.children('td').attr('colspan', self.ft.columns.visibleColspan);
        $tbody.append(self.$empty);
      }
    },

    /**
     * Loads a JSON array of row objects into the table
     * @instance
     * @param {Array.<object>} data - An array of row objects to load.
     * @param {boolean} [append=false] - Whether or not to append the new rows to the current rows array or to replace them entirely.
     */
    load: function load(data, append) {
      var self = this,
          rows = $.map(data, function (r) {
        return new F.Row(self.ft, self.ft.columns.array, r);
      });
      F.arr.each(this.array, function (row) {
        row.predraw();
      });
      this.all = (F.is.boolean(append) ? append : false) ? this.all.concat(rows) : rows;
      this.array = this.all.slice(0);
      this.ft.draw();
    },

    /**
     * Expands all visible rows.
     * @instance
     */
    expand: function expand() {
      F.arr.each(this.array, function (row) {
        row.expand();
      });
    },

    /**
     * Collapses all visible rows.
     * @instance
     */
    collapse: function collapse() {
      F.arr.each(this.array, function (row) {
        row.collapse();
      });
    }
  });
  F.components.register('rows', F.Rows, 800);
})(jQuery, FooTable);

(function (F) {
  /**
   * An array of JSON objects containing the row data or a jQuery promise that resolves returning the row data.
   * @type {(Array.<object>|jQuery.Promise)}
   * @default []
   */
  F.Defaults.prototype.rows = [];
  /**
   * A string to display when there are no rows in the table.
   * @type {string}
   * @default "No results"
   */

  F.Defaults.prototype.empty = 'No results';
  /**
   * Whether or not the toggle is appended to each row.
   * @type {boolean}
   * @default true
   */

  F.Defaults.prototype.showToggle = true;
  /**
   * The CSS selector used to filter row click events. If the event.target property matches the selector the row will be toggled.
   * @type {string}
   * @default "tr,td,.footable-toggle"
   */

  F.Defaults.prototype.toggleSelector = 'tr,td,.footable-toggle';
  /**
   * Specifies which column to display the row toggle in. The only supported values are "first" or "last".
   * @type {string}
   * @default "first"
   */

  F.Defaults.prototype.toggleColumn = 'first';
  /**
   * Whether or not the first rows details are expanded by default when displayed on a device that hides any columns.
   * @type {boolean}
   */

  F.Defaults.prototype.expandFirst = false;
  /**
   * Whether or not all row details are expanded by default when displayed on a device that hides any columns.
   * @type {boolean}
   */

  F.Defaults.prototype.expandAll = false;
})(FooTable);

(function (F) {
  /**
   * Loads a JSON array of row objects into the table
   * @param {Array.<object>} data - An array of row objects to load.
   * @param {boolean} [append=false] - Whether or not to append the new rows to the current rows array or to replace them entirely.
   */
  F.Table.prototype.loadRows = function (data, append) {
    this.rows.load(data, append);
  };
})(FooTable);

(function (F) {
  F.Filter = F.Class.extend(
  /** @lends FooTable.Filter */
  {
    /**
     * The filter object contains the query to filter by and the columns to apply it to.
     * @constructs
     * @extends FooTable.Class
     * @param {string} name - The name for the filter.
     * @param {(string|FooTable.Query)} query - The query for the filter.
     * @param {Array.<FooTable.Column>} columns - The columns to apply the query to.
     * @param {string} [space="AND"] - How the query treats space chars.
     * @param {boolean} [connectors=true] - Whether or not to replace phrase connectors (+.-_) with spaces.
     * @param {boolean} [ignoreCase=true] - Whether or not ignore case when matching.
     * @param {boolean} [hidden=true] - Whether or not this is a hidden filter.
     * @returns {FooTable.Filter}
     */
    construct: function construct(name, query, columns, space, connectors, ignoreCase, hidden) {
      /**
       * The name of the filter.
       * @instance
       * @type {string}
       */
      this.name = name;
      /**
       * A string specifying how the filter treats space characters. Can be either "OR" or "AND".
       * @instance
       * @type {string}
       */

      this.space = F.is.string(space) && (space == 'OR' || space == 'AND') ? space : 'AND';
      /**
       * Whether or not to replace phrase connectors (+.-_) with spaces before executing the query.
       * @instance
       * @type {boolean}
       */

      this.connectors = F.is.boolean(connectors) ? connectors : true;
      /**
       * Whether or not ignore case when matching.
       * @instance
       * @type {boolean}
       */

      this.ignoreCase = F.is.boolean(ignoreCase) ? ignoreCase : true;
      /**
       * Whether or not this is a hidden filter.
       * @instance
       * @type {boolean}
       */

      this.hidden = F.is.boolean(hidden) ? hidden : false;
      /**
       * The query for the filter.
       * @instance
       * @type {(string|FooTable.Query)}
       */

      this.query = query instanceof F.Query ? query : new F.Query(query, this.space, this.connectors, this.ignoreCase);
      /**
       * The columns to apply the query to.
       * @instance
       * @type {Array.<FooTable.Column>}
       */

      this.columns = columns;
    },

    /**
     * Checks if the current filter matches the supplied string.
     * If the current query property is a string it will be auto converted to a {@link FooTable.Query} object to perform the match.
     * @instance
     * @param {string} str - The string to check.
     * @returns {boolean}
     */
    match: function match(str) {
      if (!F.is.string(str)) return false;

      if (F.is.string(this.query)) {
        this.query = new F.Query(this.query, this.space, this.connectors, this.ignoreCase);
      }

      return this.query instanceof F.Query ? this.query.match(str) : false;
    },

    /**
     * Checks if the current filter matches the supplied {@link FooTable.Row}.
     * @instance
     * @param {FooTable.Row} row - The row to check.
     * @returns {boolean}
     */
    matchRow: function matchRow(row) {
      var self = this,
          text = F.arr.map(row.cells, function (cell) {
        return F.arr.contains(self.columns, cell.column) ? cell.filterValue : null;
      }).join(' ');
      return self.match(text);
    }
  });
})(FooTable);

(function ($, F) {
  F.Filtering = F.Component.extend(
  /** @lends FooTable.Filtering */
  {
    /**
     * The filtering component adds a search input and column selector dropdown to the table allowing users to filter the using space delimited queries.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table - The parent {@link FooTable.Table} object for the component.
     * @returns {FooTable.Filtering}
     */
    construct: function construct(table) {
      // call the constructor of the base class
      this._super(table, table.o.filtering.enabled);
      /* PUBLIC */

      /**
       * The filters to apply to the current {@link FooTable.Rows#array}.
       * @instance
       * @type {Array.<FooTable.Filter>}
       */


      this.filters = table.o.filtering.filters;
      /**
       * The delay in milliseconds before the query is auto applied after a change.
       * @instance
       * @type {number}
       */

      this.delay = table.o.filtering.delay;
      /**
       * The minimum number of characters allowed in the search input before it is auto applied.
       * @instance
       * @type {number}
       */

      this.min = table.o.filtering.min;
      /**
       * Specifies how whitespace in a filter query is handled.
       * @instance
       * @type {string}
       */

      this.space = table.o.filtering.space;
      /**
       * Whether or not to replace phrase connectors (+.-_) with spaces before executing the query.
       * @instance
       * @type {boolean}
       */

      this.connectors = table.o.filtering.connectors;
      /**
       * Whether or not ignore case when matching.
       * @instance
       * @type {boolean}
       */

      this.ignoreCase = table.o.filtering.ignoreCase;
      /**
       * Whether or not search queries are treated as phrases when matching.
       * @instance
       * @type {boolean}
       */

      this.exactMatch = table.o.filtering.exactMatch;
      /**
       * The placeholder text to display within the search $input.
       * @instance
       * @type {string}
       */

      this.placeholder = table.o.filtering.placeholder;
      /**
       * The title to display at the top of the search input column select.
       * @type {string}
       */

      this.dropdownTitle = table.o.filtering.dropdownTitle;
      /**
       * The position of the $search input within the filtering rows cell.
       * @type {string}
       */

      this.position = table.o.filtering.position;
      /**
       * The jQuery row object that contains all the filtering specific elements.
       * @instance
       * @type {jQuery}
       */

      this.$row = null;
      /**
       * The jQuery cell object that contains the search input and column selector.
       * @instance
       * @type {jQuery}
       */

      this.$cell = null;
      /**
       * The jQuery object of the column selector dropdown.
       * @instance
       * @type {jQuery}
       */

      this.$dropdown = null;
      /**
       * The jQuery object of the search input.
       * @instance
       * @type {jQuery}
       */

      this.$input = null;
      /**
       * The jQuery object of the search button.
       * @instance
       * @type {jQuery}
       */

      this.$button = null;
      /* PRIVATE */

      /**
       * The timeout ID for the filter changed event.
       * @instance
       * @private
       * @type {?number}
       */

      this._filterTimeout = null;
      /**
       * The regular expression used to check for encapsulating quotations.
       * @instance
       * @private
       * @type {RegExp}
       */

      this._exactRegExp = /^"(.*?)"$/;
    },

    /* PROTECTED */

    /**
     * Checks the supplied data and options for the filtering component.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the parent table.
     * @fires FooTable.Filtering#"preinit.ft.filtering"
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.filtering event is raised before the UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Filtering#"preinit.ft.filtering"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      return self.ft.raise('preinit.ft.filtering').then(function () {
        // first check if filtering is enabled via the class being applied
        if (self.ft.$el.hasClass('footable-filtering')) self.enabled = true; // then check if the data-filtering-enabled attribute has been set

        self.enabled = F.is.boolean(data.filtering) ? data.filtering : self.enabled; // if filtering is not enabled exit early as we don't need to do anything else

        if (!self.enabled) return;
        self.space = F.is.string(data.filterSpace) ? data.filterSpace : self.space;
        self.min = F.is.number(data.filterMin) ? data.filterMin : self.min;
        self.connectors = F.is.boolean(data.filterConnectors) ? data.filterConnectors : self.connectors;
        self.ignoreCase = F.is.boolean(data.filterIgnoreCase) ? data.filterIgnoreCase : self.ignoreCase;
        self.exactMatch = F.is.boolean(data.filterExactMatch) ? data.filterExactMatch : self.exactMatch;
        self.delay = F.is.number(data.filterDelay) ? data.filterDelay : self.delay;
        self.placeholder = F.is.string(data.filterPlaceholder) ? data.filterPlaceholder : self.placeholder;
        self.dropdownTitle = F.is.string(data.filterDropdownTitle) ? data.filterDropdownTitle : self.dropdownTitle;
        self.filters = F.is.array(data.filterFilters) ? self.ensure(data.filterFilters) : self.ensure(self.filters);
        if (self.ft.$el.hasClass('footable-filtering-left')) self.position = 'left';
        if (self.ft.$el.hasClass('footable-filtering-center')) self.position = 'center';
        if (self.ft.$el.hasClass('footable-filtering-right')) self.position = 'right';
        self.position = F.is.string(data.filterPosition) ? data.filterPosition : self.position;
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Initializes the filtering component for the plugin.
     * @instance
     * @protected
     * @fires FooTable.Filtering#"init.ft.filtering"
     */
    init: function init() {
      var self = this;
      /**
       * The init.ft.filtering event is raised before its UI is generated.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Filtering#"init.ft.filtering"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      return self.ft.raise('init.ft.filtering').then(function () {
        self.$create();
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Destroys the filtering component removing any UI from the table.
     * @instance
     * @protected
     * @fires FooTable.Filtering#"destroy.ft.filtering"
     */
    destroy: function destroy() {
      /**
       * The destroy.ft.filtering event is raised before its UI is removed.
       * Calling preventDefault on this event will prevent the component from being destroyed.
       * @event FooTable.Filtering#"destroy.ft.filtering"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      return self.ft.raise('destroy.ft.filtering').then(function () {
        self.ft.$el.removeClass('footable-filtering').find('thead > tr.footable-filtering').remove();
      });
    },

    /**
     * Creates the filtering UI from the current options setting the various jQuery properties of this component.
     * @instance
     * @protected
     * @this FooTable.Filtering
     */
    $create: function $create() {
      var self = this; // generate the cell that actually contains all the UI.

      var $form_grp = $('<div/>', {
        'class': 'form-group footable-filtering-search'
      }).append($('<label/>', {
        'class': 'sr-only',
        text: 'Search'
      })),
          $input_grp = $('<div/>', {
        'class': 'input-group'
      }).appendTo($form_grp),
          $input_grp_btn = $('<div/>', {
        'class': 'input-group-btn'
      }),
          $dropdown_toggle = $('<button/>', {
        type: 'button',
        'class': 'btn btn-default dropdown-toggle'
      }).on('click', {
        self: self
      }, self._onDropdownToggleClicked).append($('<span/>', {
        'class': 'caret'
      })),
          position;

      switch (self.position) {
        case 'left':
          position = 'footable-filtering-left';
          break;

        case 'center':
          position = 'footable-filtering-center';
          break;

        default:
          position = 'footable-filtering-right';
          break;
      }

      self.ft.$el.addClass('footable-filtering').addClass(position); // add it to a row and then populate it with the search input and column selector dropdown.

      self.$row = $('<tr/>', {
        'class': 'footable-filtering'
      }).prependTo(self.ft.$el.children('thead'));
      self.$cell = $('<th/>').attr('colspan', self.ft.columns.visibleColspan).appendTo(self.$row);
      self.$form = $('<form/>', {
        'class': 'form-inline'
      }).append($form_grp).appendTo(self.$cell);
      self.$input = $('<input/>', {
        type: 'text',
        'class': 'form-control',
        placeholder: self.placeholder
      });
      self.$button = $('<button/>', {
        type: 'button',
        'class': 'btn btn-primary'
      }).on('click', {
        self: self
      }, self._onSearchButtonClicked).append($('<span/>', {
        'class': 'fooicon fooicon-search'
      }));
      self.$dropdown = $('<ul/>', {
        'class': 'dropdown-menu dropdown-menu-right'
      });

      if (!F.is.emptyString(self.dropdownTitle)) {
        self.$dropdown.append($('<li/>', {
          'class': 'dropdown-header',
          'text': self.dropdownTitle
        }));
      }

      self.$dropdown.append(F.arr.map(self.ft.columns.array, function (col) {
        return col.filterable ? $('<li/>').append($('<a/>', {
          'class': 'checkbox'
        }).append($('<label/>', {
          text: col.title
        }).prepend($('<input/>', {
          type: 'checkbox',
          checked: true
        }).data('__FooTableColumn__', col)))) : null;
      }));

      if (self.delay > 0) {
        self.$input.on('keypress keyup paste', {
          self: self
        }, self._onSearchInputChanged);
        self.$dropdown.on('click', 'input[type="checkbox"]', {
          self: self
        }, self._onSearchColumnClicked);
      }

      $input_grp_btn.append(self.$button, $dropdown_toggle, self.$dropdown);
      $input_grp.append(self.$input, $input_grp_btn);
    },

    /**
     * Performs the filtering of rows before they are appended to the page.
     * @instance
     * @protected
     */
    predraw: function predraw() {
      if (F.is.emptyArray(this.filters)) return;
      var self = this;
      self.ft.rows.array = $.grep(self.ft.rows.array, function (r) {
        return r.filtered(self.filters);
      });
    },

    /**
     * As the rows are drawn by the {@link FooTable.Rows#draw} method this simply updates the colspan for the UI.
     * @instance
     * @protected
     */
    draw: function draw() {
      this.$cell.attr('colspan', this.ft.columns.visibleColspan);
      var search = this.find('search');

      if (search instanceof F.Filter) {
        var query = search.query.val();

        if (this.exactMatch && this._exactRegExp.test(query)) {
          query = query.replace(this._exactRegExp, '$1');
        }

        this.$input.val(query);
      } else {
        this.$input.val(null);
      }

      this.setButton(!F.arr.any(this.filters, function (f) {
        return !f.hidden;
      }));
    },

    /* PUBLIC */

    /**
     * Adds or updates the filter using the supplied name, query and columns.
     * @instance
     * @param {(string|FooTable.Filter|object)} nameOrFilter - The name for the filter or the actual filter object itself.
     * @param {(string|FooTable.Query)} [query] - The query for the filter. This is only optional when the first parameter is a filter object.
     * @param {(Array.<number>|Array.<string>|Array.<FooTable.Column>)} [columns] - The columns to apply the filter to.
     * 	If not supplied the filter will be applied to all selected columns in the search input dropdown.
     * @param {boolean} [ignoreCase=true] - Whether or not ignore case when matching.
     * @param {boolean} [connectors=true] - Whether or not to replace phrase connectors (+.-_) with spaces.
     * @param {string} [space="AND"] - How the query treats space chars.
     * @param {boolean} [hidden=true] - Whether or not this is a hidden filter.
     */
    addFilter: function addFilter(nameOrFilter, query, columns, ignoreCase, connectors, space, hidden) {
      var f = this.createFilter(nameOrFilter, query, columns, ignoreCase, connectors, space, hidden);

      if (f instanceof F.Filter) {
        this.removeFilter(f.name);
        this.filters.push(f);
      }
    },

    /**
     * Removes the filter using the supplied name if it exists.
     * @instance
     * @param {string} name - The name of the filter to remove.
     */
    removeFilter: function removeFilter(name) {
      F.arr.remove(this.filters, function (f) {
        return f.name == name;
      });
    },

    /**
     * Performs the required steps to handle filtering including the raising of the {@link FooTable.Filtering#"before.ft.filtering"} and {@link FooTable.Filtering#"after.ft.filtering"} events.
     * @instance
     * @returns {jQuery.Promise}
     * @fires FooTable.Filtering#"before.ft.filtering"
     * @fires FooTable.Filtering#"after.ft.filtering"
     */
    filter: function filter() {
      var self = this;
      self.filters = self.ensure(self.filters);
      /**
       * The before.ft.filtering event is raised before a filter is applied and allows listeners to modify the filter or cancel it completely by calling preventDefault on the jQuery.Event object.
       * @event FooTable.Filtering#"before.ft.filtering"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {Array.<FooTable.Filter>} filters - The filters that are about to be applied.
       */

      return self.ft.raise('before.ft.filtering', [self.filters]).then(function () {
        self.filters = self.ensure(self.filters);
        return self.ft.draw().then(function () {
          /**
           * The after.ft.filtering event is raised after a filter has been applied.
           * @event FooTable.Filtering#"after.ft.filtering"
           * @param {jQuery.Event} e - The jQuery.Event object for the event.
           * @param {FooTable.Table} ft - The instance of the plugin raising the event.
           * @param {FooTable.Filter} filter - The filters that were applied.
           */
          self.ft.raise('after.ft.filtering', [self.filters]);
        });
      });
    },

    /**
     * Removes the current search filter.
     * @instance
     * @returns {jQuery.Promise}
     * @fires FooTable.Filtering#"before.ft.filtering"
     * @fires FooTable.Filtering#"after.ft.filtering"
     */
    clear: function clear() {
      this.filters = F.arr.get(this.filters, function (f) {
        return f.hidden;
      });
      return this.filter();
    },

    /**
     * Toggles the button icon between the search and clear icons based on the supplied value.
     * @instance
     * @param {boolean} search - Whether or not to display the search icon.
     */
    setButton: function setButton(search) {
      if (!search) {
        this.$button.children('.fooicon').removeClass('fooicon-search').addClass('fooicon-remove');
      } else {
        this.$button.children('.fooicon').removeClass('fooicon-remove').addClass('fooicon-search');
      }
    },

    /**
     * Finds a filter by name.
     * @param {string} name - The name of the filter to find.
     * @returns {(FooTable.Filter|null)}
     */
    find: function find(name) {
      return F.arr.first(this.filters, function (f) {
        return f.name == name;
      });
    },

    /**
     * Gets an array of {@link FooTable.Column} to apply the search filter to. This also doubles as the default columns for filters which do not specify any columns.
     * @instance
     * @returns {Array.<FooTable.Column>}
     */
    columns: function columns() {
      if (F.is.jq(this.$dropdown)) {
        // if we have a dropdown containing the column names get the selected columns from there
        return this.$dropdown.find('input:checked').map(function () {
          return $(this).data('__FooTableColumn__');
        }).get();
      } else {
        // otherwise find all columns that are set to be filterable.
        return this.ft.columns.get(function (c) {
          return c.filterable;
        });
      }
    },

    /**
     * Takes an array of plain objects containing the filter values or actual {@link FooTable.Filter} objects and ensures that an array of only {@link FooTable.Filter} is returned.
     * If supplied a plain object that object must contain a name, query and columns properties which are used to create a new {@link FooTable.Filter}.
     * @instance
     * @param {({name: string, query: (string|FooTable.Query), columns: (Array.<string>|Array.<number>|Array.<FooTable.Column>)}|Array.<FooTable.Filter>)} filters - The array of filters to check.
     * @returns {Array.<FooTable.Filter>}
     */
    ensure: function ensure(filters) {
      var self = this,
          parsed = [],
          filterable = self.columns();

      if (!F.is.emptyArray(filters)) {
        F.arr.each(filters, function (f) {
          f = self._ensure(f, filterable);
          if (f instanceof F.Filter) parsed.push(f);
        });
      }

      return parsed;
    },

    /**
     * Creates a new filter using the supplied object or individual parameters to populate it.
     * @instance
     * @param {(string|FooTable.Filter|object)} nameOrObject - The name for the filter or the actual filter object itself.
     * @param {(string|FooTable.Query)} [query] - The query for the filter. This is only optional when the first parameter is a filter object.
     * @param {(Array.<number>|Array.<string>|Array.<FooTable.Column>)} [columns] - The columns to apply the filter to.
     * 	If not supplied the filter will be applied to all selected columns in the search input dropdown.
     * @param {boolean} [ignoreCase=true] - Whether or not ignore case when matching.
     * @param {boolean} [connectors=true] - Whether or not to replace phrase connectors (+.-_) with spaces.
     * @param {string} [space="AND"] - How the query treats space chars.
     * @param {boolean} [hidden=true] - Whether or not this is a hidden filter.
     * @returns {*}
     */
    createFilter: function createFilter(nameOrObject, query, columns, ignoreCase, connectors, space, hidden) {
      if (F.is.string(nameOrObject)) {
        nameOrObject = {
          name: nameOrObject,
          query: query,
          columns: columns,
          ignoreCase: ignoreCase,
          connectors: connectors,
          space: space,
          hidden: hidden
        };
      }

      return this._ensure(nameOrObject, this.columns());
    },

    /* PRIVATE */
    _ensure: function _ensure(filter, selectedColumns) {
      if ((F.is.hash(filter) || filter instanceof F.Filter) && !F.is.emptyString(filter.name) && (!F.is.emptyString(filter.query) || filter.query instanceof F.Query)) {
        filter.columns = F.is.emptyArray(filter.columns) ? selectedColumns : this.ft.columns.ensure(filter.columns);
        filter.ignoreCase = F.is.boolean(filter.ignoreCase) ? filter.ignoreCase : this.ignoreCase;
        filter.connectors = F.is.boolean(filter.connectors) ? filter.connectors : this.connectors;
        filter.hidden = F.is.boolean(filter.hidden) ? filter.hidden : false;
        filter.space = F.is.string(filter.space) && (filter.space === 'AND' || filter.space === 'OR') ? filter.space : this.space;
        filter.query = F.is.string(filter.query) ? new F.Query(filter.query, filter.space, filter.connectors, filter.ignoreCase) : filter.query;
        return filter instanceof F.Filter ? filter : new F.Filter(filter.name, filter.query, filter.columns, filter.space, filter.connectors, filter.ignoreCase, filter.hidden);
      }

      return null;
    },

    /**
     * Handles the change event for the {@link FooTable.Filtering#$input}.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onSearchInputChanged: function _onSearchInputChanged(e) {
      var self = e.data.self;
      var alpha = e.type == 'keypress' && !F.is.emptyString(String.fromCharCode(e.charCode)),
          ctrl = e.type == 'keyup' && (e.which == 8 || e.which == 46),
          paste = e.type == 'paste'; // backspace & delete
      // if alphanumeric characters or specific control characters

      if (alpha || ctrl || paste) {
        if (e.which == 13) e.preventDefault();
        if (self._filterTimeout != null) clearTimeout(self._filterTimeout);
        self._filterTimeout = setTimeout(function () {
          self._filterTimeout = null;
          var query = self.$input.val();

          if (query.length >= self.min) {
            if (self.exactMatch && !self._exactRegExp.test(query)) {
              query = '"' + query + '"';
            }

            self.addFilter('search', query);
            self.filter();
          } else if (F.is.emptyString(query)) {
            self.clear();
          }
        }, self.delay);
      }
    },

    /**
     * Handles the click event for the {@link FooTable.Filtering#$button}.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onSearchButtonClicked: function _onSearchButtonClicked(e) {
      e.preventDefault();
      var self = e.data.self;
      if (self._filterTimeout != null) clearTimeout(self._filterTimeout);
      var $icon = self.$button.children('.fooicon');
      if ($icon.hasClass('fooicon-remove')) self.clear();else {
        var query = self.$input.val();

        if (query.length >= self.min) {
          if (self.exactMatch && !self._exactRegExp.test(query)) {
            query = '"' + query + '"';
          }

          self.addFilter('search', query);
          self.filter();
        }
      }
    },

    /**
     * Handles the click event for the column checkboxes in the {@link FooTable.Filtering#$dropdown}.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onSearchColumnClicked: function _onSearchColumnClicked(e) {
      var self = e.data.self;
      if (self._filterTimeout != null) clearTimeout(self._filterTimeout);
      self._filterTimeout = setTimeout(function () {
        self._filterTimeout = null;
        var $icon = self.$button.children('.fooicon');

        if ($icon.hasClass('fooicon-remove')) {
          $icon.removeClass('fooicon-remove').addClass('fooicon-search');
          self.addFilter('search', self.$input.val());
          self.filter();
        }
      }, self.delay);
    },

    /**
     * Handles the click event for the {@link FooTable.Filtering#$dropdown} toggle.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onDropdownToggleClicked: function _onDropdownToggleClicked(e) {
      e.preventDefault();
      e.stopPropagation();
      var self = e.data.self;
      self.$dropdown.parent().toggleClass('open');
      if (self.$dropdown.parent().hasClass('open')) $(document).on('click.footable', {
        self: self
      }, self._onDocumentClicked);else $(document).off('click.footable', self._onDocumentClicked);
    },

    /**
     * Checks all click events when the dropdown is visible and closes the menu if the target is not the dropdown.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onDocumentClicked: function _onDocumentClicked(e) {
      if ($(e.target).closest('.dropdown-menu').length == 0) {
        e.preventDefault();
        var self = e.data.self;
        self.$dropdown.parent().removeClass('open');
        $(document).off('click.footable', self._onDocumentClicked);
      }
    }
  });
  F.components.register('filtering', F.Filtering, 500);
})(jQuery, FooTable);

(function (F) {
  F.Query = F.Class.extend(
  /** @lends FooTable.Query */
  {
    /**
     * The query object is used to parse and test the filtering component's queries
     * @constructs
     * @extends FooTable.Class
     * @param {string} query - The string value of the query.
     * @param {string} [space="AND"] - How the query treats whitespace.
     * @param {boolean} [connectors=true] - Whether or not to replace phrase connectors (+.-_) with spaces.
     * @param {boolean} [ignoreCase=true] - Whether or not ignore case when matching.
     * @returns {FooTable.Query}
     */
    construct: function construct(query, space, connectors, ignoreCase) {
      /* PRIVATE */

      /**
       * Holds the previous value of the query and is used internally in the {@link FooTable.Query#val} method.
       * @type {string}
       * @private
       */
      this._original = null;
      /**
       * Holds the value for the query. Access to this variable is provided through the {@link FooTable.Query#val} method.
       * @type {string}
       * @private
       */

      this._value = null;
      /* PUBLIC */

      /**
       * A string specifying how the query treats whitespace. Can be either "OR" or "AND".
       * @type {string}
       */

      this.space = F.is.string(space) && (space == 'OR' || space == 'AND') ? space : 'AND';
      /**
       * Whether or not to replace phrase connectors (+.-_) with spaces before executing the query.
       * @instance
       * @type {boolean}
       */

      this.connectors = F.is.boolean(connectors) ? connectors : true;
      /**
       * Whether or not ignore case when matching.
       * @instance
       * @type {boolean}
       */

      this.ignoreCase = F.is.boolean(ignoreCase) ? ignoreCase : true;
      /**
       * The left side of the query if one exists. OR takes precedence over AND.
       * @type {FooTable.Query}
       * @example <caption>The below shows what is meant by the "left" side of a query</caption>
       * query = "Dave AND Mary" - "Dave" is the left side of the query.
       * query = "Dave AND Mary OR John" - "Dave and Mary" is the left side of the query.
       */

      this.left = null;
      /**
       * The right side of the query if one exists. OR takes precedence over AND.
       * @type {FooTable.Query}
       * @example <caption>The below shows what is meant by the "right" side of a query</caption>
       * query = "Dave AND Mary" - "Mary" is the right side of the query.
       * query = "Dave AND Mary OR John" - "John" is the right side of the query.
       */

      this.right = null;
      /**
       * The parsed parts of the query. This contains the information used to actually perform a match against a string.
       * @type {Array}
       */

      this.parts = [];
      /**
       * The type of operand to apply to the results of the individual parts of the query.
       * @type {string}
       */

      this.operator = null;
      this.val(query);
    },

    /**
     * Gets or sets the value for the query. During set the value is parsed setting all properties as required.
     * @param {string} [value] - If supplied the value to set for this query.
     * @returns {(string|undefined)}
     */
    val: function val(value) {
      // get
      if (F.is.emptyString(value)) return this._value; // set

      if (F.is.emptyString(this._original)) this._original = value;else if (this._original == value) return;
      this._value = value;

      this._parse();
    },

    /**
     * Tests the supplied string against the query.
     * @param {string} str - The string to test.
     * @returns {boolean}
     */
    match: function match(str) {
      if (F.is.emptyString(this.operator) || this.operator === 'OR') return this._left(str, false) || this._match(str, false) || this._right(str, false);
      if (this.operator === 'AND') return this._left(str, true) && this._match(str, true) && this._right(str, true);
    },

    /**
     * Matches this queries parts array against the supplied string.
     * @param {string} str - The string to test.
     * @param {boolean} def - The default value to return based on the operand.
     * @returns {boolean}
     * @private
     */
    _match: function _match(str, def) {
      var self = this,
          result = false,
          empty = F.is.emptyString(str);
      if (F.is.emptyArray(self.parts) && self.left instanceof F.Query) return def;
      if (F.is.emptyArray(self.parts)) return result;

      if (self.space === 'OR') {
        // with OR we give the str every part to test and if any match it is a success, we do exit early if a negated match occurs
        F.arr.each(self.parts, function (p) {
          if (p.empty && empty) {
            result = true;

            if (p.negate) {
              result = false;
              return result;
            }
          } else {
            var match = (p.exact ? F.str.containsExact : F.str.contains)(str, p.query, self.ignoreCase);
            if (match && !p.negate) result = true;

            if (match && p.negate) {
              result = false;
              return result;
            }
          }
        });
      } else {
        // otherwise with AND we check until the first failure and then exit
        result = true;
        F.arr.each(self.parts, function (p) {
          if (p.empty) {
            if (!empty && !p.negate || empty && p.negate) result = false;
            return result;
          } else {
            var match = (p.exact ? F.str.containsExact : F.str.contains)(str, p.query, self.ignoreCase);
            if (!match && !p.negate || match && p.negate) result = false;
            return result;
          }
        });
      }

      return result;
    },

    /**
     * Matches the left side of the query if one exists with the supplied string.
     * @param {string} str - The string to test.
     * @param {boolean} def - The default value to return based on the operand.
     * @returns {boolean}
     * @private
     */
    _left: function _left(str, def) {
      return this.left instanceof F.Query ? this.left.match(str) : def;
    },

    /**
     * Matches the right side of the query if one exists with the supplied string.
     * @param {string} str - The string to test.
     * @param {boolean} def - The default value to return based on the operand.
     * @returns {boolean}
     * @private
     */
    _right: function _right(str, def) {
      return this.right instanceof F.Query ? this.right.match(str) : def;
    },

    /**
     * Parses the private {@link FooTable.Query#_value} property and populates the object.
     * @private
     */
    _parse: function _parse() {
      if (F.is.emptyString(this._value)) return; // OR takes precedence so test for it first

      if (/\sOR\s/.test(this._value)) {
        // we have an OR so split the value on the first occurrence of OR to get the left and right sides of the statement
        this.operator = 'OR';

        var or = this._value.split(/(?:\sOR\s)(.*)?/);

        this.left = new F.Query(or[0], this.space, this.connectors, this.ignoreCase);
        this.right = new F.Query(or[1], this.space, this.connectors, this.ignoreCase);
      } else if (/\sAND\s/.test(this._value)) {
        // there are no more OR's so start with AND
        this.operator = 'AND';

        var and = this._value.split(/(?:\sAND\s)(.*)?/);

        this.left = new F.Query(and[0], this.space, this.connectors, this.ignoreCase);
        this.right = new F.Query(and[1], this.space, this.connectors, this.ignoreCase);
      } else {
        // we have no more statements to parse so set the parts array by parsing each part of the remaining query
        var self = this;
        this.parts = F.arr.map(this._value.match(/(?:[^\s"]+|"[^"]*")+/g), function (str) {
          return self._part(str);
        });
      }
    },

    /**
     * Parses a single part of a query into an object to use during matching.
     * @param {string} str - The string representation of the part.
     * @returns {{query: string, negate: boolean, phrase: boolean, exact: boolean}}
     * @private
     */
    _part: function _part(str) {
      var p = {
        query: str,
        negate: false,
        phrase: false,
        exact: false,
        empty: false
      }; // support for NEGATE operand - (minus sign). Remove this first so we can get onto phrase checking

      if (F.str.startsWith(p.query, '-')) {
        p.query = F.str.from(p.query, '-');
        p.negate = true;
      } // support for PHRASES (exact matches)


      if (/^"(.*?)"$/.test(p.query)) {
        // if surrounded in quotes strip them and nothing else
        p.query = p.query.replace(/^"(.*?)"$/, '$1');
        p.phrase = true;
        p.exact = true;
      } else if (this.connectors && /(?:\w)+?([-_\+\.])(?:\w)+?/.test(p.query)) {
        // otherwise replace supported phrase connectors (-_+.) with spaces
        p.query = p.query.replace(/(?:\w)+?([-_\+\.])(?:\w)+?/g, function (match, p1) {
          return match.replace(p1, ' ');
        });
        p.phrase = true;
      }

      p.empty = p.phrase && F.is.emptyString(p.query);
      return p;
    }
  });
})(FooTable);

(function (F) {
  /**
   * The value used by the filtering component during filter operations. Must be a string and can be set using the data-filter-value attribute on the cell itself.
   * If this is not supplied it is set to the result of the toString method called on the value for the cell. Added by the {@link FooTable.Filtering} component.
   * @type {string}
   * @default null
   */
  F.Cell.prototype.filterValue = null; // this is used to define the filtering specific properties on cell creation

  F.Cell.prototype.__filtering_define__ = function (valueOrElement) {
    this.filterValue = this.column.filterValue.call(this.column, valueOrElement);
  }; // this is used to update the filterValue property whenever the cell value is changed


  F.Cell.prototype.__filtering_val__ = function (value) {
    if (F.is.defined(value)) {
      // set only
      this.filterValue = this.column.filterValue.call(this.column, value);
    }
  }; // overrides the public define method and replaces it with our own


  F.Cell.extend('define', function (valueOrElement) {
    this._super(valueOrElement);

    this.__filtering_define__(valueOrElement);
  }); // overrides the public val method and replaces it with our own

  F.Cell.extend('val', function (value) {
    var val = this._super(value);

    this.__filtering_val__(value);

    return val;
  });
})(FooTable);

(function ($, F) {
  /**
   * Whether or not the column can be used during filtering. Added by the {@link FooTable.Filtering} component.
   * @type {boolean}
   * @default true
   */
  F.Column.prototype.filterable = true;
  /**
   * This is supplied either the cell value or jQuery object to parse. A string value must be returned from this method and will be used during filtering operations.
   * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
   * @returns {string}
   * @this FooTable.Column
   */

  F.Column.prototype.filterValue = function (valueOrElement) {
    // if we have an element or a jQuery object use jQuery to get the value
    if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) {
      var data = $(valueOrElement).data('filterValue');
      return F.is.defined(data) ? '' + data : $(valueOrElement).text();
    } // if options are supplied with the value


    if (F.is.hash(valueOrElement) && F.is.hash(valueOrElement.options)) {
      if (F.is.string(valueOrElement.options.filterValue)) return valueOrElement.options.filterValue;
      if (F.is.defined(valueOrElement.value)) valueOrElement = valueOrElement.value;
    }

    if (F.is.defined(valueOrElement) && valueOrElement != null) return valueOrElement + ''; // use the native toString of the value

    return ''; // otherwise we have no value so return an empty string
  }; // this is used to define the filtering specific properties on column creation


  F.Column.prototype.__filtering_define__ = function (definition) {
    this.filterable = F.is.boolean(definition.filterable) ? definition.filterable : this.filterable;
    this.filterValue = F.checkFnValue(this, definition.filterValue, this.filterValue);
  }; // overrides the public define method and replaces it with our own


  F.Column.extend('define', function (definition) {
    this._super(definition); // call the base so we don't have to redefine any previously set properties


    this.__filtering_define__(definition); // then call our own

  });
})(jQuery, FooTable);

(function (F) {
  /**
   * An object containing the filtering options for the plugin. Added by the {@link FooTable.Filtering} component.
   * @type {object}
   * @prop {boolean} enabled=false - Whether or not to allow filtering on the table.
   * @prop {({name: string, query: (string|FooTable.Query), columns: (Array.<string>|Array.<number>|Array.<FooTable.Column>)}|Array.<FooTable.Filter>)} filters - The filters to apply to the current {@link FooTable.Rows#array}.
   * @prop {number} delay=1200 - The delay in milliseconds before the query is auto applied after a change (any value equal to or less than zero will disable this).
   * @prop {number} min=1 - The minimum number of characters allowed in the search input before it is auto applied.
   * @prop {string} space="AND" - Specifies how whitespace in a filter query is handled.
   * @prop {string} placeholder="Search" - The string used as the placeholder for the search input.
   * @prop {string} dropdownTitle=null - The title to display at the top of the search input column select.
   * @prop {string} position="right" - The string used to specify the alignment of the search input.
   * @prop {string} connectors=true - Whether or not to replace phrase connectors (+.-_) with space before executing the query.
   * @prop {boolean} ignoreCase=true - Whether or not ignore case when matching.
   * @prop {boolean} exactMatch=false - Whether or not search queries are treated as phrases when matching.
   */
  F.Defaults.prototype.filtering = {
    enabled: false,
    filters: [],
    delay: 1200,
    min: 1,
    space: 'AND',
    placeholder: 'Search',
    dropdownTitle: null,
    position: 'right',
    connectors: true,
    ignoreCase: true,
    exactMatch: false
  };
})(FooTable);

(function (F) {
  /**
   * Checks if the row is filtered using the supplied filters.
   * @this FooTable.Row
   * @param {Array.<FooTable.Filter>} filters - The filters to apply.
   * @returns {boolean}
   */
  F.Row.prototype.filtered = function (filters) {
    var result = true,
        self = this;
    F.arr.each(filters, function (f) {
      if ((result = f.matchRow(self)) == false) return false;
    });
    return result;
  };
})(FooTable);

(function ($, F) {
  F.Sorter = F.Class.extend(
  /** @lends FooTable.Sorter */
  {
    /**
     * The sorter object contains the column and direction to sort by.
     * @constructs
     * @extends FooTable.Class
     * @param {FooTable.Column} column - The column to sort.
     * @param {string} direction - The direction to sort by.
     * @returns {FooTable.Sorter}
     */
    construct: function construct(column, direction) {
      /**
       * The column to sort.
       * @type {FooTable.Column}
       */
      this.column = column;
      /**
       * The direction to sort by.
       * @type {string}
       */

      this.direction = direction;
    }
  });
})(jQuery, FooTable);

(function ($, F) {
  F.Sorting = F.Component.extend(
  /** @lends FooTable.Sorting */
  {
    /**
     * The sorting component adds a small sort button to specified column headers allowing users to sort those columns in the table.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table - The parent {@link FooTable.Table} object for the component.
     * @returns {FooTable.Sorting}
     */
    construct: function construct(table) {
      // call the constructor of the base class
      this._super(table, table.o.sorting.enabled);
      /* PROTECTED */

      /**
       * This provides a shortcut to the {@link FooTable.Table#options}.[sorting]{@link FooTable.Defaults#sorting} object.
       * @instance
       * @protected
       * @type {object}
       */


      this.o = table.o.sorting;
      /**
       * The current sorted column.
       * @instance
       * @type {FooTable.Column}
       */

      this.column = null;
      /**
       * Whether or not to allow sorting to occur, should be set using the {@link FooTable.Sorting#toggleAllowed} method.
       * @instance
       * @type {boolean}
       */

      this.allowed = true;
      /**
       * The initial sort state of the table, this value is used for determining if the sorting has occurred or to reset the state to default.
       * @instance
       * @type {{isset: boolean, rows: Array.<FooTable.Row>, column: string, direction: ?string}}
       */

      this.initial = null;
    },

    /* PROTECTED */

    /**
     * Checks the supplied data and options for the sorting component.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the parent table.
     * @fires FooTable.Sorting#"preinit.ft.sorting"
     * @this FooTable.Sorting
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.sorting event is raised before the UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Sorting#"preinit.ft.sorting"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      this.ft.raise('preinit.ft.sorting', [data]).then(function () {
        if (self.ft.$el.hasClass('footable-sorting')) self.enabled = true;
        self.enabled = F.is.boolean(data.sorting) ? data.sorting : self.enabled;
        if (!self.enabled) return;
        self.column = F.arr.first(self.ft.columns.array, function (col) {
          return col.sorted;
        });
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Initializes the sorting component for the plugin using the supplied table and options.
     * @instance
     * @protected
     * @fires FooTable.Sorting#"init.ft.sorting"
     * @this FooTable.Sorting
     */
    init: function init() {
      /**
       * The init.ft.sorting event is raised before its UI is generated.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Sorting#"init.ft.sorting"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('init.ft.sorting').then(function () {
        if (!self.initial) {
          var isset = !!self.column;
          self.initial = {
            isset: isset,
            // grab a shallow copy of the rows array prior to sorting - allows us to reset without an initial sort
            rows: self.ft.rows.all.slice(0),
            // if there is a sorted column store its name and direction
            column: isset ? self.column.name : null,
            direction: isset ? self.column.direction : null
          };
        }

        F.arr.each(self.ft.columns.array, function (col) {
          if (col.sortable) {
            col.$el.addClass('footable-sortable').append($('<span/>', {
              'class': 'fooicon fooicon-sort'
            }));
          }
        });
        self.ft.$el.on('click.footable', '.footable-sortable', {
          self: self
        }, self._onSortClicked);
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Destroys the sorting component removing any UI generated from the table.
     * @instance
     * @protected
     * @fires FooTable.Sorting#"destroy.ft.sorting"
     */
    destroy: function destroy() {
      /**
       * The destroy.ft.sorting event is raised before its UI is removed.
       * Calling preventDefault on this event will prevent the component from being destroyed.
       * @event FooTable.Sorting#"destroy.ft.sorting"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('destroy.ft.paging').then(function () {
        self.ft.$el.off('click.footable', '.footable-sortable', self._onSortClicked);
        self.ft.$el.children('thead').children('tr.footable-header').children('.footable-sortable').removeClass('footable-sortable footable-asc footable-desc').find('span.fooicon').remove();
      });
    },

    /**
     * Performs the actual sorting against the {@link FooTable.Rows#current} array.
     * @instance
     * @protected
     */
    predraw: function predraw() {
      if (!this.column) return;
      var self = this,
          col = self.column;
      self.ft.rows.array.sort(function (a, b) {
        return col.direction == 'DESC' ? col.sorter(b.cells[col.index].sortValue, a.cells[col.index].sortValue) : col.sorter(a.cells[col.index].sortValue, b.cells[col.index].sortValue);
      });
    },

    /**
     * Updates the sorting UI setting the state of the sort buttons.
     * @instance
     * @protected
     */
    draw: function draw() {
      if (!this.column) return;
      var self = this,
          $sortable = self.ft.$el.find('thead > tr > .footable-sortable'),
          $active = self.column.$el;
      $sortable.removeClass('footable-asc footable-desc').children('.fooicon').removeClass('fooicon-sort fooicon-sort-asc fooicon-sort-desc');
      $sortable.not($active).children('.fooicon').addClass('fooicon-sort');
      $active.addClass(self.column.direction == 'DESC' ? 'footable-desc' : 'footable-asc').children('.fooicon').addClass(self.column.direction == 'DESC' ? 'fooicon-sort-desc' : 'fooicon-sort-asc');
    },

    /* PUBLIC */

    /**
     * Sets the sorting options and calls the {@link FooTable.Table#draw} method to perform the actual sorting.
     * @instance
     * @param {(string|number|FooTable.Column)} column - The column name, index or the actual {@link FooTable.Column} object to sort by.
     * @param {string} [direction="ASC"] - The direction to sort by, either ASC or DESC.
     * @returns {jQuery.Promise}
     * @fires FooTable.Sorting#"before.ft.sorting"
     * @fires FooTable.Sorting#"after.ft.sorting"
     */
    sort: function sort(column, direction) {
      return this._sort(column, direction);
    },

    /**
     * Toggles whether or not sorting is currently allowed.
     * @param {boolean} [state] - You can optionally specify the state you want it to be, if not supplied the current value is flipped.
     */
    toggleAllowed: function toggleAllowed(state) {
      state = F.is.boolean(state) ? state : !this.allowed;
      this.allowed = state;
      this.ft.$el.toggleClass('footable-sorting-disabled', !this.allowed);
    },

    /**
     * Checks whether any sorting has occurred for the table.
     * @returns {boolean}
     */
    hasChanged: function hasChanged() {
      return !(!this.initial || !this.column || this.column.name === this.initial.column && (this.column.direction === this.initial.direction || this.initial.direction === null && this.column.direction === 'ASC'));
    },

    /**
     * Resets the table sorting to the initial state recorded in the components init method.
     */
    reset: function reset() {
      if (!!this.initial) {
        if (this.initial.isset) {
          // if the initial value specified a column, sort by it
          this.sort(this.initial.column, this.initial.direction);
        } else {
          // if there was no initial column then we need to reset the rows to there original order
          if (!!this.column) {
            // if there is a currently sorted column remove the asc/desc classes and set it to null.
            this.column.$el.removeClass('footable-asc footable-desc');
            this.column = null;
          } // replace the current all rows array with the one stored in the initial value


          this.ft.rows.all = this.initial.rows; // force the table to redraw itself using the updated rows array

          this.ft.draw();
        }
      }
    },

    /* PRIVATE */

    /**
     * Performs the required steps to handle sorting including the raising of the {@link FooTable.Sorting#"before.ft.sorting"} and {@link FooTable.Sorting#"after.ft.sorting"} events.
     * @instance
     * @private
     * @param {(string|number|FooTable.Column)} column - The column name, index or the actual {@link FooTable.Column} object to sort by.
     * @param {string} [direction="ASC"] - The direction to sort by, either ASC or DESC.
     * @returns {jQuery.Promise}
     * @fires FooTable.Sorting#"before.ft.sorting"
     * @fires FooTable.Sorting#"after.ft.sorting"
     */
    _sort: function _sort(column, direction) {
      if (!this.allowed) return $.Deferred().reject('sorting disabled');
      var self = this;
      var sorter = new F.Sorter(self.ft.columns.get(column), F.Sorting.dir(direction));
      /**
       * The before.ft.sorting event is raised before a sort is applied and allows listeners to modify the sorter or cancel it completely by calling preventDefault on the jQuery.Event object.
       * @event FooTable.Sorting#"before.ft.sorting"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {FooTable.Sorter} sorter - The sorter that is about to be applied.
       */

      return self.ft.raise('before.ft.sorting', [sorter]).then(function () {
        F.arr.each(self.ft.columns.array, function (col) {
          if (col != self.column) col.direction = null;
        });
        self.column = self.ft.columns.get(sorter.column);
        if (self.column) self.column.direction = F.Sorting.dir(sorter.direction);
        return self.ft.draw().then(function () {
          /**
           * The after.ft.sorting event is raised after a sorter has been applied.
           * @event FooTable.Sorting#"after.ft.sorting"
           * @param {jQuery.Event} e - The jQuery.Event object for the event.
           * @param {FooTable.Table} ft - The instance of the plugin raising the event.
           * @param {FooTable.Sorter} sorter - The sorter that has been applied.
           */
          self.ft.raise('after.ft.sorting', [sorter]);
        });
      });
    },

    /**
     * Handles the sort button clicked event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onSortClicked: function _onSortClicked(e) {
      var self = e.data.self,
          $header = $(this).closest('th,td'),
          direction = $header.is('.footable-asc, .footable-desc') ? $header.hasClass('footable-desc') ? 'ASC' : 'DESC' : 'ASC';

      self._sort($header.index(), direction);
    }
  });
  /**
   * Checks the supplied string is a valid direction and if not returns ASC as default.
   * @static
   * @protected
   * @param {string} str - The string to check.
   */

  F.Sorting.dir = function (str) {
    return F.is.string(str) && (str == 'ASC' || str == 'DESC') ? str : 'ASC';
  };

  F.components.register('sorting', F.Sorting, 600);
})(jQuery, FooTable);

(function (F) {
  /**
   * The value used by the sorting component during sort operations. Can be set using the data-sort-value attribute on the cell itself.
   * If this is not supplied it is set to the result of the toString method called on the value for the cell. Added by the {@link FooTable.Sorting} component.
   * @type {string}
   * @default null
   */
  F.Cell.prototype.sortValue = null; // this is used to define the sorting specific properties on cell creation

  F.Cell.prototype.__sorting_define__ = function (valueOrElement) {
    this.sortValue = this.column.sortValue.call(this.column, valueOrElement);
  }; // this is used to update the sortValue property whenever the cell value is changed


  F.Cell.prototype.__sorting_val__ = function (value) {
    if (F.is.defined(value)) {
      // set only
      this.sortValue = this.column.sortValue.call(this.column, value);
    }
  }; // overrides the public define method and replaces it with our own


  F.Cell.extend('define', function (valueOrElement) {
    this._super(valueOrElement);

    this.__sorting_define__(valueOrElement);
  }); // overrides the public val method and replaces it with our own

  F.Cell.extend('val', function (value) {
    var val = this._super(value);

    this.__sorting_val__(value);

    return val;
  });
})(FooTable);

(function ($, F) {
  /**
   * The direction to sort if the {@link FooTable.Column#sorted} property is set to true. Can be "ASC", "DESC" or NULL. Added by the {@link FooTable.Sorting} component.
   * @type {string}
   * @default null
   */
  F.Column.prototype.direction = null;
  /**
   * Whether or not the column can be sorted. Added by the {@link FooTable.Sorting} component.
   * @type {boolean}
   * @default true
   */

  F.Column.prototype.sortable = true;
  /**
   * Whether or not the column is sorted. Added by the {@link FooTable.Sorting} component.
   * @type {boolean}
   * @default false
   */

  F.Column.prototype.sorted = false;
  /**
   * This is supplied two values from the column for a comparison to be made and the result returned. Added by the {@link FooTable.Sorting} component.
   * @param {*} a - The first value to be compared.
   * @param {*} b - The second value to compare to the first.
   * @returns {number}
   * @example <caption>This example shows using pseudo code what a sort function would look like.</caption>
   * "sorter": function(a, b){
   * 	if (a is less than b by some ordering criterion) {
   * 		return -1;
   * 	}
   * 	if (a is greater than b by the ordering criterion) {
   * 		return 1;
   * 	}
   * 	// a must be equal to b
   * 	return 0;
   * }
   */

  F.Column.prototype.sorter = function (a, b) {
    if (typeof a === 'string') a = a.toLowerCase();
    if (typeof b === 'string') b = b.toLowerCase();
    if (a === b) return 0;
    if (a < b) return -1;
    return 1;
  };
  /**
   * This is supplied either the cell value or jQuery object to parse. A value must be returned from this method and will be used during sorting operations.
   * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
   * @returns {*}
   * @this FooTable.Column
   */


  F.Column.prototype.sortValue = function (valueOrElement) {
    // if we have an element or a jQuery object use jQuery to get the value
    if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) {
      var data = $(valueOrElement).data('sortValue');
      return F.is.defined(data) ? data : this.parser(valueOrElement);
    } // if options are supplied with the value


    if (F.is.hash(valueOrElement) && F.is.hash(valueOrElement.options)) {
      if (F.is.string(valueOrElement.options.sortValue)) return valueOrElement.options.sortValue;
      if (F.is.defined(valueOrElement.value)) valueOrElement = valueOrElement.value;
    }

    if (F.is.defined(valueOrElement) && valueOrElement != null) return valueOrElement;
    return null;
  }; // this is used to define the sorting specific properties on column creation


  F.Column.prototype.__sorting_define__ = function (definition) {
    this.sorter = F.checkFnValue(this, definition.sorter, this.sorter);
    this.direction = F.is.type(definition.direction, 'string') ? F.Sorting.dir(definition.direction) : null;
    this.sortable = F.is.boolean(definition.sortable) ? definition.sortable : true;
    this.sorted = F.is.boolean(definition.sorted) ? definition.sorted : false;
    this.sortValue = F.checkFnValue(this, definition.sortValue, this.sortValue);
  }; // overrides the public define method and replaces it with our own


  F.Column.extend('define', function (definition) {
    this._super(definition);

    this.__sorting_define__(definition);
  });
})(jQuery, FooTable);

(function (F) {
  /**
   * An object containing the sorting options for the plugin. Added by the {@link FooTable.Sorting} component.
   * @type {object}
   * @prop {boolean} enabled=false - Whether or not to allow sorting on the table.
   */
  F.Defaults.prototype.sorting = {
    enabled: false
  };
})(FooTable);

(function ($, F) {
  F.HTMLColumn.extend('__sorting_define__', function (definition) {
    this._super(definition);

    this.sortUse = F.is.string(definition.sortUse) && $.inArray(definition.sortUse, ['html', 'text']) !== -1 ? definition.sortUse : 'html';
  });
  /**
   * This is supplied either the cell value or jQuery object to parse. A value must be returned from this method and will be used during sorting operations.
   * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
   * @returns {*}
   * @this FooTable.HTMLColumn
   */

  F.HTMLColumn.prototype.sortValue = function (valueOrElement) {
    // if we have an element or a jQuery object use jQuery to get the data value or pass it off to the parser
    if (F.is.element(valueOrElement) || F.is.jq(valueOrElement)) {
      var data = $(valueOrElement).data('sortValue');
      return F.is.defined(data) ? data : $.trim($(valueOrElement)[this.sortUse]());
    } // if options are supplied with the value


    if (F.is.hash(valueOrElement) && F.is.hash(valueOrElement.options)) {
      if (F.is.string(valueOrElement.options.sortValue)) return valueOrElement.options.sortValue;
      if (F.is.defined(valueOrElement.value)) valueOrElement = valueOrElement.value;
    }

    if (F.is.defined(valueOrElement) && valueOrElement != null) return valueOrElement;
    return null;
  };
})(jQuery, FooTable);

(function (F) {
  /**
   * Sort the table using the specified column and direction. Added by the {@link FooTable.Sorting} component.
   * @instance
   * @param {(string|number|FooTable.Column)} column - The column name, index or the actual {@link FooTable.Column} object to sort by.
   * @param {string} [direction="ASC"] - The direction to sort by, either ASC or DESC.
   * @returns {jQuery.Promise}
   * @fires FooTable.Sorting#"change.ft.sorting"
   * @fires FooTable.Sorting#"changed.ft.sorting"
   * @see FooTable.Sorting#sort
   */
  F.Table.prototype.sort = function (column, direction) {
    return this.use(F.Sorting).sort(column, direction);
  };
})(FooTable);

(function ($, F) {
  F.Pager = F.Class.extend(
  /** @lends FooTable.Pager */
  {
    /**
     * The pager object contains the page number and direction to page to.
     * @constructs
     * @extends FooTable.Class
     * @param {number} total - The total number of pages available.
     * @param {number} current - The current page number.
     * @param {number} size - The number of rows per page.
     * @param {number} page - The page number to goto.
     * @param {boolean} forward - A boolean indicating the direction of paging, TRUE = forward, FALSE = back.
     * @returns {FooTable.Pager}
     */
    construct: function construct(total, current, size, page, forward) {
      /**
       * The total number of pages available.
       * @type {number}
       */
      this.total = total;
      /**
       * The current page number.
       * @type {number}
       */

      this.current = current;
      /**
       * The number of rows per page.
       * @type {number}
       */

      this.size = size;
      /**
       * The page number to goto.
       * @type {number}
       */

      this.page = page;
      /**
       * A boolean indicating the direction of paging, TRUE = forward, FALSE = back.
       * @type {boolean}
       */

      this.forward = forward;
    }
  });
})(jQuery, FooTable);

(function ($, F) {
  F.Paging = F.Component.extend(
  /** @lends FooTable.Paging */
  {
    /**
     * The paging component adds a pagination control to the table allowing users to navigate table rows via pages.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table - The parent {@link FooTable.Table} object for the component.
     * @returns {FooTable.Filtering}
     */
    construct: function construct(table) {
      // call the base constructor
      this._super(table, table.o.paging.enabled);
      /* PROTECTED */

      /**
       * An object containing the strings used by the paging buttons.
       * @type {{ first: string, prev: string, next: string, last: string }}
       */


      this.strings = table.o.paging.strings;
      /* PUBLIC */

      /**
       * The current page number to display.
       * @instance
       * @type {number}
       */

      this.current = table.o.paging.current;
      /**
       * The number of rows to display per page.
       * @instance
       * @type {number}
       */

      this.size = table.o.paging.size;
      /**
       * The maximum number of page links to display at once.
       * @instance
       * @type {number}
       */

      this.limit = table.o.paging.limit;
      /**
       * The position of the pagination control within the paging rows cell.
       * @instance
       * @type {string}
       */

      this.position = table.o.paging.position;
      /**
       * The format string used to generate the text displayed under the pagination control.
       * @instance
       * @type {string}
       */

      this.countFormat = table.o.paging.countFormat;
      /**
       * The total number of pages.
       * @instance
       * @type {number}
       */

      this.total = -1;
      /**
       * The number of rows in the {@link FooTable.Rows#array} before paging is applied.
       * @instance
       * @type {number}
       */

      this.totalRows = 0;
      /**
       * A number indicating the previous page displayed.
       * @instance
       * @type {number}
       */

      this.previous = -1;
      /**
       * The count string generated using the {@link FooTable.Filtering#countFormat} option. This value is only set after the first call to the {@link FooTable.Filtering#predraw} method.
       * @instance
       * @type {string}
       */

      this.formattedCount = null;
      /**
       * The jQuery row object that contains all the paging specific elements.
       * @instance
       * @type {jQuery}
       */

      this.$row = null;
      /**
       * The jQuery cell object that contains the pagination control and total count.
       * @instance
       * @type {jQuery}
       */

      this.$cell = null;
      /**
       * The jQuery object that contains the links for the pagination control.
       * @instance
       * @type {jQuery}
       */

      this.$pagination = null;
      /**
       * The jQuery object that contains the row count.
       * @instance
       * @type {jQuery}
       */

      this.$count = null;
      /**
       * Whether or not the pagination row is detached from the table.
       * @instance
       * @type {boolean}
       */

      this.detached = true;
      /* PRIVATE */

      /**
       * Used to hold the number of page links created.
       * @instance
       * @type {number}
       * @private
       */

      this._createdLinks = 0;
    },

    /* PROTECTED */

    /**
     * Checks the supplied data and options for the paging component.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the parent table.
     * @fires FooTable.Paging#"preinit.ft.paging"
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.paging event is raised before the UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Paging#"preinit.ft.paging"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      this.ft.raise('preinit.ft.paging', [data]).then(function () {
        if (self.ft.$el.hasClass('footable-paging')) self.enabled = true;
        self.enabled = F.is.boolean(data.paging) ? data.paging : self.enabled;
        if (!self.enabled) return;
        self.size = F.is.number(data.pagingSize) ? data.pagingSize : self.size;
        self.current = F.is.number(data.pagingCurrent) ? data.pagingCurrent : self.current;
        self.limit = F.is.number(data.pagingLimit) ? data.pagingLimit : self.limit;
        if (self.ft.$el.hasClass('footable-paging-left')) self.position = 'left';
        if (self.ft.$el.hasClass('footable-paging-center')) self.position = 'center';
        if (self.ft.$el.hasClass('footable-paging-right')) self.position = 'right';
        self.position = F.is.string(data.pagingPosition) ? data.pagingPosition : self.position;
        self.countFormat = F.is.string(data.pagingCountFormat) ? data.pagingCountFormat : self.countFormat;
        self.total = Math.ceil(self.ft.rows.all.length / self.size);
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Initializes the paging component for the plugin using the supplied table and options.
     * @instance
     * @protected
     * @fires FooTable.Paging#"init.ft.paging"
     */
    init: function init() {
      /**
       * The init.ft.paging event is raised before its UI is generated.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Paging#"init.ft.paging"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('init.ft.paging').then(function () {
        self.$create();
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Destroys the paging component removing any UI generated from the table.
     * @instance
     * @protected
     * @fires FooTable.Paging#"destroy.ft.paging"
     */
    destroy: function destroy() {
      /**
       * The destroy.ft.paging event is raised before its UI is removed.
       * Calling preventDefault on this event will prevent the component from being destroyed.
       * @event FooTable.Paging#"destroy.ft.paging"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('destroy.ft.paging').then(function () {
        self.ft.$el.removeClass('footable-paging').find('tfoot > tr.footable-paging').remove();
        self.detached = true;
        self._createdLinks = 0;
      });
    },

    /**
     * Performs the actual paging against the {@link FooTable.Rows#current} array removing all rows that are not on the current visible page.
     * @instance
     * @protected
     */
    predraw: function predraw() {
      this.total = Math.ceil(this.ft.rows.array.length / this.size);
      this.current = this.current > this.total ? this.total : this.current < 1 ? 1 : this.current;
      this.totalRows = this.ft.rows.array.length;

      if (this.totalRows > this.size) {
        this.ft.rows.array = this.ft.rows.array.splice((this.current - 1) * this.size, this.size);
      }

      this.formattedCount = this.format(this.countFormat);
    },

    /**
     * Updates the paging UI setting the state of the pagination control.
     * @instance
     * @protected
     */
    draw: function draw() {
      if (this.total <= 1) {
        if (!this.detached) {
          this.$row.detach();
          this.detached = true;
        }
      } else {
        if (this.detached) {
          var $tfoot = this.ft.$el.children('tfoot');

          if ($tfoot.length == 0) {
            $tfoot = $('<tfoot/>');
            this.ft.$el.append($tfoot);
          }

          this.$row.appendTo($tfoot);
          this.detached = false;
        }

        this.$cell.attr('colspan', this.ft.columns.visibleColspan);

        this._createLinks();

        this._setVisible(this.current, this.current > this.previous);

        this._setNavigation(true);

        this.$count.text(this.formattedCount);
      }
    },

    /**
     * Creates the paging UI from the current options setting the various jQuery properties of this component.
     * @instance
     * @protected
     */
    $create: function $create() {
      this._createdLinks = 0;
      var position = 'footable-paging-center';

      switch (this.position) {
        case 'left':
          position = 'footable-paging-left';
          break;

        case 'right':
          position = 'footable-paging-right';
          break;
      }

      this.ft.$el.addClass('footable-paging').addClass(position);
      this.$cell = $('<td/>').attr('colspan', this.ft.columns.visibleColspan);
      var $tfoot = this.ft.$el.children('tfoot');

      if ($tfoot.length == 0) {
        $tfoot = $('<tfoot/>');
        this.ft.$el.append($tfoot);
      }

      this.$row = $('<tr/>', {
        'class': 'footable-paging'
      }).append(this.$cell).appendTo($tfoot);
      this.$pagination = $('<ul/>', {
        'class': 'pagination'
      }).on('click.footable', 'a.footable-page-link', {
        self: this
      }, this._onPageClicked);
      this.$count = $('<span/>', {
        'class': 'label label-default'
      });
      this.$cell.append(this.$pagination, $('<div/>', {
        'class': 'divider'
      }), this.$count);
      this.detached = false;
    },

    /* PUBLIC */

    /**
     * @summary Uses the supplied format string and replaces the placeholder strings with the current values.
     * @description This method is used to generate the short description label for the pagination control. i.e. Showing X of Y records. The placeholders for this string are the following:
     * * {CP} - The current page number.
     * * {TP} - The total number of pages.
     * * {PF} - The first row of the current page.
     * * {PL} - The last row of the current page.
     * * {TR} - The total rows available.
     * These placeholders can be supplied in a string like; "Showing {PF} to {PL} of {TR} rows."
     * @param {string} formatString - The string to be formatted with the paging specific variables.
     * @returns {string}
     */
    format: function format(formatString) {
      var firstRow = this.size * (this.current - 1) + 1,
          lastRow = this.size * this.current;

      if (this.ft.rows.array.length == 0) {
        firstRow = 0;
        lastRow = 0;
      } else {
        lastRow = lastRow > this.totalRows ? this.totalRows : lastRow;
      }

      return formatString.replace(/\{CP}/g, this.current).replace(/\{TP}/g, this.total).replace(/\{PF}/g, firstRow).replace(/\{PL}/g, lastRow).replace(/\{TR}/g, this.totalRows);
    },

    /**
     * Pages to the first page.
     * @instance
     * @returns {jQuery.Promise}
     * @fires FooTable.Paging#"before.ft.paging"
     * @fires FooTable.Paging#"after.ft.paging"
     */
    first: function first() {
      return this._set(1);
    },

    /**
     * Pages to the previous page.
     * @instance
     * @returns {jQuery.Promise}
     * @fires FooTable.Paging#"before.ft.paging"
     * @fires FooTable.Paging#"after.ft.paging"
     */
    prev: function prev() {
      return this._set(this.current - 1 > 0 ? this.current - 1 : 1);
    },

    /**
     * Pages to the next page.
     * @instance
     * @returns {jQuery.Promise}
     * @fires FooTable.Paging#"before.ft.paging"
     * @fires FooTable.Paging#"after.ft.paging"
     */
    next: function next() {
      return this._set(this.current + 1 < this.total ? this.current + 1 : this.total);
    },

    /**
     * Pages to the last page.
     * @instance
     * @returns {jQuery.Promise}
     * @fires FooTable.Paging#"before.ft.paging"
     * @fires FooTable.Paging#"after.ft.paging"
     */
    last: function last() {
      return this._set(this.total);
    },

    /**
     * Pages to the specified page.
     * @instance
     * @param {number} page - The page number to go to.
     * @returns {jQuery.Promise}
     * @fires FooTable.Paging#"before.ft.paging"
     * @fires FooTable.Paging#"after.ft.paging"
     */
    goto: function goto(page) {
      return this._set(page > this.total ? this.total : page < 1 ? 1 : page);
    },

    /**
     * Shows the previous X number of pages in the pagination control where X is the value set by the {@link FooTable.Defaults#paging} - limit option value.
     * @instance
     */
    prevPages: function prevPages() {
      var page = this.$pagination.children('li.footable-page.visible:first').data('page') - 1;

      this._setVisible(page, true);

      this._setNavigation(false);
    },

    /**
     * Shows the next X number of pages in the pagination control where X is the value set by the {@link FooTable.Defaults#paging} - limit option value.
     * @instance
     */
    nextPages: function nextPages() {
      var page = this.$pagination.children('li.footable-page.visible:last').data('page') + 1;

      this._setVisible(page, false);

      this._setNavigation(false);
    },

    /**
     * Gets or sets the current page size
     * @instance
     * @param {number} [value] - The new page size to use.
     * @returns {(number|undefined)}
     */
    pageSize: function pageSize(value) {
      if (!F.is.number(value)) {
        return this.size;
      }

      this.size = value;
      this.total = Math.ceil(this.ft.rows.all.length / this.size);
      if (F.is.jq(this.$row)) this.$row.remove();
      this.$create();
      this.ft.draw();
    },

    /* PRIVATE */

    /**
     * Performs the required steps to handle paging including the raising of the {@link FooTable.Paging#"before.ft.paging"} and {@link FooTable.Paging#"after.ft.paging"} events.
     * @instance
     * @private
     * @param {number} page - The page to set.
     * @returns {jQuery.Promise}
     * @fires FooTable.Paging#"before.ft.paging"
     * @fires FooTable.Paging#"after.ft.paging"
     */
    _set: function _set(page) {
      var self = this,
          pager = new F.Pager(self.total, self.current, self.size, page, page > self.current);
      /**
       * The before.ft.paging event is raised before a sort is applied and allows listeners to modify the pager or cancel it completely by calling preventDefault on the jQuery.Event object.
       * @event FooTable.Paging#"before.ft.paging"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {FooTable.Pager} pager - The pager that is about to be applied.
       */

      return self.ft.raise('before.ft.paging', [pager]).then(function () {
        pager.page = pager.page > pager.total ? pager.total : pager.page;
        pager.page = pager.page < 1 ? 1 : pager.page;
        if (self.current == page) return $.when();
        self.previous = self.current;
        self.current = pager.page;
        return self.ft.draw().then(function () {
          /**
           * The after.ft.paging event is raised after a pager has been applied.
           * @event FooTable.Paging#"after.ft.paging"
           * @param {jQuery.Event} e - The jQuery.Event object for the event.
           * @param {FooTable.Table} ft - The instance of the plugin raising the event.
           * @param {FooTable.Pager} pager - The pager that has been applied.
           */
          self.ft.raise('after.ft.paging', [pager]);
        });
      });
    },

    /**
     * Creates the pagination links using the current state of the plugin. If the total number of pages is the same as
     * the last time this function was executed it does nothing.
     * @instance
     * @private
     */
    _createLinks: function _createLinks() {
      if (this._createdLinks === this.total) return;

      var self = this,
          multiple = self.total > 1,
          link = function link(attr, html, klass) {
        return $('<li/>', {
          'class': klass
        }).attr('data-page', attr).append($('<a/>', {
          'class': 'footable-page-link',
          href: '#'
        }).data('page', attr).html(html));
      };

      self.$pagination.empty();

      if (multiple) {
        self.$pagination.append(link('first', self.strings.first, 'footable-page-nav'));
        self.$pagination.append(link('prev', self.strings.prev, 'footable-page-nav'));

        if (self.limit > 0 && self.limit < self.total) {
          self.$pagination.append(link('prev-limit', self.strings.prevPages, 'footable-page-nav'));
        }
      }

      for (var i = 0, $li; i < self.total; i++) {
        $li = link(i + 1, i + 1, 'footable-page');
        self.$pagination.append($li);
      }

      if (multiple) {
        if (self.limit > 0 && self.limit < self.total) {
          self.$pagination.append(link('next-limit', self.strings.nextPages, 'footable-page-nav'));
        }

        self.$pagination.append(link('next', self.strings.next, 'footable-page-nav'));
        self.$pagination.append(link('last', self.strings.last, 'footable-page-nav'));
      }

      self._createdLinks = self.total;
    },

    /**
     * Sets the state for the navigation links of the pagination control and optionally sets the active class state on the current page link.
     * @instance
     * @private
     * @param {boolean} active - Whether or not to set the active class state on the individual page links.
     */
    _setNavigation: function _setNavigation(active) {
      if (this.current == 1) {
        this.$pagination.children('li[data-page="first"],li[data-page="prev"]').addClass('disabled');
      } else {
        this.$pagination.children('li[data-page="first"],li[data-page="prev"]').removeClass('disabled');
      }

      if (this.current == this.total) {
        this.$pagination.children('li[data-page="next"],li[data-page="last"]').addClass('disabled');
      } else {
        this.$pagination.children('li[data-page="next"],li[data-page="last"]').removeClass('disabled');
      }

      if ((this.$pagination.children('li.footable-page.visible:first').data('page') || 1) == 1) {
        this.$pagination.children('li[data-page="prev-limit"]').addClass('disabled');
      } else {
        this.$pagination.children('li[data-page="prev-limit"]').removeClass('disabled');
      }

      if ((this.$pagination.children('li.footable-page.visible:last').data('page') || this.limit) == this.total) {
        this.$pagination.children('li[data-page="next-limit"]').addClass('disabled');
      } else {
        this.$pagination.children('li[data-page="next-limit"]').removeClass('disabled');
      }

      if (this.limit > 0 && this.total < this.limit) {
        this.$pagination.children('li[data-page="prev-limit"],li[data-page="next-limit"]').css('display', 'none');
      } else {
        this.$pagination.children('li[data-page="prev-limit"],li[data-page="next-limit"]').css('display', '');
      }

      if (active) {
        this.$pagination.children('li.footable-page').removeClass('active').filter('li[data-page="' + this.current + '"]').addClass('active');
      }
    },

    /**
     * Sets the visible page using the supplied parameters.
     * @instance
     * @private
     * @param {number} page - The page to make visible.
     * @param {boolean} right - If set to true the supplied page will be the right most visible pagination link.
     */
    _setVisible: function _setVisible(page, right) {
      if (this.limit > 0 && this.total > this.limit) {
        if (!this.$pagination.children('li.footable-page[data-page="' + page + '"]').hasClass('visible')) {
          var start = 0,
              end = 0;

          if (right == true) {
            end = page > this.total ? this.total : page;
            start = end - this.limit;
          } else {
            start = page < 1 ? 0 : page - 1;
            end = start + this.limit;
          }

          if (start < 0) {
            start = 0;
            end = this.limit > this.total ? this.total : this.limit;
          }

          if (end > this.total) {
            end = this.total;
            start = this.total - this.limit < 0 ? 0 : this.total - this.limit;
          }

          this.$pagination.children('li.footable-page').removeClass('visible').slice(start, end).addClass('visible');
        }
      } else {
        this.$pagination.children('li.footable-page').removeClass('visible').slice(0, this.total).addClass('visible');
      }
    },

    /**
     * Handles the click event for all links in the pagination control.
     * @instance
     * @private
     * @param {jQuery.Event} e - The event object for the event.
     */
    _onPageClicked: function _onPageClicked(e) {
      e.preventDefault();
      if ($(e.target).closest('li').is('.active,.disabled')) return;
      var self = e.data.self,
          page = $(this).data('page');

      switch (page) {
        case 'first':
          self.first();
          return;

        case 'prev':
          self.prev();
          return;

        case 'next':
          self.next();
          return;

        case 'last':
          self.last();
          return;

        case 'prev-limit':
          self.prevPages();
          return;

        case 'next-limit':
          self.nextPages();
          return;

        default:
          self._set(page);

          return;
      }
    }
  });
  F.components.register('paging', F.Paging, 400);
})(jQuery, FooTable);

(function (F) {
  /**
   * An object containing the paging options for the plugin. Added by the {@link FooTable.Paging} component.
   * @type {object}
   * @prop {boolean} enabled=false - Whether or not to allow paging on the table.
   * @prop {string} countFormat="{CP} of {TP}" - A string format used to generate the page count text.
   * @prop {number} current=1 - The page number to display.
   * @prop {number} limit=5 - The maximum number of page links to display at once.
   * @prop {string} position="center" - The string used to specify the alignment of the pagination control.
   * @prop {number} size=10 - The number of rows displayed per page.
   * @prop {object} strings - An object containing the strings used by the paging buttons.
   * @prop {string} strings.first="&laquo;" - The string used for the 'first' button.
   * @prop {string} strings.prev="&lsaquo;" - The string used for the 'previous' button.
   * @prop {string} strings.next="&rsaquo;" - The string used for the 'next' button.
   * @prop {string} strings.last="&raquo;" - The string used for the 'last' button.
   * @prop {string} strings.prevPages="..." - The string used for the 'previous X pages' button.
   * @prop {string} strings.nextPages="..." - The string used for the 'next X pages' button.
   */
  F.Defaults.prototype.paging = {
    enabled: false,
    countFormat: '{CP} of {TP}',
    current: 1,
    limit: 5,
    position: 'center',
    size: 10,
    strings: {
      first: '&laquo;',
      prev: '&lsaquo;',
      next: '&rsaquo;',
      last: '&raquo;',
      prevPages: '...',
      nextPages: '...'
    }
  };
})(FooTable);

(function (F) {
  /**
   * Navigates to the specified page number. Added by the {@link FooTable.Paging} component.
   * @instance
   * @param {number} num - The page number to go to.
   * @returns {jQuery.Promise}
   * @fires FooTable.Paging#paging_changing
   * @fires FooTable.Paging#paging_changed
   * @see FooTable.Paging#goto
   */
  F.Table.prototype.gotoPage = function (num) {
    return this.use(F.Paging).goto(num);
  };
  /**
   * Navigates to the next page. Added by the {@link FooTable.Paging} component.
   * @instance
   * @returns {jQuery.Promise}
   * @fires FooTable.Paging#paging_changing
   * @fires FooTable.Paging#paging_changed
   * @see FooTable.Paging#next
   */


  F.Table.prototype.nextPage = function () {
    return this.use(F.Paging).next();
  };
  /**
   * Navigates to the previous page. Added by the {@link FooTable.Paging} component.
   * @instance
   * @returns {jQuery.Promise}
   * @fires FooTable.Paging#paging_changing
   * @fires FooTable.Paging#paging_changed
   * @see FooTable.Paging#prev
   */


  F.Table.prototype.prevPage = function () {
    return this.use(F.Paging).prev();
  };
  /**
   * Navigates to the first page. Added by the {@link FooTable.Paging} component.
   * @instance
   * @returns {jQuery.Promise}
   * @fires FooTable.Paging#paging_changing
   * @fires FooTable.Paging#paging_changed
   * @see FooTable.Paging#first
   */


  F.Table.prototype.firstPage = function () {
    return this.use(F.Paging).first();
  };
  /**
   * Navigates to the last page. Added by the {@link FooTable.Paging} component.
   * @instance
   * @returns {jQuery.Promise}
   * @fires FooTable.Paging#paging_changing
   * @fires FooTable.Paging#paging_changed
   * @see FooTable.Paging#last
   */


  F.Table.prototype.lastPage = function () {
    return this.use(F.Paging).last();
  };
  /**
   * Shows the next X number of pages in the pagination control where X is the value set by the {@link FooTable.Defaults#paging} - limit.size option value. Added by the {@link FooTable.Paging} component.
   * @instance
   * @see FooTable.Paging#nextPages
   */


  F.Table.prototype.nextPages = function () {
    return this.use(F.Paging).nextPages();
  };
  /**
   * Shows the previous X number of pages in the pagination control where X is the value set by the {@link FooTable.Defaults#paging} - limit.size option value. Added by the {@link FooTable.Paging} component.
   * @instance
   * @see FooTable.Paging#prevPages
   */


  F.Table.prototype.prevPages = function () {
    return this.use(F.Paging).prevPages();
  };
  /**
   * Gets or sets the current page size
   * @instance
   * @param {number} [value] - The new page size to use.
   * @returns {(number|undefined)}
   * @see FooTable.Paging#pageSize
   */


  F.Table.prototype.pageSize = function (value) {
    return this.use(F.Paging).pageSize(value);
  };
})(FooTable);

(function ($, F) {
  F.Editing = F.Component.extend(
  /** @lends FooTable.Editing */
  {
    /**
     * The editing component adds a column with edit and delete buttons to each row as well as a single add row button in the footer.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table - The parent {@link FooTable.Table} object for the component.
     * @returns {FooTable.Editing}
     */
    construct: function construct(table) {
      // call the base constructor
      this._super(table, table.o.editing.enabled);
      /**
       * Whether or not to automatically page to a new row when it is added to the table.
       * @type {boolean}
       */


      this.pageToNew = table.o.editing.pageToNew;
      /**
       * Whether or not the editing column and add row button are always visible.
       * @type {boolean}
       */

      this.alwaysShow = table.o.editing.alwaysShow;
      /**
       * The options for the editing column. @see {@link FooTable.EditingColumn} for more info.
       * @type {object}
       * @prop {string} classes="footable-editing" - A space separated string of class names to apply to all cells in the column.
       * @prop {string} name="editing" - The name of the column.
       * @prop {string} title="" - The title displayed in the header row of the table for the column.
       * @prop {boolean} filterable=false - Whether or not the column should be filterable when using the filtering component.
       * @prop {boolean} sortable=false - Whether or not the column should be sortable when using the sorting component.
       */

      this.column = $.extend(true, {}, table.o.editing.column, {
        visible: this.alwaysShow
      });
      /**
       * The position of the editing column in the table as well as the alignment of the buttons.
       * @type {string}
       */

      this.position = table.o.editing.position;
      /**
       * The text that appears in the show button. This can contain HTML.
       * @type {string}
       */

      this.showText = table.o.editing.showText;
      /**
       * The text that appears in the hide button. This can contain HTML.
       * @type {string}
       */

      this.hideText = table.o.editing.hideText;
      /**
       * The text that appears in the add button. This can contain HTML.
       * @type {string}
       */

      this.addText = table.o.editing.addText;
      /**
       * The text that appears in the edit button. This can contain HTML.
       * @type {string}
       */

      this.editText = table.o.editing.editText;
      /**
       * The text that appears in the delete button. This can contain HTML.
       * @type {string}
       */

      this.deleteText = table.o.editing.deleteText;
      /**
       * The text that appears in the view button. This can contain HTML.
       * @type {string}
       */

      this.viewText = table.o.editing.viewText;
      /**
       * Whether or not to show the Add Row button.
       * @type {boolean}
       */

      this.allowAdd = table.o.editing.allowAdd;
      /**
       * Whether or not to show the Edit Row button.
       * @type {boolean}
       */

      this.allowEdit = table.o.editing.allowEdit;
      /**
       * Whether or not to show the Delete Row button.
       * @type {boolean}
       */

      this.allowDelete = table.o.editing.allowDelete;
      /**
       * Whether or not to show the View Row button.
       * @type {boolean}
       */

      this.allowView = table.o.editing.allowView;
      /**
       * Caches the row button elements to help with performance.
       * @type {(null|jQuery)}
       * @private
       */

      this._$buttons = null;
      /**
       * This object is used to contain the callbacks for the add, edit and delete row buttons.
       * @type {object}
       * @prop {function} addRow
       * @prop {function} editRow
       * @prop {function} deleteRow
       * @prop {function} viewRow
       */

      this.callbacks = {
        addRow: F.checkFnValue(this, table.o.editing.addRow),
        editRow: F.checkFnValue(this, table.o.editing.editRow),
        deleteRow: F.checkFnValue(this, table.o.editing.deleteRow),
        viewRow: F.checkFnValue(this, table.o.editing.viewRow)
      };
    },

    /* PROTECTED */

    /**
     * Checks the supplied data and options for the editing component.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the parent table.
     * @fires FooTable.Editing#"preinit.ft.editing"
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.editing event is raised before the UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Editing#"preinit.ft.editing"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      this.ft.raise('preinit.ft.editing', [data]).then(function () {
        if (self.ft.$el.hasClass('footable-editing')) self.enabled = true;
        self.enabled = F.is.boolean(data.editing) ? data.editing : self.enabled;
        if (!self.enabled) return;
        self.pageToNew = F.is.boolean(data.editingPageToNew) ? data.editingPageToNew : self.pageToNew;
        self.alwaysShow = F.is.boolean(data.editingAlwaysShow) ? data.editingAlwaysShow : self.alwaysShow;
        self.position = F.is.string(data.editingPosition) ? data.editingPosition : self.position;
        self.showText = F.is.string(data.editingShowText) ? data.editingShowText : self.showText;
        self.hideText = F.is.string(data.editingHideText) ? data.editingHideText : self.hideText;
        self.addText = F.is.string(data.editingAddText) ? data.editingAddText : self.addText;
        self.editText = F.is.string(data.editingEditText) ? data.editingEditText : self.editText;
        self.deleteText = F.is.string(data.editingDeleteText) ? data.editingDeleteText : self.deleteText;
        self.viewText = F.is.string(data.editingViewText) ? data.editingViewText : self.viewText;
        self.allowAdd = F.is.boolean(data.editingAllowAdd) ? data.editingAllowAdd : self.allowAdd;
        self.allowEdit = F.is.boolean(data.editingAllowEdit) ? data.editingAllowEdit : self.allowEdit;
        self.allowDelete = F.is.boolean(data.editingAllowDelete) ? data.editingAllowDelete : self.allowDelete;
        self.allowView = F.is.boolean(data.editingAllowView) ? data.editingAllowView : self.allowView;
        self.column = new F.EditingColumn(self.ft, self, $.extend(true, {}, self.column, data.editingColumn, {
          visible: self.alwaysShow
        }));
        if (self.ft.$el.hasClass('footable-editing-left')) self.position = 'left';
        if (self.ft.$el.hasClass('footable-editing-right')) self.position = 'right';

        if (self.position === 'right') {
          self.column.index = self.ft.columns.array.length;
        } else {
          self.column.index = 0;

          for (var i = 0, len = self.ft.columns.array.length; i < len; i++) {
            self.ft.columns.array[i].index += 1;
          }
        }

        self.ft.columns.array.push(self.column);
        self.ft.columns.array.sort(function (a, b) {
          return a.index - b.index;
        });
        self.callbacks.addRow = F.checkFnValue(self, data.editingAddRow, self.callbacks.addRow);
        self.callbacks.editRow = F.checkFnValue(self, data.editingEditRow, self.callbacks.editRow);
        self.callbacks.deleteRow = F.checkFnValue(self, data.editingDeleteRow, self.callbacks.deleteRow);
        self.callbacks.viewRow = F.checkFnValue(self, data.editingViewRow, self.callbacks.viewRow);
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Initializes the editing component for the plugin using the supplied table and options.
     * @instance
     * @protected
     * @fires FooTable.Editing#"init.ft.editing"
     */
    init: function init() {
      /**
       * The init.ft.editing event is raised before its UI is generated.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.Editing#"init.ft.editing"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('init.ft.editing').then(function () {
        self.$create();
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Destroys the editing component removing any UI generated from the table.
     * @instance
     * @protected
     * @fires FooTable.Editing#"destroy.ft.editing"
     */
    destroy: function destroy() {
      /**
       * The destroy.ft.editing event is raised before its UI is removed.
       * Calling preventDefault on this event will prevent the component from being destroyed.
       * @event FooTable.Editing#"destroy.ft.editing"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */
      var self = this;
      this.ft.raise('destroy.ft.editing').then(function () {
        self.ft.$el.removeClass('footable-editing footable-editing-always-show footable-editing-no-add footable-editing-no-edit footable-editing-no-delete footable-editing-no-view').off('click.ft.editing').find('tfoot > tr.footable-editing').remove();
      });
    },

    /**
     * Creates the editing UI from the current options setting the various jQuery properties of this component.
     * @instance
     * @protected
     */
    $create: function $create() {
      var self = this,
          position = self.position === 'right' ? 'footable-editing-right' : 'footable-editing-left';
      self.ft.$el.addClass('footable-editing').addClass(position).on('click.ft.editing', '.footable-show', {
        self: self
      }, self._onShowClick).on('click.ft.editing', '.footable-hide', {
        self: self
      }, self._onHideClick).on('click.ft.editing', '.footable-edit', {
        self: self
      }, self._onEditClick).on('click.ft.editing', '.footable-delete', {
        self: self
      }, self._onDeleteClick).on('click.ft.editing', '.footable-view', {
        self: self
      }, self._onViewClick).on('click.ft.editing', '.footable-add', {
        self: self
      }, self._onAddClick);
      self.$cell = $('<td/>').attr('colspan', self.ft.columns.visibleColspan).append(self.$buttonShow());

      if (self.allowAdd) {
        self.$cell.append(self.$buttonAdd());
      }

      self.$cell.append(self.$buttonHide());

      if (self.alwaysShow) {
        self.ft.$el.addClass('footable-editing-always-show');
      }

      if (!self.allowAdd) self.ft.$el.addClass('footable-editing-no-add');
      if (!self.allowEdit) self.ft.$el.addClass('footable-editing-no-edit');
      if (!self.allowDelete) self.ft.$el.addClass('footable-editing-no-delete');
      if (!self.allowView) self.ft.$el.addClass('footable-editing-no-view');
      var $tfoot = self.ft.$el.children('tfoot');

      if ($tfoot.length == 0) {
        $tfoot = $('<tfoot/>');
        self.ft.$el.append($tfoot);
      }

      self.$row = $('<tr/>', {
        'class': 'footable-editing'
      }).append(self.$cell).appendTo($tfoot);
    },

    /**
     * Creates the show button for the editing component.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $buttonShow: function $buttonShow() {
      return '<button type="button" class="btn btn-primary footable-show">' + this.showText + '</button>';
    },

    /**
     * Creates the hide button for the editing component.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $buttonHide: function $buttonHide() {
      return '<button type="button" class="btn btn-default footable-hide">' + this.hideText + '</button>';
    },

    /**
     * Creates the add button for the editing component.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $buttonAdd: function $buttonAdd() {
      return '<button type="button" class="btn btn-primary footable-add">' + this.addText + '</button> ';
    },

    /**
     * Creates the edit button for the editing component.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $buttonEdit: function $buttonEdit() {
      return '<button type="button" class="btn btn-default footable-edit">' + this.editText + '</button> ';
    },

    /**
     * Creates the delete button for the editing component.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $buttonDelete: function $buttonDelete() {
      return '<button type="button" class="btn btn-default footable-delete">' + this.deleteText + '</button>';
    },

    /**
     * Creates the view button for the editing component.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $buttonView: function $buttonView() {
      return '<button type="button" class="btn btn-default footable-view">' + this.viewText + '</button> ';
    },

    /**
     * Creates the button group for the row buttons.
     * @instance
     * @protected
     * @returns {(string|HTMLElement|jQuery)}
     */
    $rowButtons: function $rowButtons() {
      if (F.is.jq(this._$buttons)) return this._$buttons.clone();
      this._$buttons = $('<div class="btn-group btn-group-xs" role="group"></div>');
      if (this.allowView) this._$buttons.append(this.$buttonView());
      if (this.allowEdit) this._$buttons.append(this.$buttonEdit());
      if (this.allowDelete) this._$buttons.append(this.$buttonDelete());
      return this._$buttons;
    },

    /**
     * Performs the drawing of the component.
     */
    draw: function draw() {
      this.$cell.attr('colspan', this.ft.columns.visibleColspan);
    },

    /**
     * Handles the edit button click event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The jQuery.Event object for the event.
     * @fires FooTable.Editing#"edit.ft.editing"
     */
    _onEditClick: function _onEditClick(e) {
      e.preventDefault();
      var self = e.data.self,
          row = $(this).closest('tr').data('__FooTableRow__');

      if (row instanceof F.Row) {
        /**
         * The edit.ft.editing event is raised before its callback is executed.
         * Calling preventDefault on this event will prevent the callback from being executed.
         * @event FooTable.Editing#"edit.ft.editing"
         * @param {jQuery.Event} e - The jQuery.Event object for the event.
         * @param {FooTable.Table} ft - The instance of the plugin raising the event.
         * @param {FooTable.Row} row - The row to be edited.
         */
        self.ft.raise('edit.ft.editing', [row]).then(function () {
          self.callbacks.editRow.call(self.ft, row);
        });
      }
    },

    /**
     * Handles the delete button click event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The jQuery.Event object for the event.
     * @fires FooTable.Editing#"delete.ft.editing"
     */
    _onDeleteClick: function _onDeleteClick(e) {
      e.preventDefault();
      var self = e.data.self,
          row = $(this).closest('tr').data('__FooTableRow__');

      if (row instanceof F.Row) {
        /**
         * The delete.ft.editing event is raised before its callback is executed.
         * Calling preventDefault on this event will prevent the callback from being executed.
         * @event FooTable.Editing#"delete.ft.editing"
         * @param {jQuery.Event} e - The jQuery.Event object for the event.
         * @param {FooTable.Table} ft - The instance of the plugin raising the event.
         * @param {FooTable.Row} row - The row to be deleted.
         */
        self.ft.raise('delete.ft.editing', [row]).then(function () {
          self.callbacks.deleteRow.call(self.ft, row);
        });
      }
    },

    /**
     * Handles the view button click event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The jQuery.Event object for the event.
     * @fires FooTable.Editing#"view.ft.editing"
     */
    _onViewClick: function _onViewClick(e) {
      e.preventDefault();
      var self = e.data.self,
          row = $(this).closest('tr').data('__FooTableRow__');

      if (row instanceof F.Row) {
        /**
         * The view.ft.editing event is raised before its callback is executed.
         * Calling preventDefault on this event will prevent the callback from being executed.
         * @event FooTable.Editing#"view.ft.editing"
         * @param {jQuery.Event} e - The jQuery.Event object for the event.
         * @param {FooTable.Table} ft - The instance of the plugin raising the event.
         * @param {FooTable.Row} row - The row to be viewed.
         */
        self.ft.raise('view.ft.editing', [row]).then(function () {
          self.callbacks.viewRow.call(self.ft, row);
        });
      }
    },

    /**
     * Handles the add button click event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The jQuery.Event object for the event.
     * @fires FooTable.Editing#"add.ft.editing"
     */
    _onAddClick: function _onAddClick(e) {
      e.preventDefault();
      var self = e.data.self;
      /**
       * The add.ft.editing event is raised before its callback is executed.
       * Calling preventDefault on this event will prevent the callback from being executed.
       * @event FooTable.Editing#"add.ft.editing"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      self.ft.raise('add.ft.editing').then(function () {
        self.callbacks.addRow.call(self.ft);
      });
    },

    /**
     * Handles the show button click event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The jQuery.Event object for the event.
     * @fires FooTable.Editing#"show.ft.editing"
     */
    _onShowClick: function _onShowClick(e) {
      e.preventDefault();
      var self = e.data.self;
      /**
       * The show.ft.editing event is raised before its callback is executed.
       * Calling preventDefault on this event will prevent the callback from being executed.
       * @event FooTable.Editing#"show.ft.editing"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      self.ft.raise('show.ft.editing').then(function () {
        self.ft.$el.addClass('footable-editing-show');
        self.column.visible = true;
        self.ft.draw();
      });
    },

    /**
     * Handles the hide button click event.
     * @instance
     * @private
     * @param {jQuery.Event} e - The jQuery.Event object for the event.
     * @fires FooTable.Editing#"show.ft.editing"
     */
    _onHideClick: function _onHideClick(e) {
      e.preventDefault();
      var self = e.data.self;
      /**
       * The hide.ft.editing event is raised before its callback is executed.
       * Calling preventDefault on this event will prevent the callback from being executed.
       * @event FooTable.Editing#"hide.ft.editing"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       */

      self.ft.raise('hide.ft.editing').then(function () {
        self.ft.$el.removeClass('footable-editing-show');
        self.column.visible = false;
        self.ft.draw();
      });
    }
  });
  F.components.register('editing', F.Editing, 850);
})(jQuery, FooTable);

(function ($, F) {
  F.EditingColumn = F.Column.extend(
  /** @lends FooTable.EditingColumn */
  {
    /**
     * The Editing column class is used to create the column containing the editing buttons.
     * @constructs
     * @extends FooTable.Column
     * @param {FooTable.Table} instance -  The parent {@link FooTable.Table} this column belongs to.
     * @param {FooTable.Editing} editing - The parent {@link FooTable.Editing} component this column is used with.
     * @param {object} definition - An object containing all the properties to set for the column.
     * @returns {FooTable.EditingColumn}
     */
    construct: function construct(instance, editing, definition) {
      this._super(instance, definition, 'editing');

      this.editing = editing;
    },

    /**
     * After the column has been defined this ensures that the $el property is a jQuery object by either creating or updating the current value.
     * @instance
     * @protected
     * @this FooTable.Column
     */
    $create: function $create() {
      (this.$el = !this.virtual && F.is.jq(this.$el) ? this.$el : $('<th/>', {
        'class': 'footable-editing'
      })).html(this.title);
    },

    /**
     * This is supplied either the cell value or jQuery object to parse. Any value can be returned from this method and
     * will be provided to the {@link FooTable.EditingColumn#format} function
     * to generate the cell contents.
     * @instance
     * @protected
     * @param {(*|jQuery)} valueOrElement - The value or jQuery cell object.
     * @returns {(jQuery)}
     */
    parser: function parser(valueOrElement) {
      if (F.is.string(valueOrElement)) valueOrElement = $($.trim(valueOrElement));
      if (F.is.element(valueOrElement)) valueOrElement = $(valueOrElement);

      if (F.is.jq(valueOrElement)) {
        var tagName = valueOrElement.prop('tagName').toLowerCase();
        if (tagName == 'td' || tagName == 'th') return valueOrElement.data('value') || valueOrElement.contents();
        return valueOrElement;
      }

      return null;
    },

    /**
     * Creates a cell to be used in the supplied row for this column.
     * @param {FooTable.Row} row - The row to create the cell for.
     * @returns {FooTable.Cell}
     */
    createCell: function createCell(row) {
      var $buttons = this.editing.$rowButtons(),
          $cell = $('<td/>').append($buttons);

      if (F.is.jq(row.$el)) {
        if (this.index === 0) {
          $cell.prependTo(row.$el);
        } else {
          $cell.insertAfter(row.$el.children().eq(this.index - 1));
        }
      }

      return new F.Cell(this.ft, row, this, $cell || $cell.html());
    }
  });
  F.columns.register('editing', F.EditingColumn);
})(jQuery, FooTable);

(function ($, F) {
  /**
   * An object containing the editing options for the plugin. Added by the {@link FooTable.Editing} component.
   * @type {object}
   * @prop {boolean} enabled=false - Whether or not to allow editing on the table.
   * @prop {boolean} pageToNew=true - Whether or not to automatically page to a new row when it is added to the table.
   * @prop {string} position="right" - The position of the editing column in the table as well as the alignment of the buttons.
   * @prop {boolean} alwaysShow=false - Whether or not the editing column and add row button are always visible.
   * @prop {function} addRow - The callback function to execute when the add row button is clicked.
   * @prop {function} editRow - The callback function to execute when the edit row button is clicked.
   * @prop {function} deleteRow - The callback function to execute when the delete row button is clicked.
   * @prop {function} viewRow - The callback function to execute when the view row button is clicked.
   * @prop {string} showText - The text that appears in the show button. This can contain HTML.
   * @prop {string} hideText - The text that appears in the hide button. This can contain HTML.
   * @prop {string} addText - The text that appears in the add button. This can contain HTML.
   * @prop {string} editText - The text that appears in the edit button. This can contain HTML.
   * @prop {string} deleteText - The text that appears in the delete button. This can contain HTML.
   * @prop {string} viewText - The text that appears in the view button. This can contain HTML.
   * @prop {boolean} allowAdd - Whether or not to show the Add Row button.
   * @prop {boolean} allowEdit - Whether or not to show the Edit Row button.
   * @prop {boolean} allowDelete - Whether or not to show the Delete Row button.
   * @prop {boolean} allowView - Whether or not to show the View Row button.
   * @prop {object} column - The options for the editing column. @see {@link FooTable.EditingColumn} for more info.
   * @prop {string} column.classes="footable-editing" - A space separated string of class names to apply to all cells in the column.
   * @prop {string} column.name="editing" - The name of the column.
   * @prop {string} column.title="" - The title displayed in the header row of the table for the column.
   * @prop {boolean} column.filterable=false - Whether or not the column should be filterable when using the filtering component.
   * @prop {boolean} column.sortable=false - Whether or not the column should be sortable when using the sorting component.
   */
  F.Defaults.prototype.editing = {
    enabled: false,
    pageToNew: true,
    position: 'right',
    alwaysShow: false,
    addRow: function addRow() {},
    editRow: function editRow(row) {},
    deleteRow: function deleteRow(row) {},
    viewRow: function viewRow(row) {},
    showText: '<span class="fooicon fooicon-pencil" aria-hidden="true"></span> Edit rows',
    hideText: 'Cancel',
    addText: 'New row',
    editText: '<span class="fooicon fooicon-pencil" aria-hidden="true"></span>',
    deleteText: '<span class="fooicon fooicon-trash" aria-hidden="true"></span>',
    viewText: '<span class="fooicon fooicon-stats" aria-hidden="true"></span>',
    allowAdd: true,
    allowEdit: true,
    allowDelete: true,
    allowView: false,
    column: {
      classes: 'footable-editing',
      name: 'editing',
      title: '',
      filterable: false,
      sortable: false
    }
  };
})(jQuery, FooTable);

(function ($, F) {
  if (F.is.defined(F.Paging)) {
    /**
     * Holds a shallow clone of the un-paged {@link FooTable.Rows#array} value before paging occurs and superfluous rows are removed. Added by the {@link FooTable.Editing} component.
     * @instance
     * @public
     * @type {Array<FooTable.Row>}
     */
    F.Paging.prototype.unpaged = []; // override the default predraw method with one that sets the unpaged property.

    F.Paging.extend('predraw', function () {
      this.unpaged = this.ft.rows.array.slice(0); // create a shallow clone for later use

      this._super(); // call the original method

    });
  }
})(jQuery, FooTable);

(function ($, F) {
  /**
   * Adds the row to the table.
   * @param {boolean} [redraw=true] - Whether or not to redraw the table, defaults to true but for bulk operations this
   * can be set to false and then followed by a call to the {@link FooTable.Table#draw} method.
   * @returns {jQuery.Deferred}
   */
  F.Row.prototype.add = function (redraw) {
    redraw = F.is.boolean(redraw) ? redraw : true;
    var self = this;
    return $.Deferred(function (d) {
      var index = self.ft.rows.all.push(self) - 1;

      if (redraw) {
        return self.ft.draw().then(function () {
          d.resolve(index);
        });
      } else {
        d.resolve(index);
      }
    });
  };
  /**
   * Removes the row from the table.
   * @param {boolean} [redraw=true] - Whether or not to redraw the table, defaults to true but for bulk operations this
   * can be set to false and then followed by a call to the {@link FooTable.Table#draw} method.
   * @returns {jQuery.Deferred}
   */


  F.Row.prototype.delete = function (redraw) {
    redraw = F.is.boolean(redraw) ? redraw : true;
    var self = this;
    return $.Deferred(function (d) {
      var index = self.ft.rows.all.indexOf(self);

      if (F.is.number(index) && index >= 0 && index < self.ft.rows.all.length) {
        self.ft.rows.all.splice(index, 1);

        if (redraw) {
          return self.ft.draw().then(function () {
            d.resolve(self);
          });
        }
      }

      d.resolve(self);
    });
  };

  if (F.is.defined(F.Paging)) {
    // override the default add method with one that supports paging
    F.Row.extend('add', function (redraw) {
      redraw = F.is.boolean(redraw) ? redraw : true;

      var self = this,
          added = this._super(redraw),
          editing = self.ft.use(F.Editing),
          paging;

      if (editing && editing.pageToNew && (paging = self.ft.use(F.Paging)) && redraw) {
        return added.then(function () {
          var index = paging.unpaged.indexOf(self); // find this row in the unpaged array (this array will be sorted and filtered)

          var page = Math.ceil((index + 1) / paging.size); // calculate the page the new row is on

          if (paging.current !== page) {
            // goto the page if we need to
            return paging.goto(page);
          }
        });
      }

      return added;
    });
  }

  if (F.is.defined(F.Sorting)) {
    // override the default val method with one that supports sorting and paging
    F.Row.extend('val', function (data, redraw) {
      redraw = F.is.boolean(redraw) ? redraw : true;

      var result = this._super(data);

      if (!F.is.hash(data)) {
        return result;
      }

      var self = this;

      if (redraw) {
        self.ft.draw().then(function () {
          var editing = self.ft.use(F.Editing),
              paging;

          if (F.is.defined(F.Paging) && editing && editing.pageToNew && (paging = self.ft.use(F.Paging))) {
            var index = paging.unpaged.indexOf(self); // find this row in the unpaged array (this array will be sorted and filtered)

            var page = Math.ceil((index + 1) / paging.size); // calculate the page the new row is on

            if (paging.current !== page) {
              // goto the page if we need to
              return paging.goto(page);
            }
          }
        });
      }

      return result;
    });
  }
})(jQuery, FooTable);

(function (F) {
  /**
   * Adds a row to the underlying {@link FooTable.Rows#all} array.
   * @param {(object|FooTable.Row)} dataOrRow - A hash containing the row values or an actual {@link FooTable.Row} object.
   * @param {boolean} [redraw=true] - Whether or not to redraw the table, defaults to true but for bulk operations this
   * can be set to false and then followed by a call to the {@link FooTable.Table#draw} method.
   */
  F.Rows.prototype.add = function (dataOrRow, redraw) {
    var row = dataOrRow;

    if (F.is.hash(dataOrRow)) {
      row = new FooTable.Row(this.ft, this.ft.columns.array, dataOrRow);
    }

    if (row instanceof FooTable.Row) {
      row.add(redraw);
    }
  };
  /**
   * Updates a row in the underlying {@link FooTable.Rows#all} array.
   * @param {(number|FooTable.Row)} indexOrRow - The index to update or the actual {@link FooTable.Row} object.
   * @param {object} data - A hash containing the new row values.
   * @param {boolean} [redraw=true] - Whether or not to redraw the table, defaults to true but for bulk operations this
   * can be set to false and then followed by a call to the {@link FooTable.Table#draw} method.
   */


  F.Rows.prototype.update = function (indexOrRow, data, redraw) {
    var len = this.ft.rows.all.length,
        row = indexOrRow;

    if (F.is.number(indexOrRow) && indexOrRow >= 0 && indexOrRow < len) {
      row = this.ft.rows.all[indexOrRow];
    }

    if (row instanceof FooTable.Row && F.is.hash(data)) {
      row.val(data, redraw);
    }
  };
  /**
   * Deletes a row from the underlying {@link FooTable.Rows#all} array.
   * @param {(number|FooTable.Row)} indexOrRow - The index to delete or the actual {@link FooTable.Row} object.
   * @param {boolean} [redraw=true] - Whether or not to redraw the table, defaults to true but for bulk operations this
   * can be set to false and then followed by a call to the {@link FooTable.Table#draw} method.
   */


  F.Rows.prototype.delete = function (indexOrRow, redraw) {
    var len = this.ft.rows.all.length,
        row = indexOrRow;

    if (F.is.number(indexOrRow) && indexOrRow >= 0 && indexOrRow < len) {
      row = this.ft.rows.all[indexOrRow];
    }

    if (row instanceof FooTable.Row) {
      row.delete(redraw);
    }
  };
})(FooTable);

(function ($, F) {
  // global int to use if the table has no ID
  var _uid2 = 0,
      // a hash value for the current url
  _url_hash = function (str) {
    var i,
        l,
        hval = 0x811c9dc5;

    for (i = 0, l = str.length; i < l; i++) {
      hval ^= str.charCodeAt(i);
      hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
    }

    return hval >>> 0;
  }(location.origin + location.pathname);

  F.State = F.Component.extend(
  /** @lends FooTable.State */
  {
    /**
     * The state component adds the ability for the table to remember its basic state for filtering, paging and sorting.
     * @constructs
     * @extends FooTable.Component
     * @param {FooTable.Table} table - The parent {@link FooTable.Table} object for the component.
     * @returns {FooTable.State}
     */
    construct: function construct(table) {
      // call the constructor of the base class
      this._super(table, table.o.state.enabled); // Change this value if an update to this component requires any stored data to be reset


      this._key = '1';
      /**
       * The key to use to store the state for this table.
       * @type {(null|string)}
       */

      this.key = this._key + (F.is.string(table.o.state.key) ? table.o.state.key : this._uid());
      /**
       * Whether or not to allow the filtering component to store it's state.
       * @type {boolean}
       */

      this.filtering = F.is.boolean(table.o.state.filtering) ? table.o.state.filtering : true;
      /**
       * Whether or not to allow the paging component to store it's state.
       * @type {boolean}
       */

      this.paging = F.is.boolean(table.o.state.paging) ? table.o.state.paging : true;
      /**
       * Whether or not to allow the sorting component to store it's state.
       * @type {boolean}
       */

      this.sorting = F.is.boolean(table.o.state.sorting) ? table.o.state.sorting : true;
    },

    /* PROTECTED */

    /**
     * Checks the supplied data and options for the state component.
     * @instance
     * @protected
     * @param {object} data - The jQuery data object from the parent table.
     * @fires FooTable.State#"preinit.ft.state"
     * @this FooTable.State
     */
    preinit: function preinit(data) {
      var self = this;
      /**
       * The preinit.ft.state event is raised before the UI is created and provides the tables jQuery data object for additional options parsing.
       * Calling preventDefault on this event will disable the component.
       * @event FooTable.State#"preinit.ft.state"
       * @param {jQuery.Event} e - The jQuery.Event object for the event.
       * @param {FooTable.Table} ft - The instance of the plugin raising the event.
       * @param {object} data - The jQuery data object of the table raising the event.
       */

      this.ft.raise('preinit.ft.state', [data]).then(function () {
        self.enabled = F.is.boolean(data.state) ? data.state : self.enabled;
        if (!self.enabled) return;
        self.key = self._key + (F.is.string(data.stateKey) ? data.stateKey : self.key);
        self.filtering = F.is.boolean(data.stateFiltering) ? data.stateFiltering : self.filtering;
        self.paging = F.is.boolean(data.statePaging) ? data.statePaging : self.paging;
        self.sorting = F.is.boolean(data.stateSorting) ? data.stateSorting : self.sorting;
      }, function () {
        self.enabled = false;
      });
    },

    /**
     * Gets the state value for the specified key for this table.
     * @instance
     * @param {string} key - The key to get the value for.
     * @returns {(*|null)}
     */
    get: function get(key) {
      return JSON.parse(localStorage.getItem(this.key + ':' + key));
    },

    /**
     * Sets the state value for the specified key for this table.
     * @instance
     * @param {string} key - The key to set the value for.
     * @param {*} data - The value to store for the key. This value must be JSON.stringify friendly.
     */
    set: function set(key, data) {
      localStorage.setItem(this.key + ':' + key, JSON.stringify(data));
    },

    /**
     * Clears the state value for the specified key for this table.
     * @instance
     * @param {string} key - The key to clear the value for.
     */
    remove: function remove(key) {
      localStorage.removeItem(this.key + ':' + key);
    },

    /**
     * Executes the {@link FooTable.Component#readState} function on all components.
     * @instance
     */
    read: function read() {
      this.ft.execute(false, true, 'readState');
    },

    /**
     * Executes the {@link FooTable.Component#writeState} function on all components.
     * @instance
     */
    write: function write() {
      this.ft.execute(false, true, 'writeState');
    },

    /**
     * Executes the {@link FooTable.Component#clearState} function on all components.
     * @instance
     */
    clear: function clear() {
      this.ft.execute(false, true, 'clearState');
    },

    /**
     * Generates a unique identifier for the current {@link FooTable.Table} if one is not supplied through the options.
     * This value is a combination of the url hash and either the element ID or an incremented global int value.
     * @instance
     * @returns {*}
     * @private
     */
    _uid: function _uid() {
      var id = this.ft.$el.attr('id');
      return _url_hash + '_' + (F.is.string(id) ? id : ++_uid2);
    }
  });
  F.components.register('state', F.State, 700);
})(jQuery, FooTable);

(function (F) {
  /**
   * This method is called from the {@link FooTable.State#read} method and allows a component to retrieve its' stored state.
   * @instance
   * @protected
   * @function
   */
  F.Component.prototype.readState = function () {};
  /**
   * This method is called from the {@link FooTable.State#write} method and allows a component to write its' current state to the store.
   * @instance
   * @protected
   * @function
   */


  F.Component.prototype.writeState = function () {};
  /**
   * This method is called from the {@link FooTable.State#clear} method and allows a component to clear any stored state.
   * @instance
   * @protected
   * @function
   */


  F.Component.prototype.clearState = function () {};
})(FooTable);

(function (F) {
  /**
   * An object containing the state options for the plugin. Added by the {@link FooTable.State} component.
   * @type {object}
   * @prop {boolean} enabled=false - Whether or not to allow state to be stored for the table. This overrides the individual component enable options.
   * @prop {boolean} filtering=true - Whether or not to allow the filtering state to be stored.
   * @prop {boolean} paging=true - Whether or not to allow the filtering state to be stored.
   * @prop {boolean} sorting=true - Whether or not to allow the filtering state to be stored.
   * @prop {string} key=null - The unique key to use to store the table's data.
   */
  F.Defaults.prototype.state = {
    enabled: false,
    filtering: true,
    paging: true,
    sorting: true,
    key: null
  };
})(FooTable);

(function (F) {
  if (!F.Filtering) return;
  /**
   * Allows the filtering component to retrieve its' stored state.
   */

  F.Filtering.prototype.readState = function () {
    if (this.ft.state.filtering) {
      var state = this.ft.state.get('filtering');

      if (F.is.hash(state) && !F.is.emptyArray(state.filters)) {
        this.filters = this.ensure(state.filters);
      }
    }
  };
  /**
   * Allows the filtering component to write its' current state to the store.
   */


  F.Filtering.prototype.writeState = function () {
    if (this.ft.state.filtering) {
      var filters = F.arr.map(this.filters, function (f) {
        return {
          name: f.name,
          query: f.query instanceof F.Query ? f.query.val() : f.query,
          columns: F.arr.map(f.columns, function (c) {
            return c.name;
          }),
          hidden: f.hidden,
          space: f.space,
          connectors: f.connectors,
          ignoreCase: f.ignoreCase
        };
      });
      this.ft.state.set('filtering', {
        filters: filters
      });
    }
  };
  /**
   * Allows the filtering component to clear any stored state.
   */


  F.Filtering.prototype.clearState = function () {
    if (this.ft.state.filtering) {
      this.ft.state.remove('filtering');
    }
  };
})(FooTable);

(function (F) {
  if (!F.Paging) return;
  /**
   * Allows the paging component to retrieve its' stored state.
   */

  F.Paging.prototype.readState = function () {
    if (this.ft.state.paging) {
      var state = this.ft.state.get('paging');

      if (F.is.hash(state)) {
        this.current = state.current;
        this.size = state.size;
      }
    }
  };
  /**
   * Allows the paging component to write its' current state to the store.
   */


  F.Paging.prototype.writeState = function () {
    if (this.ft.state.paging) {
      this.ft.state.set('paging', {
        current: this.current,
        size: this.size
      });
    }
  };
  /**
   * Allows the paging component to clear any stored state.
   */


  F.Paging.prototype.clearState = function () {
    if (this.ft.state.paging) {
      this.ft.state.remove('paging');
    }
  };
})(FooTable);

(function (F) {
  if (!F.Sorting) return;
  /**
   * Allows the sorting component to retrieve its' stored state.
   */

  F.Sorting.prototype.readState = function () {
    if (this.ft.state.sorting) {
      var state = this.ft.state.get('sorting');

      if (F.is.hash(state)) {
        var column = this.ft.columns.get(state.column);

        if (column instanceof F.Column) {
          this.column = column;
          this.column.direction = state.direction;
        }
      }
    }
  };
  /**
   * Allows the sorting component to write its' current state to the store.
   */


  F.Sorting.prototype.writeState = function () {
    if (this.ft.state.sorting && this.column instanceof F.Column) {
      this.ft.state.set('sorting', {
        column: this.column.name,
        direction: this.column.direction
      });
    }
  };
  /**
   * Allows the sorting component to clear any stored state.
   */


  F.Sorting.prototype.clearState = function () {
    if (this.ft.state.sorting) {
      this.ft.state.remove('sorting');
    }
  };
})(FooTable);

(function (F) {
  // hook into the _construct method so we can add the state property to the table.
  F.Table.extend('_construct', function (ready) {
    this.state = this.use(FooTable.State);

    this._super(ready);
  }); // hook into the _preinit method so we can trigger a plugin wide read state operation.

  F.Table.extend('_preinit', function () {
    var self = this;
    return self._super().then(function () {
      if (self.state.enabled) {
        self.state.read();
      }
    });
  }); // hook into the draw method so we can trigger a plugin wide write state operation.

  F.Table.extend('draw', function () {
    var self = this;
    return self._super().then(function () {
      if (self.state.enabled) {
        self.state.write();
      }
    });
  });
})(FooTable);

/***/ }),

/***/ "./resources/js/frontend/vendor/circle-progress/circle-progress.min.js":
/*!*****************************************************************************!*\
  !*** ./resources/js/frontend/vendor/circle-progress/circle-progress.min.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * jquery-circle-progress - jQuery Plugin to draw animated circular progress bars:
 * {@link http://kottenator.github.io/jquery-circle-progress/}
 *
 * @author Rostyslav Bryzgunov <kottenator@gmail.com>
 * @version 1.2.1
 * @licence MIT
 * @preserve
 */
!function (i) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (i),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var t; }
}(function (i) {
  function t(i) {
    this.init(i);
  }

  t.prototype = {
    value: 0,
    size: 100,
    startAngle: -Math.PI,
    thickness: "auto",
    fill: {
      gradient: ["#3aeabb", "#fdd250"]
    },
    emptyFill: "rgba(0, 0, 0, .1)",
    animation: {
      duration: 1200,
      easing: "circleProgressEasing"
    },
    animationStartValue: 0,
    reverse: !1,
    lineCap: "butt",
    insertMode: "prepend",
    constructor: t,
    el: null,
    canvas: null,
    ctx: null,
    radius: 0,
    arcFill: null,
    lastFrameValue: 0,
    init: function init(t) {
      i.extend(this, t), this.radius = this.size / 2, this.initWidget(), this.initFill(), this.draw(), this.el.trigger("circle-inited");
    },
    initWidget: function initWidget() {
      this.canvas || (this.canvas = i("<canvas>")["prepend" == this.insertMode ? "prependTo" : "appendTo"](this.el)[0]);
      var t = this.canvas;

      if (t.width = this.size, t.height = this.size, this.ctx = t.getContext("2d"), window.devicePixelRatio > 1) {
        var e = window.devicePixelRatio;
        t.style.width = t.style.height = this.size + "px", t.width = t.height = this.size * e, this.ctx.scale(e, e);
      }
    },
    initFill: function initFill() {
      function t() {
        var t = i("<canvas>")[0];
        t.width = e.size, t.height = e.size, t.getContext("2d").drawImage(g, 0, 0, r, r), e.arcFill = e.ctx.createPattern(t, "no-repeat"), e.drawFrame(e.lastFrameValue);
      }

      var e = this,
          a = this.fill,
          n = this.ctx,
          r = this.size;
      if (!a) throw Error("The fill is not specified!");

      if ("string" == typeof a && (a = {
        color: a
      }), a.color && (this.arcFill = a.color), a.gradient) {
        var s = a.gradient;
        if (1 == s.length) this.arcFill = s[0];else if (s.length > 1) {
          for (var l = a.gradientAngle || 0, o = a.gradientDirection || [r / 2 * (1 - Math.cos(l)), r / 2 * (1 + Math.sin(l)), r / 2 * (1 + Math.cos(l)), r / 2 * (1 - Math.sin(l))], h = n.createLinearGradient.apply(n, o), c = 0; c < s.length; c++) {
            var d = s[c],
                u = c / (s.length - 1);
            i.isArray(d) && (u = d[1], d = d[0]), h.addColorStop(u, d);
          }

          this.arcFill = h;
        }
      }

      if (a.image) {
        var g;
        a.image instanceof Image ? g = a.image : (g = new Image(), g.src = a.image), g.complete ? t() : g.onload = t;
      }
    },
    draw: function draw() {
      this.animation ? this.drawAnimated(this.value) : this.drawFrame(this.value);
    },
    drawFrame: function drawFrame(i) {
      this.lastFrameValue = i, this.ctx.clearRect(0, 0, this.size, this.size), this.drawEmptyArc(i), this.drawArc(i);
    },
    drawArc: function drawArc(i) {
      if (0 !== i) {
        var t = this.ctx,
            e = this.radius,
            a = this.getThickness(),
            n = this.startAngle;
        t.save(), t.beginPath(), this.reverse ? t.arc(e, e, e - a / 2, n - 2 * Math.PI * i, n) : t.arc(e, e, e - a / 2, n, n + 2 * Math.PI * i), t.lineWidth = a, t.lineCap = this.lineCap, t.strokeStyle = this.arcFill, t.stroke(), t.restore();
      }
    },
    drawEmptyArc: function drawEmptyArc(i) {
      var t = this.ctx,
          e = this.radius,
          a = this.getThickness(),
          n = this.startAngle;
      i < 1 && (t.save(), t.beginPath(), i <= 0 ? t.arc(e, e, e - a / 2, 0, 2 * Math.PI) : this.reverse ? t.arc(e, e, e - a / 2, n, n - 2 * Math.PI * i) : t.arc(e, e, e - a / 2, n + 2 * Math.PI * i, n), t.lineWidth = a, t.strokeStyle = this.emptyFill, t.stroke(), t.restore());
    },
    drawAnimated: function drawAnimated(t) {
      var e = this,
          a = this.el,
          n = i(this.canvas);
      n.stop(!0, !1), a.trigger("circle-animation-start"), n.css({
        animationProgress: 0
      }).animate({
        animationProgress: 1
      }, i.extend({}, this.animation, {
        step: function step(i) {
          var n = e.animationStartValue * (1 - i) + t * i;
          e.drawFrame(n), a.trigger("circle-animation-progress", [i, n]);
        }
      })).promise().always(function () {
        a.trigger("circle-animation-end");
      });
    },
    getThickness: function getThickness() {
      return i.isNumeric(this.thickness) ? this.thickness : this.size / 14;
    },
    getValue: function getValue() {
      return this.value;
    },
    setValue: function setValue(i) {
      this.animation && (this.animationStartValue = this.lastFrameValue), this.value = i, this.draw();
    }
  }, i.circleProgress = {
    defaults: t.prototype
  }, i.easing.circleProgressEasing = function (i, t, e, a, n) {
    return (t /= n / 2) < 1 ? a / 2 * t * t * t + e : a / 2 * ((t -= 2) * t * t + 2) + e;
  }, i.fn.circleProgress = function (e, a) {
    var n = "circle-progress",
        r = this.data(n);

    if ("widget" == e) {
      if (!r) throw Error('Calling "widget" method on not initialized instance is forbidden');
      return r.canvas;
    }

    if ("value" == e) {
      if (!r) throw Error('Calling "value" method on not initialized instance is forbidden');
      if ("undefined" == typeof a) return r.getValue();
      var s = arguments[1];
      return this.each(function () {
        i(this).data(n).setValue(s);
      });
    }

    return this.each(function () {
      var a = i(this),
          r = a.data(n),
          s = i.isPlainObject(e) ? e : {};
      if (r) r.init(s);else {
        var l = i.extend({}, a.data());
        "string" == typeof l.fill && (l.fill = JSON.parse(l.fill)), "string" == typeof l.animation && (l.animation = JSON.parse(l.animation)), s = i.extend(l, s), s.el = a, r = new t(s), a.data(n, r);
      }
    });
  };
});

/***/ }),

/***/ "./resources/js/frontend/vendor/cookie/jquery.cookie.js":
/*!**************************************************************!*\
  !*** ./resources/js/frontend/vendor/cookie/jquery.cookie.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function ($) {
  var pluses = /\+/g;

  function encode(s) {
    return config.raw ? s : encodeURIComponent(s);
  }

  function decode(s) {
    return config.raw ? s : decodeURIComponent(s);
  }

  function stringifyCookieValue(value) {
    return encode(config.json ? JSON.stringify(value) : String(value));
  }

  function parseCookieValue(s) {
    if (s.indexOf('"') === 0) {
      // This is a quoted cookie as according to RFC2068, unescape...
      s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
    }

    try {
      // Replace server-side written pluses with spaces.
      // If we can't decode the cookie, ignore it, it's unusable.
      // If we can't parse the cookie, ignore it, it's unusable.
      s = decodeURIComponent(s.replace(pluses, ' '));
      return config.json ? JSON.parse(s) : s;
    } catch (e) {}
  }

  function read(s, converter) {
    var value = config.raw ? s : parseCookieValue(s);
    return $.isFunction(converter) ? converter(value) : value;
  }

  var config = $.cookie = function (key, value, options) {
    // Write
    if (value !== undefined && !$.isFunction(value)) {
      options = $.extend({}, config.defaults, options);

      if (typeof options.expires === 'number') {
        var days = options.expires,
            t = options.expires = new Date();
        t.setTime(+t + days * 864e+5);
      }

      return document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
      options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
    } // Read


    var result = key ? undefined : {}; // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all. Also prevents odd result when
    // calling $.cookie().

    var cookies = document.cookie ? document.cookie.split('; ') : [];

    for (var i = 0, l = cookies.length; i < l; i++) {
      var parts = cookies[i].split('=');
      var name = decode(parts.shift());
      var cookie = parts.join('=');

      if (key && key === name) {
        // If second argument (value) is a function it's a converter...
        result = read(cookie, value);
        break;
      } // Prevent storing a cookie that we couldn't decode.


      if (!key && (cookie = read(cookie)) !== undefined) {
        result[name] = cookie;
      }
    }

    return result;
  };

  config.defaults = {};

  $.removeCookie = function (key, options) {
    if ($.cookie(key) === undefined) {
      return false;
    } // Must not alter options, thus extending a fresh object...


    $.cookie(key, '', $.extend({}, options, {
      expires: -1
    }));
    return !$.cookie(key);
  };
});

/***/ }),

/***/ "./resources/js/frontend/vendor/intlTelInput/utils.js":
/*!************************************************************!*\
  !*** ./resources/js/frontend/vendor/intlTelInput/utils.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function () {
  var aa = this;

  function k(a) {
    return "string" == typeof a;
  }

  function m(a, b) {
    a = a.split(".");
    var c = aa;
    a[0] in c || !c.execScript || c.execScript("var " + a[0]);

    for (var d; a.length && (d = a.shift());) {
      a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {} : c[d] = b;
    }
  }

  function n(a, b) {
    function c() {}

    c.prototype = b.prototype;
    a.o = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;

    a.aa = function (a, c, f) {
      for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) {
        d[e - 2] = arguments[e];
      }

      return b.prototype[c].apply(a, d);
    };
  }

  ;
  var p = Array.prototype.indexOf ? function (a, b, c) {
    return Array.prototype.indexOf.call(a, b, c);
  } : function (a, b, c) {
    c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;
    if (k(a)) return k(b) && 1 == b.length ? a.indexOf(b, c) : -1;

    for (; c < a.length; c++) {
      if (c in a && a[c] === b) return c;
    }

    return -1;
  };

  function q(a, b) {
    a.sort(b || ba);
  }

  function ba(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  ;

  function ca(a) {
    var b = [],
        c = 0,
        d;

    for (d in a) {
      b[c++] = a[d];
    }

    return b;
  }

  ;

  function da(a, b) {
    this.a = a;
    this.h = !!b.i;
    this.c = b.b;
    this.m = b.type;
    this.l = !1;

    switch (this.c) {
      case ea:
      case fa:
      case ha:
      case ia:
      case ja:
      case ka:
      case la:
        this.l = !0;
    }

    this.g = b.defaultValue;
  }

  var la = 1,
      ka = 2,
      ea = 3,
      fa = 4,
      ha = 6,
      ia = 16,
      ja = 18;

  function ma(a, b) {
    this.c = a;
    this.a = {};

    for (a = 0; a < b.length; a++) {
      var c = b[a];
      this.a[c.a] = c;
    }
  }

  function na(a) {
    a = ca(a.a);
    q(a, function (a, c) {
      return a.a - c.a;
    });
    return a;
  }

  ;

  function r() {
    this.a = {};
    this.g = this.f().a;
    this.c = this.h = null;
  }

  r.prototype.has = function (a) {
    return null != this.a[a.a];
  };

  r.prototype.get = function (a, b) {
    return t(this, a.a, b);
  };

  r.prototype.set = function (a, b) {
    u(this, a.a, b);
  };

  r.prototype.add = function (a, b) {
    v(this, a.a, b);
  };

  function oa(a, b) {
    for (var c = na(a.f()), d = 0; d < c.length; d++) {
      var e = c[d],
          f = e.a;

      if (null != b.a[f]) {
        a.c && delete a.c[e.a];
        var g = 11 == e.c || 10 == e.c;

        if (e.h) {
          e = w(b, f);

          for (var h = 0; h < e.length; h++) {
            v(a, f, g ? e[h].clone() : e[h]);
          }
        } else e = x(b, f), g ? (g = x(a, f)) ? oa(g, e) : u(a, f, e.clone()) : u(a, f, e);
      }
    }
  }

  r.prototype.clone = function () {
    var a = new this.constructor();
    a != this && (a.a = {}, a.c && (a.c = {}), oa(a, this));
    return a;
  };

  function x(a, b) {
    var c = a.a[b];
    if (null == c) return null;

    if (a.h) {
      if (!(b in a.c)) {
        var d = a.h,
            e = a.g[b];
        if (null != c) if (e.h) {
          for (var f = [], g = 0; g < c.length; g++) {
            f[g] = d.c(e, c[g]);
          }

          c = f;
        } else c = d.c(e, c);
        return a.c[b] = c;
      }

      return a.c[b];
    }

    return c;
  }

  function t(a, b, c) {
    var d = x(a, b);
    return a.g[b].h ? d[c || 0] : d;
  }

  function y(a, b) {
    if (null != a.a[b]) a = t(a, b, void 0);else a: {
      a = a.g[b];
      if (void 0 === a.g) if (b = a.m, b === Boolean) a.g = !1;else if (b === Number) a.g = 0;else if (b === String) a.g = a.l ? "0" : "";else {
        a = new b();
        break a;
      }
      a = a.g;
    }
    return a;
  }

  function w(a, b) {
    return x(a, b) || [];
  }

  function A(a, b) {
    return a.g[b].h ? null != a.a[b] ? a.a[b].length : 0 : null != a.a[b] ? 1 : 0;
  }

  function u(a, b, c) {
    a.a[b] = c;
    a.c && (a.c[b] = c);
  }

  function v(a, b, c) {
    a.a[b] || (a.a[b] = []);
    a.a[b].push(c);
    a.c && delete a.c[b];
  }

  function B(a, b) {
    var c = [],
        d;

    for (d in b) {
      0 != d && c.push(new da(d, b[d]));
    }

    return new ma(a, c);
  }

  ;

  function C() {}

  C.prototype.a = function (a) {
    new a.c();
    throw Error("Unimplemented");
  };

  C.prototype.c = function (a, b) {
    if (11 == a.c || 10 == a.c) return b instanceof r ? b : this.a(a.m.prototype.f(), b);
    if (14 == a.c) return k(b) && pa.test(b) && (a = Number(b), 0 < a) ? a : b;
    if (!a.l) return b;
    a = a.m;

    if (a === String) {
      if ("number" == typeof b) return String(b);
    } else if (a === Number && k(b) && ("Infinity" === b || "-Infinity" === b || "NaN" === b || pa.test(b))) return Number(b);

    return b;
  };

  var pa = /^-?[0-9]+$/;

  function D() {}

  n(D, C);

  D.prototype.a = function (a, b) {
    a = new a.c();
    a.h = this;
    a.a = b;
    a.c = {};
    return a;
  };

  function E() {}

  n(E, D);

  E.prototype.c = function (a, b) {
    return 8 == a.c ? !!b : C.prototype.c.apply(this, arguments);
  };

  E.prototype.a = function (a, b) {
    return E.o.a.call(this, a, b);
  };

  function F(a, b) {
    null != a && this.a.apply(this, arguments);
  }

  F.prototype.c = "";

  F.prototype.set = function (a) {
    this.c = "" + a;
  };

  F.prototype.a = function (a, b, c) {
    this.c += String(a);
    if (null != b) for (var d = 1; d < arguments.length; d++) {
      this.c += arguments[d];
    }
    return this;
  };

  F.prototype.toString = function () {
    return this.c;
  };
  /*
  Protocol Buffer 2 Copyright 2008 Google Inc.
  All other code copyright its respective owners.
  Copyright (C) 2010 The Libphonenumber Authors
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */


  function G() {
    r.call(this);
  }

  n(G, r);
  var qa = null;

  function H() {
    r.call(this);
  }

  n(H, r);
  var ra = null;

  function I() {
    r.call(this);
  }

  n(I, r);
  var sa = null;

  G.prototype.f = function () {
    var a = qa;
    a || (qa = a = B(G, {
      0: {
        name: "NumberFormat",
        j: "i18n.phonenumbers.NumberFormat"
      },
      1: {
        name: "pattern",
        required: !0,
        b: 9,
        type: String
      },
      2: {
        name: "format",
        required: !0,
        b: 9,
        type: String
      },
      3: {
        name: "leading_digits_pattern",
        i: !0,
        b: 9,
        type: String
      },
      4: {
        name: "national_prefix_formatting_rule",
        b: 9,
        type: String
      },
      6: {
        name: "national_prefix_optional_when_formatting",
        b: 8,
        defaultValue: !1,
        type: Boolean
      },
      5: {
        name: "domestic_carrier_code_formatting_rule",
        b: 9,
        type: String
      }
    }));
    return a;
  };

  G.f = G.prototype.f;

  H.prototype.f = function () {
    var a = ra;
    a || (ra = a = B(H, {
      0: {
        name: "PhoneNumberDesc",
        j: "i18n.phonenumbers.PhoneNumberDesc"
      },
      2: {
        name: "national_number_pattern",
        b: 9,
        type: String
      },
      9: {
        name: "possible_length",
        i: !0,
        b: 5,
        type: Number
      },
      10: {
        name: "possible_length_local_only",
        i: !0,
        b: 5,
        type: Number
      },
      6: {
        name: "example_number",
        b: 9,
        type: String
      }
    }));
    return a;
  };

  H.f = H.prototype.f;

  I.prototype.f = function () {
    var a = sa;
    a || (sa = a = B(I, {
      0: {
        name: "PhoneMetadata",
        j: "i18n.phonenumbers.PhoneMetadata"
      },
      1: {
        name: "general_desc",
        b: 11,
        type: H
      },
      2: {
        name: "fixed_line",
        b: 11,
        type: H
      },
      3: {
        name: "mobile",
        b: 11,
        type: H
      },
      4: {
        name: "toll_free",
        b: 11,
        type: H
      },
      5: {
        name: "premium_rate",
        b: 11,
        type: H
      },
      6: {
        name: "shared_cost",
        b: 11,
        type: H
      },
      7: {
        name: "personal_number",
        b: 11,
        type: H
      },
      8: {
        name: "voip",
        b: 11,
        type: H
      },
      21: {
        name: "pager",
        b: 11,
        type: H
      },
      25: {
        name: "uan",
        b: 11,
        type: H
      },
      27: {
        name: "emergency",
        b: 11,
        type: H
      },
      28: {
        name: "voicemail",
        b: 11,
        type: H
      },
      29: {
        name: "short_code",
        b: 11,
        type: H
      },
      30: {
        name: "standard_rate",
        b: 11,
        type: H
      },
      31: {
        name: "carrier_specific",
        b: 11,
        type: H
      },
      33: {
        name: "sms_services",
        b: 11,
        type: H
      },
      24: {
        name: "no_international_dialling",
        b: 11,
        type: H
      },
      9: {
        name: "id",
        required: !0,
        b: 9,
        type: String
      },
      10: {
        name: "country_code",
        b: 5,
        type: Number
      },
      11: {
        name: "international_prefix",
        b: 9,
        type: String
      },
      17: {
        name: "preferred_international_prefix",
        b: 9,
        type: String
      },
      12: {
        name: "national_prefix",
        b: 9,
        type: String
      },
      13: {
        name: "preferred_extn_prefix",
        b: 9,
        type: String
      },
      15: {
        name: "national_prefix_for_parsing",
        b: 9,
        type: String
      },
      16: {
        name: "national_prefix_transform_rule",
        b: 9,
        type: String
      },
      18: {
        name: "same_mobile_and_fixed_line_pattern",
        b: 8,
        defaultValue: !1,
        type: Boolean
      },
      19: {
        name: "number_format",
        i: !0,
        b: 11,
        type: G
      },
      20: {
        name: "intl_number_format",
        i: !0,
        b: 11,
        type: G
      },
      22: {
        name: "main_country_for_code",
        b: 8,
        defaultValue: !1,
        type: Boolean
      },
      23: {
        name: "leading_digits",
        b: 9,
        type: String
      },
      26: {
        name: "leading_zero_possible",
        b: 8,
        defaultValue: !1,
        type: Boolean
      }
    }));
    return a;
  };

  I.f = I.prototype.f;

  function J() {
    r.call(this);
  }

  n(J, r);
  var ta = null,
      ua = {
    $: 0,
    w: 1,
    v: 5,
    u: 10,
    s: 20
  };

  J.prototype.f = function () {
    var a = ta;
    a || (ta = a = B(J, {
      0: {
        name: "PhoneNumber",
        j: "i18n.phonenumbers.PhoneNumber"
      },
      1: {
        name: "country_code",
        required: !0,
        b: 5,
        type: Number
      },
      2: {
        name: "national_number",
        required: !0,
        b: 4,
        type: Number
      },
      3: {
        name: "extension",
        b: 9,
        type: String
      },
      4: {
        name: "italian_leading_zero",
        b: 8,
        type: Boolean
      },
      8: {
        name: "number_of_leading_zeros",
        b: 5,
        defaultValue: 1,
        type: Number
      },
      5: {
        name: "raw_input",
        b: 9,
        type: String
      },
      6: {
        name: "country_code_source",
        b: 14,
        defaultValue: 0,
        type: ua
      },
      7: {
        name: "preferred_domestic_carrier_code",
        b: 9,
        type: String
      }
    }));
    return a;
  };

  J.ctor = J;
  J.ctor.f = J.prototype.f;
  /*
  Copyright (C) 2010 The Libphonenumber Authors
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  var K = {
    1: "US AG AI AS BB BM BS CA DM DO GD GU JM KN KY LC MP MS PR SX TC TT VC VG VI".split(" "),
    7: ["RU", "KZ"],
    20: ["EG"],
    27: ["ZA"],
    30: ["GR"],
    31: ["NL"],
    32: ["BE"],
    33: ["FR"],
    34: ["ES"],
    36: ["HU"],
    39: ["IT", "VA"],
    40: ["RO"],
    41: ["CH"],
    43: ["AT"],
    44: ["GB", "GG", "IM", "JE"],
    45: ["DK"],
    46: ["SE"],
    47: ["NO", "SJ"],
    48: ["PL"],
    49: ["DE"],
    51: ["PE"],
    52: ["MX"],
    53: ["CU"],
    54: ["AR"],
    55: ["BR"],
    56: ["CL"],
    57: ["CO"],
    58: ["VE"],
    60: ["MY"],
    61: ["AU", "CC", "CX"],
    62: ["ID"],
    63: ["PH"],
    64: ["NZ"],
    65: ["SG"],
    66: ["TH"],
    81: ["JP"],
    82: ["KR"],
    84: ["VN"],
    86: ["CN"],
    90: ["TR"],
    91: ["IN"],
    92: ["PK"],
    93: ["AF"],
    94: ["LK"],
    95: ["MM"],
    98: ["IR"],
    211: ["SS"],
    212: ["MA", "EH"],
    213: ["DZ"],
    216: ["TN"],
    218: ["LY"],
    220: ["GM"],
    221: ["SN"],
    222: ["MR"],
    223: ["ML"],
    224: ["GN"],
    225: ["CI"],
    226: ["BF"],
    227: ["NE"],
    228: ["TG"],
    229: ["BJ"],
    230: ["MU"],
    231: ["LR"],
    232: ["SL"],
    233: ["GH"],
    234: ["NG"],
    235: ["TD"],
    236: ["CF"],
    237: ["CM"],
    238: ["CV"],
    239: ["ST"],
    240: ["GQ"],
    241: ["GA"],
    242: ["CG"],
    243: ["CD"],
    244: ["AO"],
    245: ["GW"],
    246: ["IO"],
    247: ["AC"],
    248: ["SC"],
    249: ["SD"],
    250: ["RW"],
    251: ["ET"],
    252: ["SO"],
    253: ["DJ"],
    254: ["KE"],
    255: ["TZ"],
    256: ["UG"],
    257: ["BI"],
    258: ["MZ"],
    260: ["ZM"],
    261: ["MG"],
    262: ["RE", "YT"],
    263: ["ZW"],
    264: ["NA"],
    265: ["MW"],
    266: ["LS"],
    267: ["BW"],
    268: ["SZ"],
    269: ["KM"],
    290: ["SH", "TA"],
    291: ["ER"],
    297: ["AW"],
    298: ["FO"],
    299: ["GL"],
    350: ["GI"],
    351: ["PT"],
    352: ["LU"],
    353: ["IE"],
    354: ["IS"],
    355: ["AL"],
    356: ["MT"],
    357: ["CY"],
    358: ["FI", "AX"],
    359: ["BG"],
    370: ["LT"],
    371: ["LV"],
    372: ["EE"],
    373: ["MD"],
    374: ["AM"],
    375: ["BY"],
    376: ["AD"],
    377: ["MC"],
    378: ["SM"],
    380: ["UA"],
    381: ["RS"],
    382: ["ME"],
    383: ["XK"],
    385: ["HR"],
    386: ["SI"],
    387: ["BA"],
    389: ["MK"],
    420: ["CZ"],
    421: ["SK"],
    423: ["LI"],
    500: ["FK"],
    501: ["BZ"],
    502: ["GT"],
    503: ["SV"],
    504: ["HN"],
    505: ["NI"],
    506: ["CR"],
    507: ["PA"],
    508: ["PM"],
    509: ["HT"],
    590: ["GP", "BL", "MF"],
    591: ["BO"],
    592: ["GY"],
    593: ["EC"],
    594: ["GF"],
    595: ["PY"],
    596: ["MQ"],
    597: ["SR"],
    598: ["UY"],
    599: ["CW", "BQ"],
    670: ["TL"],
    672: ["NF"],
    673: ["BN"],
    674: ["NR"],
    675: ["PG"],
    676: ["TO"],
    677: ["SB"],
    678: ["VU"],
    679: ["FJ"],
    680: ["PW"],
    681: ["WF"],
    682: ["CK"],
    683: ["NU"],
    685: ["WS"],
    686: ["KI"],
    687: ["NC"],
    688: ["TV"],
    689: ["PF"],
    690: ["TK"],
    691: ["FM"],
    692: ["MH"],
    800: ["001"],
    808: ["001"],
    850: ["KP"],
    852: ["HK"],
    853: ["MO"],
    855: ["KH"],
    856: ["LA"],
    870: ["001"],
    878: ["001"],
    880: ["BD"],
    881: ["001"],
    882: ["001"],
    883: ["001"],
    886: ["TW"],
    888: ["001"],
    960: ["MV"],
    961: ["LB"],
    962: ["JO"],
    963: ["SY"],
    964: ["IQ"],
    965: ["KW"],
    966: ["SA"],
    967: ["YE"],
    968: ["OM"],
    970: ["PS"],
    971: ["AE"],
    972: ["IL"],
    973: ["BH"],
    974: ["QA"],
    975: ["BT"],
    976: ["MN"],
    977: ["NP"],
    979: ["001"],
    992: ["TJ"],
    993: ["TM"],
    994: ["AZ"],
    995: ["GE"],
    996: ["KG"],
    998: ["UZ"]
  },
      wa = {
    AC: [, [,, "(?:[01589]\\d|[46])\\d{4}",,,,,,, [5, 6]], [,, "6[2-467]\\d{3}",,,, "62889",,, [5]], [,, "4\\d{4}",,,, "40123",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AC", 247, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "[01589]\\d{5}",,,, "542011",,, [6]],,, [,,,,,,,,, [-1]]],
    AD: [, [,, "(?:1|6\\d)\\d{7}|[136-9]\\d{5}",,,,,,, [6, 8, 9]], [,, "[78]\\d{5}",,,, "712345",,, [6]], [,, "690\\d{6}|[36]\\d{5}",,,, "312345",,, [6, 9]], [,, "180[02]\\d{4}",,,, "18001234",,, [8]], [,, "[19]\\d{5}",,,, "912345",,, [6]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AD", 376, "00",,,,,,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["[136-9]"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["1"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]],, [,,,,,,,,, [-1]],,, [,, "1800\\d{4}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AE: [, [,, "(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}",,,,,,, [5, 6, 7, 8, 9, 10, 11, 12]], [,, "[2-4679][2-8]\\d{6}",,,, "22345678",,, [8], [7]], [,, "5[024-68]\\d{7}",,,, "501234567",,, [9]], [,, "400\\d{6}|800\\d{2,9}",,,, "800123456"], [,, "900[02]\\d{5}",,,, "900234567",,, [9]], [,, "700[05]\\d{5}",,,, "700012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AE", 971, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2,9})", "$1 $2", ["60|8"]], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[236]|[479][2-8]"], "0$1"], [, "(\\d{3})(\\d)(\\d{5})", "$1 $2 $3", ["[479]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "600[25]\\d{5}",,,, "600212345",,, [9]],,, [,,,,,,,,, [-1]]],
    AF: [, [,, "[2-7]\\d{8}",,,,,,, [9], [7]], [,, "(?:[25][0-8]|[34][0-4]|6[0-5])[2-9]\\d{6}",,,, "234567890",,,, [7]], [,, "7(?:[014-9]\\d|2[89]|3[01])\\d{6}",,,, "701234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AF", 93, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AG: [, [,, "(?:268|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "268(?:4(?:6[0-38]|84)|56[0-2])\\d{4}",,,, "2684601234",,,, [7]], [,, "268(?:464|7(?:1[3-9]|2\\d|3[246]|64|[78][0-689]))\\d{4}",,,, "2684641234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "26848[01]\\d{4}",,,, "2684801234",,,, [7]], "AG", 1, "011", "1",,, "1|([457]\\d{6})$", "268$1",,,,, [,, "26840[69]\\d{4}",,,, "2684061234",,,, [7]],, "268", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AI: [, [,, "(?:264|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "2644(?:6[12]|9[78])\\d{4}",,,, "2644612345",,,, [7]], [,, "264(?:235|476|5(?:3[6-9]|8[1-4])|7(?:29|72))\\d{4}",,,, "2642351234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "AI", 1, "011", "1",,, "1|([2457]\\d{6})$", "264$1",,,,, [,,,,,,,,, [-1]],, "264", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AL: [, [,, "(?:(?:[2-58]|6\\d)\\d\\d|700)\\d{5}|(?:8\\d{2,3}|900)\\d{3}",,,,,,, [6, 7, 8, 9], [5]], [,, "(?:[2358](?:[16-9]\\d[2-9]|[2-5][2-9]\\d)|4(?:[2-57-9][2-9]|6\\d)\\d)\\d{4}",,,, "22345678",,, [8], [5, 6, 7]], [,, "6(?:[689][2-9]|7[2-6])\\d{6}",,,, "662123456",,, [9]], [,, "800\\d{4}",,,, "8001234",,, [7]], [,, "900[1-9]\\d\\d",,,, "900123",,, [6]], [,, "808[1-9]\\d\\d",,,, "808123",,, [6]], [,, "700[2-9]\\d{4}",,,, "70021234",,, [8]], [,,,,,,,,, [-1]], "AL", 355, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,4})", "$1 $2", ["80|9"], "0$1"], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["4[2-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2358][2-5]|4"], "0$1"], [, "(\\d{3})(\\d{5})", "$1 $2", ["[23578]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["6"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AM: [, [,, "(?:[1-489]\\d|55|60|77)\\d{6}",,,,,,, [8], [5, 6]], [,, "(?:(?:1[0-2]|47)\\d|2(?:2[2-46]|3[1-8]|4[2-69]|5[2-7]|6[1-9]|8[1-7])|3[12]2)\\d{5}",,,, "10123456",,,, [5, 6]], [,, "(?:4[1349]|55|77|88|9[13-9])\\d{6}",,,, "77123456"], [,, "800\\d{5}",,,, "80012345"], [,, "90[016]\\d{5}",,,, "90012345"], [,, "80[1-4]\\d{5}",,,, "80112345"], [,,,,,,,,, [-1]], [,, "60(?:2[78]|3[5-9]|4[02-9]|5[0-46-9]|[6-8]\\d|90)\\d{4}",,,, "60271234"], "AM", 374, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[89]0"], "0 $1"], [, "(\\d{2})(\\d{6})", "$1 $2", ["1|47"], "(0$1)"], [, "(\\d{3})(\\d{5})", "$1 $2", ["[23]"], "(0$1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["[4-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AO: [, [,, "[29]\\d{8}",,,,,,, [9]], [,, "2\\d(?:[0134][25-9]|[25-9]\\d)\\d{5}",,,, "222123456"], [,, "9[1-49]\\d{7}",,,, "923123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AO", 244, "00",,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[29]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AR: [, [,, "(?:11|(?:[2368]|9\\d)\\d)\\d{8}",,,,,,, [10, 11], [6, 7, 8]], [,, "(?:(?:11[2-7]|670)\\d\\d|2(?:2(?:0(?:2[4-6]|[45]\\d)|(?:1[2-6]|3[3-6])\\d|2(?:14|[3467][4-6]|[59][45])|4(?:[156][4-6]|[23]4|4[45])|5(?:2[45]|[45][4-6]|7[3-6])|6(?:[145]4|2[2-6]|[6-8][4-6])|7[1-4]4|8(?:1[3-6]|[356]4|4[2-7])|9(?:1[4-6]|[267]4))|3(?:0(?:2[2-6]|4\\d)|1(?:[47][4-6]|64)|2(?:[03][2-6]|4[3-6]|5[4-6]|6[45])|3[13-8]4|4(?:[24][45]|34|5[4-6]|6[3-6])|5(?:[25][4-6]|[346-8]4)|(?:64|7[45])\\d|9(?:2[3-6]|[3-5]4|6[4-6]))|4(?:7(?:3[45]|[48][4-6]|54|7[2-6])|94\\d)|6(?:(?:04|1[2-7]|[36][45])\\d|2(?:2[2-6]|[46]4|5[4-6])|4(?:[45]\\d|6[0-46-9]|[78]4)|5(?:[1568]4|7[2-7]))|80[45]\\d|9(?:0(?:1[3-6]|2[45]|34)|(?:1[4-6]|9[3-6])\\d|2(?:0[2-7]|[1457-9]4|[26][45]|3[3-6])|3(?:[1356]4|2[4-6]|4[45])|4(?:[08]4|2[2-6]|4\\d|5[02-69]|6[45])|5(?:[23]4|4[2-8])|6(?:[23]4|4[3-6]|6[2-7])|7(?:2[45]|[4-6]\\d)|8(?:24|3[2-6]|[45]\\d)))|3(?:3(?:2(?:7[45]|9[3-6])|64\\d|8[2578][4-6])|4(?:0[0-24-9][4-6]|(?:1[2-7]|2[4-6])\\d|3(?:4\\d|5[0-7]|6[1-69]|[78][4-6])|4(?:2[3-6]|[457][4-6]|6[2-6])|5(?:4[0-4679]|[56][024-6]|8[4-6])|6(?:[03-9][4-6]|2[2-6])|7(?:1[3-6]|2[4-6]|6[2-6])|8(?:[27][2-7]|3[4-6]|4\\d|9[2-6])|9(?:[136-8][4-6]|2[2-7]))|5(?:1[2-8]\\d|2(?:[124][4-6]|5[3-6])|3(?:[23][4-6]|[4-6]\\d|7[3-6])|4(?:1[2-6]|[2689][4-6]|[347][3-6])|6(?:[23][4-6]|4[2-6])|7(?:1[3-6]|[2-6][4-6])|8(?:[23][4-6]|[46]\\d|5[013-7]))|6(?:2[45]|44)\\d|7(?:[069][45]\\d|1(?:[15][46]|6[4-6]|8[3-6])|(?:2[15]|3[145]|4[13])[4-6]|5(?:[17][3-6]|[468][4-6]|5[2-7])|7(?:[2-5][4-6]|7[2-8])|8(?:1[46]|[26][4-6]))|8(?:(?:0[45]|1[2-6])\\d|2(?:1[46]|[5-7][4-6])|3(?:[278][4-6]|4\\d|5[124-6])|4(?:[16][46]|[3-5][4-6])|5(?:[34]\\d|5[0-46-9]|6[0-246-9]|[78][4-6])|6(?:[1-378][4-6]|5[2-8]|9[46])|7(?:[24-6]\\d|3[2-6]|7[4-6]|8[2-7])|8(?:[3-5]\\d|6[0-68]|7[4-6]|8[3-6])|9(?:[12][46]|4[4-6]))))\\d{5}",,,, "1123456789",,, [10], [6, 7, 8]], [,, "(?:675\\d\\d|9(?:11[2-7]\\d\\d|2(?:2(?:0(?:2[4-6]|[45]\\d)|(?:1[2-6]|3[3-6])\\d|2(?:14|[3467][4-6]|[59][45])|4(?:[156][4-6]|[23]4|4[45])|5(?:2[45]|[45][4-6]|7[3-6])|6(?:[145]4|2[2-6]|[6-8][4-6])|7[1-4]4|8(?:1[3-6]|[356]4|4[2-7])|9(?:1[4-6]|[267]4))|3(?:0(?:2[2-6]|4\\d)|1(?:[47][4-6]|64)|2(?:[03][2-6]|4[3-6]|5[4-6]|6[45])|3[13-8]4|4(?:[24][45]|34|5[4-6]|6[3-6])|5(?:[25][4-6]|[346-8]4)|(?:64|7[45])\\d|9(?:2[3-6]|[3-5]4|6[4-6]))|4(?:7(?:3[45]|[48][4-6]|54|7[2-6])|94\\d)|6(?:(?:04|1[2-7]|[36][45])\\d|2(?:2[2-6]|[46]4|5[4-6])|4(?:[45]\\d|6[0-46-9]|[78]4)|5(?:[1568]4|7[2-7]))|80[45]\\d|9(?:0(?:1[3-6]|2[45]|34)|(?:1[4-6]|9[3-6])\\d|2(?:0[2-7]|[1457-9]4|[26][45]|3[3-6])|3(?:[1356]4|2[4-6]|4[45])|4(?:[08]4|2[2-6]|4\\d|5[02-69]|6[45])|5(?:[23]4|4[2-8])|6(?:[23]4|4[3-6]|6[2-7])|7(?:2[45]|[4-6]\\d)|8(?:24|3[2-6]|[45]\\d)))|3(?:3(?:2(?:7[45]|9[3-6])|64\\d|8[2578][4-6])|4(?:0[0-24-9][4-6]|(?:1[2-7]|2[4-6])\\d|3(?:4\\d|5[0-7]|6[1-69]|[78][4-6])|4(?:2[3-6]|[457][4-6]|6[2-6])|5(?:4[0-4679]|[56][024-6]|8[4-6])|6(?:[03-9][4-6]|2[2-6])|7(?:1[3-6]|2[4-6]|6[2-6])|8(?:[27][2-7]|3[4-6]|4\\d|9[2-6])|9(?:[136-8][4-6]|2[2-7]))|5(?:1[2-8]\\d|2(?:[124][4-6]|5[3-6])|3(?:[23][4-6]|[4-6]\\d|7[3-6])|4(?:1[2-6]|[2689][4-6]|[347][3-6])|6(?:[23][4-6]|4[2-6])|7(?:1[3-6]|[2-6][4-6])|8(?:[23][4-6]|[46]\\d|5[013-7]))|6(?:2[45]|44)\\d|7(?:[069][45]\\d|1(?:[15][46]|6[4-6]|8[3-6])|(?:2[15]|3[145]|4[13])[4-6]|5(?:[17][3-6]|[468][4-6]|5[2-7])|7(?:[2-5][4-6]|7[2-8])|8(?:1[46]|[26][4-6]))|8(?:(?:0[45]|1[2-6])\\d|2(?:1[46]|[5-7][4-6])|3(?:[278][4-6]|4\\d|5[124-6])|4(?:[16][46]|[3-5][4-6])|5(?:[34]\\d|5[0-46-9]|6[0-246-9]|[78][4-6])|6(?:[1-378][4-6]|5[2-8]|9[46])|7(?:[24-6]\\d|3[2-6]|7[4-6]|8[2-7])|8(?:[3-5]\\d|6[0-68]|7[4-6]|8[3-6])|9(?:[12][46]|4[4-6])))))\\d{5}",,,, "91123456789",,,, [6, 7, 8]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "60[04579]\\d{7}",,,, "6001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AR", 54, "00", "0",,, "0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?", "9$1",,, [[, "(\\d{3})", "$1", ["[09]|1(?:[02]|1[02-5])"]], [, "(\\d{2})(\\d{4})", "$1-$2", ["[2-7]|8[0-7]"]], [, "(\\d{3})(\\d{4})", "$1-$2", ["[2-7]|8[013-8]"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["2[0-8]|[3-7]"]], [, "(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))", "2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:[56][4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|[45][4-6]))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4[4-6]|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78])))", "2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|6[4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78])))"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], [, "(\\d)(\\d{4})(\\d{2})(\\d{4})", "$2 15-$3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))", "9(?:2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:[56][4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|[45][4-6]))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4[4-6]|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78]))))", "9(?:2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|6[4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78]))))"], "0$1"], [, "(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 15-$3-$4", ["91"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 15-$3-$4", ["9"], "0$1"]], [[, "(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))", "2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:[56][4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|[45][4-6]))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4[4-6]|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78])))", "2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|6[4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78])))"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], [, "(\\d)(\\d{4})(\\d{2})(\\d{4})", "$1 $2 $3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))", "9(?:2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:[56][4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|[45][4-6]))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4[4-6]|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78]))))", "9(?:2(?:2(?:02|[24-9])|3(?:02|[1-59])|47|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5(?:[24-6]|3[2-5]))|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|6[4-6]|[78])|5(?:4[46]|[56][4-6]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3(?:[278]|5[4-6])|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7(?:[378]|6[4-6])|8(?:5[4-6]|6[3-6]|[78]))))"]], [, "(\\d)(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3-$4", ["91"]], [, "(\\d)(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3-$4", ["9"]]], [,,,,,,,,, [-1]],,, [,, "810\\d{7}",,,,,,, [10]], [,, "810\\d{7}",,,, "8101234567",,, [10]],,, [,,,,,,,,, [-1]]],
    AS: [, [,, "(?:[58]\\d\\d|684|900)\\d{7}",,,,,,, [10], [7]], [,, "6846(?:22|33|44|55|77|88|9[19])\\d{4}",,,, "6846221234",,,, [7]], [,, "684(?:2(?:5[2468]|72)|7(?:3[13]|70))\\d{4}",,,, "6847331234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "AS", 1, "011", "1",,, "1|([267]\\d{6})$", "684$1",,,,, [,,,,,,,,, [-1]],, "684", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AT: [, [,, "[1-35-9]\\d{8,12}|4(?:[0-24-9]\\d{4,11}|3(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7}))|[1-35-8]\\d{7}|[1-35-7]\\d{6}|[135-7]\\d{5}|[15]\\d{4}|1\\d{3}",,,,,,, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [3]], [,, "(?:1(?:11|[2-9]\\d{2,10})|(?:2(?:1[467]|2[13-8]|5[2357]|6[1-46-8]|7[1-8]|8[124-7]|9[1458])|3(?:1[1-8]|3[23568]|4[5-7]|5[1378]|6[1-38]|8[3-68])|7(?:2[1-8]|3[25]|4[13478]|5[68]|6[16-8]|7[1-6]|9[45]))\\d{3,9}|4(?:(?:2[1-8]|35|7[1368]|8[2457])\\d{3,9}|63\\d{2,9})|5(?:12\\d{2,9}|(?:2[1-8]|3[357]|4[147]|5[12578]|6[37])\\d{3,9})|6(?:(?:13|2[1-47]|4[135-8]|5[468])\\d{3,9}|62\\d{2,9}))\\d|(?:316|732)\\d{3}",,,, "1234567890",,,, [3]], [,, "6(?:5[0-3579]|6[013-9]|[7-9]\\d)\\d{4,10}",,,, "664123456",,, [7, 8, 9, 10, 11, 12, 13]], [,, "800\\d{6,10}",,,, "800123456",,, [9, 10, 11, 12, 13]], [,, "9(?:0[01]|3[019])\\d{6,10}",,,, "900123456",,, [9, 10, 11, 12, 13]], [,, "8(?:10|2[018])\\d{6,10}|828\\d{5}",,,, "810123456",,, [8, 9, 10, 11, 12, 13]], [,,,,,,,,, [-1]], [,, "5(?:0[1-9]|17|[79]\\d)\\d{2,10}|7[28]0\\d{6,10}",,,, "780123456",,, [5, 6, 7, 8, 9, 10, 11, 12, 13]], "AT", 43, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], [, "(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], [, "(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], [, "(\\d{6})", "$1", ["1"]], [, "(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], [, "(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], [[, "(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], [, "(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], [, "(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], [, "(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], [, "(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AU: [, [,, "1\\d{4,9}|(?:[2-478]\\d\\d|550)\\d{6}",,,,,,, [5, 6, 7, 8, 9, 10]], [,, "(?:[237]\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\d|4[0-4]))|(?:[6-8]\\d{3}|9(?:[02-9]\\d\\d|1(?:[0-57-9]\\d|6[0135-9])))\\d))\\d{3}",,,, "212345678",,, [9], [8]], [,, "4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[6-9]|7[02-9]|8[0-2457-9]|9[017-9])\\d{6}",,,, "412345678",,, [9]], [,, "180(?:0\\d{3}|2)\\d{3}",,,, "1800123456",,, [7, 10]], [,, "190[0-26]\\d{6}",,,, "1900123456",,, [10]], [,, "13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}",,,, "1300123456",,, [6, 8, 10]], [,,,,,,,,, [-1]], [,, "(?:14(?:5\\d|71)|550\\d)\\d{5}",,,, "550123456",,, [9]], "AU", 61, "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "0",,, "0",, "0011",, [[, "(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["13"]], [, "(\\d{3})(\\d{3})", "$1 $2", ["19"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["180", "1802"]], [, "(\\d{4})(\\d{3,4})", "$1 $2", ["19"]], [, "(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|[45]"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]]], [[, "(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|[45]"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]]], [,, "16\\d{3,7}",,,, "1612345",,, [5, 6, 7, 8, 9]], 1,, [,, "1[38]00\\d{6}|1(?:345[0-4]|802)\\d{3}|13\\d{4}",,,,,,, [6, 7, 8, 10]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AW: [, [,, "(?:[25-79]\\d\\d|800)\\d{4}",,,,,,, [7]], [,, "5(?:2\\d|8[1-9])\\d{4}",,,, "5212345"], [,, "(?:290|5[69]\\d|6(?:[03]0|22|4[0-2]|[69]\\d)|7(?:[34]\\d|7[07])|9(?:6[45]|9[4-8]))\\d{4}",,,, "5601234"], [,, "800\\d{4}",,,, "8001234"], [,, "900\\d{4}",,,, "9001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:28\\d|501)\\d{4}",,,, "5011234"], "AW", 297, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[25-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    AX: [, [,, "(?:(?:[1247]\\d|3[0-46-9]|[56]0)\\d\\d|800)\\d{4,6}|(?:[1-47]\\d|50)\\d{4,5}|2\\d{4}",,,,,,, [5, 6, 7, 8, 9, 10]], [,, "18[1-8]\\d{3,6}",,,, "181234567",,, [6, 7, 8, 9]], [,, "(?:4[0-8]|50)\\d{4,8}",,,, "412345678",,, [6, 7, 8, 9, 10]], [,, "800\\d{4,6}",,,, "800123456",,, [7, 8, 9]], [,, "[67]00\\d{5,6}",,,, "600123456",,, [8, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AX", 358, "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "0",,, "0",, "00",,,, [,,,,,,,,, [-1]],, "18", [,,,,,,,,, [-1]], [,, "(?:10|[23][09])\\d{4,8}|60(?:[12]\\d{5,6}|6\\d{7})|7(?:(?:1|3\\d)\\d{7}|5[03-9]\\d{3,7})|20[2-59]\\d\\d",,,, "10112345"],,, [,,,,,,,,, [-1]]],
    AZ: [, [,, "(?:(?:(?:[12457]\\d|60|88)\\d|365)\\d{3}|900200)\\d{3}",,,,,,, [9], [7]], [,, "(?:(?:1[28]\\d|2(?:[045]2|1[24]|2[2-4]|33|6[23]))\\d\\d|365(?:[0-46-9]\\d|5[0-35-9]))\\d{4}",,,, "123123456",,,, [7]], [,, "(?:36554|(?:4[04]|5[015]|60|7[07])\\d{3})\\d{4}",,,, "401234567"], [,, "88\\d{7}",,,, "881234567"], [,, "900200\\d{3}",,,, "900200123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AZ", 994, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[1-9]"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[12]|365", "[12]|365", "[12]|365(?:[0-46-9]|5[0-35-9])"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[3-8]"], "0$1"]], [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[12]|365", "[12]|365", "[12]|365(?:[0-46-9]|5[0-35-9])"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[3-8]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BA: [, [,, "(?:[3589]\\d|49|6\\d\\d?|70)\\d{6}",,,,,,, [8, 9], [6]], [,, "(?:3(?:[05-79][2-9]|1[4579]|[23][24-9]|4[2-4689]|8[2457-9])|49[2-579]|5(?:0[2-49]|[13][2-9]|[268][2-4679]|4[4689]|5[2-79]|7[2-69]|9[2-4689]))\\d{5}",,,, "30212345",,, [8], [6]], [,, "6(?:0(?:3\\d|40)|[1-356]\\d|44[0-6]|71[137])\\d{5}",,,, "61123456"], [,, "8[08]\\d{6}",,,, "80123456",,, [8]], [,, "9[0246]\\d{6}",,,, "90123456",,, [8]], [,, "8[12]\\d{6}",,,, "82123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BA", 387, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})", "$1-$2", ["[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-356]|[7-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-356]|[7-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "70(?:3[0146]|[56]0)\\d{4}",,,, "70341234",,, [8]],,, [,,,,,,,,, [-1]]],
    BB: [, [,, "(?:246|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\d|3[2-9])|5(?:20|[34]\\d|54|7[1-3])|6(?:2\\d|38)|7[35]7|9(?:1[89]|63))\\d{4}",,,, "2464123456",,,, [7]], [,, "246(?:2(?:[356]\\d|4[0-57-9]|8[0-79])|45\\d|69[5-7]|8(?:[2-5]\\d|83))\\d{4}",,,, "2462501234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "(?:246976|900[2-9]\\d\\d)\\d{4}",,,, "9002123456",,,, [7]], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "24631\\d{5}",,,, "2463101234",,,, [7]], "BB", 1, "011", "1",,, "1|([2-9]\\d{6})$", "246$1",,,,, [,,,,,,,,, [-1]],, "246", [,,,,,,,,, [-1]], [,, "246(?:292|367|4(?:1[7-9]|3[01]|44|67)|7(?:36|53))\\d{4}",,,, "2464301234",,,, [7]],,, [,,,,,,,,, [-1]]],
    BD: [, [,, "[13469]\\d{9}|8[0-79]\\d{7,8}|[2-7]\\d{8}|[2-9]\\d{7}|[3-689]\\d{6}|[57-9]\\d{5}",,,,,,, [6, 7, 8, 9, 10]], [,, "(?:(?:2(?:[45]\\d{3}|7(?:1[0-267]|2[0-289]|3[0-29]|4[01]|5[1-3]|6[013]|7[0178]|91)|8(?:0[125]|[13][1-6]|2[0157-9]|41|6[1-35]|7[1-5]|8[1-8]|9[0-6])|9(?:0[0-2]|1[0-4]|2[568]|3[3-6]|5[5-7]|6[01367]|7[15]|8[0146-9]))|7(?:02|21\\d|[3-589]1|6[12]|72[24])\\d|8(?:(?:[01]|217|3[12])\\d|4[12]|[5-7](?:1\\d|2)))\\d|3(?:(?:0(?:2[348]\\d|3[2-6])|(?:1(?:2[5-7]|[5-7])|3(?:1|24)|[5-7]1)\\d)\\d|2(?:1\\d\\d|2(?:[35]\\d\\d|4))|4(?:1\\d\\d|2(?:[25]\\d\\d|[47]))|8(?:1\\d\\d|2(?:(?:2\\d|4)\\d|3)))|4(?:0(?:2(?:[09]\\d|7)|33\\d\\d)|(?:1\\d|4(?:2[2-46]|5[25])|8(?:23|54))\\d\\d|2(?:1\\d\\d|2(?:[25]|[67]\\d\\d))|3(?:1\\d\\d(?:\\d{2})?|(?:2[236-9]|32)\\d\\d)|525|6(?:(?:[18]|2[3-6]|62)\\d\\d|5(?:[38]|[5-7]\\d\\d))|9(?:(?:[18]|2[2-5])\\d\\d|53\\d\\d?))|5(?:(?:02[03489]|1|22[2457]|32[35-79]|42[46]|[58]26|724)\\d\\d|6(?:(?:[18]|53)\\d\\d|2))|6(?:(?:(?:[04]2[34]|32[3478]|52[47]|[78]2[2-5]|92[2-6])\\d|6(?:[18]\\d|6(?:2(?:2|[34]\\d)|5[245]\\d)))\\d|2(?:(?:2[2-5]|8)\\d\\d|5(?:[3-5]\\d\\d|7)))|9(?:[24]1\\d\\d|[35]1))\\d{3}|(?:3(?:0(?:2[02-9]\\d|3[56])|(?:22[1-5]|32[2-6]|422)\\d|529)|(?:4(?:22[2-8]|32[02-9]|(?:[48][18]|71)\\d|5(?:1\\d|23)|6(?:2[467]|5[3-57]))|5(?:[2-47-9]1\\d|5(?:1\\d|26))|6(?:0(?:1\\d|24)|[3-589]1\\d|665[35])|81|9(?:[024]2|1\\d|81))\\d|732)\\d{3}|(?:4[46]23|5(?:222|32[37]))\\d{3}",,,, "27111234"], [,, "(?:1[13-9]\\d|(?:3[78]|44)[02-9]|6(?:44|6[02-9]))\\d{7}",,,, "1812345678",,, [10]], [,, "80[03]\\d{7}",,,, "8001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "96(?:0[469]|1[0-47]|3[389]|6[69]|7[78])\\d{6}",,,, "9604123456",,, [10]], "BD", 880, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{4,6})", "$1-$2", ["31[5-7]|[459]1"], "0$1"], [, "(\\d{3})(\\d{3,7})", "$1-$2", ["3(?:[2-5]1|[67]|8[013-9])|4(?:[235]1|4[01346-9]|6[168]|7|[89][18])|5(?:[2-578]1|6[128]|9)|6(?:[0389]1|28|4[14]|5|6[01346-9])|7(?:[2-589]|61)|8(?:0[014-9]|[12]|[3-7]1)|9(?:[24]1|[358])"], "0$1"], [, "(\\d{4})(\\d{3,6})", "$1-$2", ["[13-9]"], "0$1"], [, "(\\d)(\\d{7,8})", "$1-$2", ["2"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BE: [, [,, "4\\d{8}|[1-9]\\d{7}",,,,,,, [8, 9]], [,, "(?:(?:1[0-69]|[23][2-8]|4[23]|5\\d|6[013-57-9]|71|9[2-4])\\d|8(?:0[2-8]|[1-79]\\d))\\d{5}",,,, "12345678",,, [8]], [,, "4(?:5[56]|6[0135-8]|[79]\\d|8[3-9])\\d{6}",,,, "470123456",,, [9]], [,, "800[1-9]\\d{4}",,,, "80012345",,, [8]], [,, "(?:70(?:2[0-57]|3[0457]|44|69|7[0579])|90(?:0[0-35-8]|1[36]|2[0-3568]|3[0135689]|4[2-68]|5[1-68]|6[0-378]|7[23568]|9[34679]))\\d{4}",,,, "90012345",,, [8]], [,, "7879\\d{4}",,,, "78791234",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BE", 32, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:80|9)0"], "0$1"], [, "(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[239]|4[23]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[15-8]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "78(?:0[57]|1[0458]|2[25]|3[5-8]|48|[56]0|7[078])\\d{4}",,,, "78102345",,, [8]],,, [,,,,,,,,, [-1]]],
    BF: [, [,, "[25-7]\\d{7}",,,,,,, [8]], [,, "2(?:0(?:49|5[23]|6[56]|9[016-9])|4(?:4[569]|5[4-6]|6[56]|7[0179])|5(?:[34]\\d|50|6[5-7]))\\d{4}",,,, "20491234"], [,, "(?:5[124-8]|[67]\\d)\\d{6}",,,, "70123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BF", 226, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[25-7]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BG: [, [,, "[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}",,,,,,, [6, 7, 8, 9], [4, 5]], [,, "(?:(?:[236]\\d|5[1-9]|8[1-6]|9[1-7])\\d|4(?:[124-7]\\d|3[1-6])|7(?:0[1-9]|[1-9]\\d))\\d{4,5}|2\\d{5}",,,, "2123456",,, [6, 7, 8], [4, 5]], [,, "(?:4(?:3[07-9]|8\\d)|(?:8[7-9]\\d|9(?:8\\d|9[69]))\\d)\\d{5}",,,, "48123456",,, [8, 9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,, "90\\d{6}",,,, "90123456",,, [8]], [,,,,,,,,, [-1]], [,, "700\\d{5}",,,, "70012345",,, [8]], [,,,,,,,,, [-1]], "BG", 359, "00", "0",,, "0",,,, [[, "(\\d{6})", "$1", ["1"]], [, "(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], [[, "(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BH: [, [,, "[136-9]\\d{7}",,,,,,, [8]], [,, "(?:1(?:3[1356]|6[0156]|7\\d)\\d|6(?:1[16]\\d|500|6(?:0\\d|3[12]|44|7[7-9])|9[69][69])|7(?:1(?:11|78)|7\\d\\d))\\d{4}",,,, "17001234"], [,, "(?:3(?:[1-4679]\\d|5[013-69]|8[0-47-9])\\d|6(?:3(?:00|33|6[16])|6(?:3[03-9]|[69]\\d|7[0-6])))\\d{4}",,,, "36001234"], [,, "80\\d{6}",,,, "80123456"], [,, "(?:87|9[014578])\\d{6}",,,, "90123456"], [,, "84\\d{6}",,,, "84123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BH", 973, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[13679]|8[047]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BI: [, [,, "(?:[267]\\d|31)\\d{6}",,,,,,, [8]], [,, "22\\d{6}",,,, "22201234"], [,, "(?:29|31|6[189]|7[125-9])\\d{6}",,,, "79561234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BI", 257, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2367]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BJ: [, [,, "[2689]\\d{7}",,,,,,, [8]], [,, "2(?:02|1[037]|2[45]|3[68])\\d{5}",,,, "20211234"], [,, "(?:6\\d|9[03-9])\\d{6}",,,, "90011234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "857[58]\\d{4}",,,, "85751234"], "BJ", 229, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2689]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "81\\d{6}",,,, "81123456"],,, [,,,,,,,,, [-1]]],
    BL: [, [,, "(?:590|69\\d)\\d{6}",,,,,,, [9]], [,, "590(?:2[7-9]|5[12]|87)\\d{4}",,,, "590271234"], [,, "69(?:0\\d\\d|1(?:2[29]|3[0-5]))\\d{4}",,,, "690001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BL", 590, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BM: [, [,, "(?:441|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "441(?:2(?:02|23|[3479]\\d|61)|[46]\\d\\d|5(?:4\\d|60|89)|824)\\d{4}",,,, "4412345678",,,, [7]], [,, "441(?:[37]\\d|5[0-39])\\d{5}",,,, "4413701234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "BM", 1, "011", "1",,, "1|([2-8]\\d{6})$", "441$1",,,,, [,,,,,,,,, [-1]],, "441", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BN: [, [,, "[2-578]\\d{6}",,,,,,, [7]], [,, "(?:2(?:[013-9]\\d|2[0-7])|[3-5]\\d\\d)\\d{4}",,,, "2345678"], [,, "(?:22[89]|[78]\\d\\d)\\d{4}",,,, "7123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BN", 673, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-578]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BO: [, [,, "(?:[2-467]\\d{3}|80017)\\d{4}",,,,,,, [8, 9], [7]], [,, "(?:2(?:2\\d\\d|5(?:11|[258]\\d|9[67])|6(?:12|2\\d|9[34])|8(?:2[34]|39|62))|3(?:3\\d\\d|4(?:6\\d|8[24])|8(?:25|42|5[257]|86|9[25])|9(?:[27]\\d|3[2-4]|4[248]|5[24]|6[2-6]))|4(?:4\\d\\d|6(?:11|[24689]\\d|72)))\\d{4}",,,, "22123456",,, [8], [7]], [,, "[67]\\d{7}",,,, "71234567",,, [8]], [,, "80017\\d{4}",,,, "800171234",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BO", 591, "00(?:1\\d)?", "0",,, "0(1\\d)?",,,, [[, "(\\d)(\\d{7})", "$1 $2", ["[23]|4[46]"],, "0$CC $1"], [, "(\\d{8})", "$1", ["[67]"],, "0$CC $1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["8"],, "0$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BQ: [, [,, "(?:[34]1|7\\d)\\d{5}",,,,,,, [7]], [,, "(?:318[023]|41(?:6[023]|70)|7(?:1[578]|50)\\d)\\d{3}",,,, "7151234"], [,, "(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\d|9[056])\\d)\\d{3}",,,, "3181234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BQ", 599, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "[347]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BR: [, [,, "(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-24679]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}",,,,,,, [8, 9, 10, 11]], [,, "(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-5]\\d{7}",,,, "1123456789",,, [10], [8]], [,, "(?:[14689][1-9]9\\d|2[12478](?:7|9\\d)|(?:3[1-578]|5[13-5]|7[13-579])(?:[6-8]|9\\d?))\\d{7}|(?:[189][1-9]7|[46][1-9][6-9])\\d{7}",,,, "11961234567",,, [10, 11], [8, 9]], [,, "800\\d{6,7}",,,, "800123456",,, [9, 10]], [,, "(?:300|[59]00\\d?)\\d{6}",,,, "300123456",,, [9, 10]], [,, "(?:300\\d(?:\\d{2})?|4(?:0(?:0\\d|20)|370))\\d{4}",,,, "40041234",,, [8, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BR", 55, "00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)", "0",,, "0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?", "$2",,, [[, "(\\d{3,5})", "$1", ["1(?:1[25-8]|2[357-9]|3[02-68]|4[12568]|5|6[0-8]|8[015]|9[0-47-9])"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "300|4(?:0(?:0|20)|370)"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["[2-9]", "[235-9]|4(?:[0-24-9]|3(?:[0-689]|7[1-9]))"]], [, "(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], [, "(\\d{5})(\\d{4})", "$1-$2", ["9"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[189][1-9]|2[12478])[2-57]|[3-7]"], "($1)", "0 $CC ($1)"], [, "(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["1[1-9]|[2-9]"], "($1)", "0 $CC ($1)"]], [[, "(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "300|4(?:0(?:0|20)|370)"]], [, "(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[189][1-9]|2[12478])[2-57]|[3-7]"], "($1)", "0 $CC ($1)"], [, "(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["1[1-9]|[2-9]"], "($1)", "0 $CC ($1)"]], [,,,,,,,,, [-1]],,, [,, "(?:300\\d|40(?:0\\d|20))\\d{4}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BS: [, [,, "(?:242|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-4]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\d{4}",,,, "2423456789",,,, [7]], [,, "242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\d|[89]9))\\d{4}",,,, "2423591234",,,, [7]], [,, "(?:242300|8(?:00|33|44|55|66|77|88)[2-9]\\d\\d)\\d{4}",,,, "8002123456",,,, [7]], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "BS", 1, "011", "1",,, "1|([3-8]\\d{6})$", "242$1",,,,, [,,,,,,,,, [-1]],, "242", [,,,,,,,,, [-1]], [,, "242225[0-46-9]\\d{3}",,,, "2422250123"],,, [,,,,,,,,, [-1]]],
    BT: [, [,, "[17]\\d{7}|[2-8]\\d{6}",,,,,,, [7, 8], [6]], [,, "(?:2[3-6]|[34][5-7]|5[236]|6[2-46]|7[246]|8[2-4])\\d{5}",,,, "2345678",,, [7], [6]], [,, "(?:1[67]|77)\\d{6}",,,, "17123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BT", 975, "00",,,,,,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["[2-7]"]], [, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]], [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BW: [, [,, "(?:(?:[2-6]|7\\d)\\d|90)\\d{5}",,,,,,, [7, 8]], [,, "(?:2(?:4[0-48]|6[0-24]|9[0578])|3(?:1[0-35-9]|55|[69]\\d|7[01])|4(?:6[03]|7[1267]|9[0-5])|5(?:3[0389]|4[0489]|7[1-47]|88|9[0-49])|6(?:2[1-35]|5[149]|8[067]))\\d{4}",,,, "2401234",,, [7]], [,, "7(?:[1-6]\\d{3}|7(?:[014-8]\\d\\d|200))\\d{3}",,,, "71123456",,, [8]], [,,,,,,,,, [-1]], [,, "90\\d{5}",,,, "9012345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "79(?:1(?:[01]\\d|20)|2[0-2]\\d)\\d{3}",,,, "79101234",,, [8]], "BW", 267, "00",,,,,,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["90"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["[2-6]"]], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BY: [, [,, "(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}",,,,,,, [6, 7, 8, 9, 10, 11], [5]], [,, "(?:1(?:5(?:1[1-5]|[24]\\d|6[2-4]|9[1-7])|6(?:[235]\\d|4[1-7])|7\\d\\d)|2(?:1(?:[246]\\d|3[0-35-9]|5[1-9])|2(?:[235]\\d|4[0-8])|3(?:[26]\\d|3[02-79]|4[024-7]|5[03-7])))\\d{5}",,,, "152450911",,, [9], [5, 6, 7]], [,, "(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\d)\\d{6}",,,, "294911911",,, [9]], [,, "8(?:0[013]|20\\d)\\d{7}|800\\d{3,6}",,,, "8011234567"], [,, "(?:810|902)\\d{7}",,,, "9021234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "249\\d{6}",,,, "249123456",,, [9]], "BY", 375, "810", "8",,, "0|80?",, "8~10",, [[, "(\\d{3})(\\d{3})", "$1 $2", ["800"], "8 $1"], [, "(\\d{3})(\\d{2})(\\d{2,4})", "$1 $2 $3", ["800"], "8 $1"], [, "(\\d{4})(\\d{2})(\\d{3})", "$1 $2-$3", ["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])", "1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"], "8 0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["1(?:[56]|7[467])|2[1-3]"], "8 0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-4]"], "8 0$1"], [, "(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[89]"], "8 $1"]],, [,,,,,,,,, [-1]],,, [,, "(?:8(?:0[013]|10|20\\d)|902)\\d{7}|800\\d{3,6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    BZ: [, [,, "(?:0800\\d|[2-8])\\d{6}",,,,,,, [7, 11]], [,, "(?:2(?:[02]\\d|36)|[3-58][02]\\d|7(?:[02]\\d|32))\\d{4}",,,, "2221234",,, [7]], [,, "6[0-35-7]\\d{5}",,,, "6221234",,, [7]], [,, "0800\\d{7}",,,, "08001234123",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BZ", 501, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-8]"]], [, "(\\d)(\\d{3})(\\d{4})(\\d{3})", "$1-$2-$3-$4", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CA: [, [,, "(?:[2-8]\\d|90)\\d{8}",,,,,,, [10], [7]], [,, "(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}",,,, "5062345678",,,, [7]], [,, "(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}",,,, "5062345678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\d{6}",,,, "5002345678"], [,, "600[2-9]\\d{6}",,,, "6002012345"], "CA", 1, "011", "1",,, "1",,, 1,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CC: [, [,, "1\\d{5,9}|(?:[48]\\d\\d|550)\\d{6}",,,,,,, [6, 7, 8, 9, 10]], [,, "8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}",,,, "891621234",,, [9], [8]], [,, "4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[6-9]|7[02-9]|8[0-2457-9]|9[017-9])\\d{6}",,,, "412345678",,, [9]], [,, "180(?:0\\d{3}|2)\\d{3}",,,, "1800123456",,, [7, 10]], [,, "190[0-26]\\d{6}",,,, "1900123456",,, [10]], [,, "13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}",,,, "1300123456",,, [6, 8, 10]], [,,,,,,,,, [-1]], [,, "(?:14(?:5\\d|71)|550\\d)\\d{5}",,,, "550123456",,, [9]], "CC", 61, "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "0",,, "0|([59]\\d{7})$", "8$1", "0011",,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CD: [, [,, "[189]\\d{8}|[1-68]\\d{6}",,,,,,, [7, 9]], [,, "12\\d{7}|[1-6]\\d{6}",,,, "1234567"], [,, "(?:8(?:[0-2459]\\d\\d|8)|9[017-9]\\d\\d)\\d{5}",,,, "991234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CD", 243, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], [, "(\\d{2})(\\d{5})", "$1 $2", ["[1-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CF: [, [,, "(?:[27]\\d{3}|8776)\\d{4}",,,,,,, [8]], [,, "2[12]\\d{6}",,,, "21612345"], [,, "7[0257]\\d{6}",,,, "70012345"], [,,,,,,,,, [-1]], [,, "8776\\d{4}",,,, "87761234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CF", 236, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[278]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CG: [, [,, "(?:(?:0\\d|80)\\d|222)\\d{6}",,,,,,, [9]], [,, "222[1-589]\\d{5}",,,, "222123456"], [,, "0[14-6]\\d{7}",,,, "061234567"], [,,,,,,,,, [-1]], [,, "80(?:0\\d\\d|11[0-4])\\d{4}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CG", 242, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["801"]], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["8"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[02]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CH: [, [,, "8\\d{11}|[2-9]\\d{8}",,,,,,, [9, 12]], [,, "(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\\d{7}",,,, "212345678",,, [9]], [,, "7[35-9]\\d{7}",,,, "781234567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "90[016]\\d{6}",,,, "900123456",,, [9]], [,, "84[0248]\\d{6}",,,, "840123456",,, [9]], [,, "878\\d{6}",,,, "878123456",,, [9]], [,,,,,,,,, [-1]], "CH", 41, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8[047]|90"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-79]|81"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["8"], "0$1"]],, [,, "74[0248]\\d{6}",,,, "740123456",,, [9]],,, [,,,,,,,,, [-1]], [,, "5[18]\\d{7}",,,, "581234567",,, [9]],,, [,, "860\\d{9}",,,, "860123456789",,, [12]]],
    CI: [, [,, "[02-8]\\d{7}",,,,,,, [8]], [,, "(?:2(?:0[023]|1[02357]|[23][045]|4[03-5])|3(?:0[06]|1[069]|[2-4][07]|5[09]|6[08]))\\d{5}",,,, "21234567"], [,, "(?:[07][1-9]|[45]\\d|6[014-9]|8[4-9])\\d{6}",,,, "01234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CI", 225, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[02-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CK: [, [,, "[2-8]\\d{4}",,,,,,, [5]], [,, "(?:2\\d|3[13-7]|4[1-5])\\d{3}",,,, "21234"], [,, "[5-8]\\d{4}",,,, "71234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CK", 682, "00",,,,,,,, [[, "(\\d{2})(\\d{3})", "$1 $2", ["[2-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CL: [, [,, "(?:1230|[2-57-9]\\d|6\\d{1,3})\\d{7}",,,,,,, [9, 10, 11]], [,, "(?:2(?:1962|(?:2\\d\\d|32[0-46-8])\\d)|(?:(?:3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|9[2-9])\\d|8(?:0[1-9]|[1-9]\\d))\\d\\d)\\d{4}",,,, "221234567",,, [9]], [,, "(?:2(?:1962|(?:2\\d\\d|32[0-46-8])\\d)|(?:(?:3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|9[2-9])\\d|8(?:0[1-9]|[1-9]\\d))\\d\\d)\\d{4}",,,, "221234567",,, [9]], [,, "(?:1230\\d|800)\\d{6}",,,, "800123456",,, [9, 11]], [,,,,,,,,, [-1]], [,, "600\\d{7,8}",,,, "6001234567",,, [10, 11]], [,,,,,,,,, [-1]], [,, "44\\d{7}",,,, "441234567",,, [9]], "CL", 56, "(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0",,,,,,, 1, [[, "(\\d{4})", "$1", ["1(?:[03-589]|21)|[29]0|78"]], [, "(\\d{5})(\\d{4})", "$1 $2", ["21"], "($1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[23]"], "($1)"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]], [[, "(\\d{5})(\\d{4})", "$1 $2", ["21"], "($1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[23]"], "($1)"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]], [,,,,,,,,, [-1]],,, [,, "600\\d{7,8}",,,,,,, [10, 11]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CM: [, [,, "(?:[26]\\d\\d|88)\\d{6}",,,,,,, [8, 9]], [,, "2(?:22|33|4[23])\\d{6}",,,, "222123456",,, [9]], [,, "6[5-9]\\d{7}",,,, "671234567",,, [9]], [,, "88\\d{6}",,,, "88012345",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CM", 237, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["88"]], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CN: [, [,, "(?:(?:(?:1[03-68]|2\\d)\\d\\d|[3-79])\\d|8[0-57-9])\\d{7}|[1-579]\\d{10}|8[0-57-9]\\d{8,9}|[1-79]\\d{9}|[1-9]\\d{7}|[12]\\d{6}",,,,,,, [7, 8, 9, 10, 11, 12], [5, 6]], [,, "21(?:100\\d{2}|95\\d{3,4}|\\d{8,10})|(?:10|2[02-57-9]|3(?:11|7[179])|4(?:[15]1|3[1-35])|5(?:1\\d|2[37]|3[12]|51|7[13-79]|9[15])|7(?:31|5[457]|6[09]|91)|8(?:[57]1|98))(?:100\\d{2}|95\\d{3,4}|\\d{8})|(?:3(?:1[02-9]|35|49|5\\d|7[02-68]|9[1-68])|4(?:1[02-9]|2[179]|3[3-9]|5[2-9]|6[4789]|7\\d|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[17]\\d|2[248]|3[04-9]|4[3-6]|5[0-4689]|6[2368]|9[02-9])|8(?:078|1[236-8]|2[5-7]|3\\d|5[1-9]|7[02-9]|8[3678]|9[1-7])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100\\d{2}|95\\d{3,4}|\\d{7})",,,, "1012345678",,,, [5, 6]], [,, "1(?:[38]\\d{3}|4[57]\\d{2}|5[0-35-9]\\d{2}|6[25-7]\\d{2}|7(?:[0-35-8]\\d{2}|40[0-5])|9[189]\\d{2})\\d{6}",,,, "13123456789",,, [11]], [,, "(?:10)?800\\d{7}",,,, "8001234567",,, [10, 12]], [,, "16[08]\\d{5}",,,, "16812345",,, [8]], [,, "400\\d{7}|950\\d{7,8}|(?:10|2[0-57-9]|3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[4789]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[3678]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))96\\d{3,4}",,,, "4001234567",,, [7, 8, 9, 10, 11], [5, 6]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CN", 86, "(?:1(?:[12]\\d{3}|79\\d{2}|9[0-7]\\d{2}))?00", "0",,, "0|(1(?:[12]\\d{3}|79\\d{2}|9[0-7]\\d{2}))",, "00",, [[, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[48]00"]], [, "(\\d{5,6})", "$1", ["100|95"]], [, "(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2\\d)[19]", "(?:10|2\\d)(?:10|9[56])", "(?:10|2\\d)(?:100|9[56])"], "0$1", "$CC $1"], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["[3-9]", "[3-9]\\d\\d[19]", "[3-9]\\d\\d(?:10|9[56])"], "0$1", "$CC $1"], [, "(\\d{3,4})(\\d{4})", "$1 $2", ["[2-9]"]], [, "(\\d{2})(\\d{4})(\\d{4,6})", "$1 $2 $3", ["21"], "0$1", "$CC $1", 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10[1-9]|2[02-9]", "10[1-9]|2[02-9]", "10(?:[1-79]|8(?:0[1-9]|[1-9]))|2[02-9]"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:1[02-9]|35|49|5|7[02-68]|9[1-68])|4(?:1[02-9]|2[179]|[35][2-9]|6[47-9]|7|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[04-9]|4[3-6]|6[2368])|8(?:1[236-8]|2[5-7]|3|5[1-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["3(?:11|7[179])|4(?:[15]1|3[1-35])|5(?:1|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[457]|6[09])|8(?:[57]1|98)"], "0$1", "$CC $1", 1], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["807", "8078"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1(?:[3-57-9]|6[25-7])"],, "$CC $1"], [, "(\\d{5})(\\d{3})(\\d{4})", "$1 $2 $3", ["108", "1080", "10800"]], [, "(\\d{3})(\\d{7,8})", "$1 $2", ["950"]]], [[, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[48]00"]], [, "(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2\\d)[19]", "(?:10|2\\d)(?:10|9[56])", "(?:10|2\\d)(?:100|9[56])"], "0$1", "$CC $1"], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["[3-9]", "[3-9]\\d\\d[19]", "[3-9]\\d\\d(?:10|9[56])"], "0$1", "$CC $1"], [, "(\\d{2})(\\d{4})(\\d{4,6})", "$1 $2 $3", ["21"], "0$1", "$CC $1", 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10[1-9]|2[02-9]", "10[1-9]|2[02-9]", "10(?:[1-79]|8(?:0[1-9]|[1-9]))|2[02-9]"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:1[02-9]|35|49|5|7[02-68]|9[1-68])|4(?:1[02-9]|2[179]|[35][2-9]|6[47-9]|7|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[04-9]|4[3-6]|6[2368])|8(?:1[236-8]|2[5-7]|3|5[1-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["3(?:11|7[179])|4(?:[15]1|3[1-35])|5(?:1|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[457]|6[09])|8(?:[57]1|98)"], "0$1", "$CC $1", 1], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["807", "8078"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1(?:[3-57-9]|6[25-7])"],, "$CC $1"], [, "(\\d{5})(\\d{3})(\\d{4})", "$1 $2 $3", ["108", "1080", "10800"]], [, "(\\d{3})(\\d{7,8})", "$1 $2", ["950"]]], [,,,,,,,,, [-1]],,, [,, "(?:4|(?:10)?8)00\\d{7}|950\\d{7,8}",,,,,,, [10, 11, 12]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CO: [, [,, "(?:1\\d|3)\\d{9}|[124-8]\\d{7}",,,,,,, [8, 10, 11], [7]], [,, "[124-8][2-9]\\d{6}",,,, "12345678",,, [8], [7]], [,, "3(?:0[0-5]|1\\d|2[0-3]|5[01])\\d{7}",,,, "3211234567",,, [10]], [,, "1800\\d{7}",,,, "18001234567",,, [11]], [,, "19(?:0[01]|4[78])\\d{7}",,,, "19001234567",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CO", 57, "00(?:4(?:[14]4|56)|[579])", "0",,, "0([3579]|4(?:[14]4|56))?",,,, [[, "(\\d)(\\d{7})", "$1 $2", ["1(?:[2-79]|8[2-9])|[25-8]|4[2-9]"], "($1)", "0$CC $1"], [, "(\\d{3})(\\d{7})", "$1 $2", ["3"],, "0$CC $1"], [, "(\\d)(\\d{3})(\\d{7})", "$1-$2-$3", ["1(?:80|9)", "1(?:800|9)"], "0$1"]], [[, "(\\d)(\\d{7})", "$1 $2", ["1(?:[2-79]|8[2-9])|[25-8]|4[2-9]"], "($1)", "0$CC $1"], [, "(\\d{3})(\\d{7})", "$1 $2", ["3"],, "0$CC $1"], [, "(\\d)(\\d{3})(\\d{7})", "$1 $2 $3", ["1(?:80|9)", "1(?:800|9)"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CR: [, [,, "(?:8\\d|90)\\d{8}|[24-8]\\d{7}",,,,,,, [8, 10]], [,, "2(?:[024-7]\\d\\d|1(?:0[7-9]|[1-9]\\d))\\d{4}",,,, "22123456",,, [8]], [,, "(?:(?:5(?:0[01]|7[0-3])|(?:7[0-3]|8[3-9])\\d)\\d\\d|6(?:[0-4]\\d{3}|500[01]))\\d{3}",,,, "83123456",,, [8]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "90[059]\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:210[0-6]|4\\d{3}|5100)\\d{4}",,,, "40001234",,, [8]], "CR", 506, "00",,,, "(19(?:0[0-2468]|1[09]|20|66|77|99))",,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[24-7]|8[3-9]"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[89]"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CU: [, [,, "[2-57]\\d{7}|[2-47]\\d{6}|[34]\\d{5}",,,,,,, [6, 7, 8], [4, 5]], [,, "(?:2[1-4]|7\\d)\\d{5,6}|(?:3[1-3]|4[1-35-8])\\d{6}|3[23]\\d{4,5}|4[12578]\\d{5}|4[78]\\d{4}",,,, "71234567",,,, [4, 5]], [,, "5\\d{7}",,,, "51234567",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CU", 53, "119", "0",,, "0",,,, [[, "(\\d{2})(\\d{4,6})", "$1 $2", ["[2-4]"], "(0$1)"], [, "(\\d)(\\d{6,7})", "$1 $2", ["7"], "(0$1)"], [, "(\\d)(\\d{7})", "$1 $2", ["5"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CV: [, [,, "[2-59]\\d{6}",,,,,,, [7]], [,, "2(?:2[1-7]|3[0-8]|4[12]|5[1256]|6\\d|7[1-3]|8[1-5])\\d{4}",,,, "2211234"], [,, "(?:[34][36]|5[1-389]|9\\d)\\d{5}",,,, "9911234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CV", 238, "0",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2-59]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CW: [, [,, "(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}",,,,,,, [7, 8]], [,, "9(?:4(?:3[0-5]|4[14]|6\\d)|50\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\d|7[01]|8[57-9]))\\d{4}",,,, "94351234"], [,, "9(?:5(?:[12467]\\d|3[01])|6[5-9]\\d)\\d{4}",,,, "95181234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "60[0-2]\\d{4}",,,, "6001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CW", 599, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[3467]"]], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["9[4-8]"]]],, [,, "955\\d{5}",,,, "95581234",,, [8]], 1, "[69]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CX: [, [,, "1\\d{5,9}|(?:[48]\\d\\d|550)\\d{6}",,,,,,, [6, 7, 8, 9, 10]], [,, "8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}",,,, "891641234",,, [9], [8]], [,, "4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[6-9]|7[02-9]|8[0-2457-9]|9[017-9])\\d{6}",,,, "412345678",,, [9]], [,, "180(?:0\\d{3}|2)\\d{3}",,,, "1800123456",,, [7, 10]], [,, "190[0-26]\\d{6}",,,, "1900123456",,, [10]], [,, "13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}",,,, "1300123456",,, [6, 8, 10]], [,,,,,,,,, [-1]], [,, "(?:14(?:5\\d|71)|550\\d)\\d{5}",,,, "550123456",,, [9]], "CX", 61, "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "0",,, "0|([59]\\d{7})$", "8$1", "0011",,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    CY: [, [,, "(?:[279]\\d|[58]0)\\d{6}",,,,,,, [8]], [,, "2[2-6]\\d{6}",,,, "22345678"], [,, "9[4-79]\\d{6}",,,, "96123456"], [,, "800\\d{5}",,,, "80001234"], [,, "90[09]\\d{5}",,,, "90012345"], [,, "80[1-9]\\d{5}",,,, "80112345"], [,, "700\\d{5}",,,, "70012345"], [,,,,,,,,, [-1]], "CY", 357, "00",,,,,,,, [[, "(\\d{2})(\\d{6})", "$1 $2", ["[257-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:50|77)\\d{6}",,,, "77123456"],,, [,,,,,,,,, [-1]]],
    CZ: [, [,, "(?:[2-578]\\d|60|9\\d{1,4})\\d{7}",,,,,,, [9, 10, 11, 12]], [,, "(?:2\\d|3[1257-9]|4[16-9]|5[13-9])\\d{7}",,,, "212345678",,, [9]], [,, "(?:60[1-8]|7(?:0[2-5]|[2379]\\d))\\d{6}",,,, "601123456",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "9(?:0[05689]|76)\\d{6}",,,, "900123456",,, [9]], [,, "8[134]\\d{7}",,,, "811234567",,, [9]], [,, "70[01]\\d{6}",,,, "700123456",,, [9]], [,, "9[17]0\\d{6}",,,, "910123456",,, [9]], "CZ", 420, "00",,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]|9[015-7]"]], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "9(?:5\\d|7[2-4])\\d{6}",,,, "972123456",,, [9]],,, [,, "9(?:3\\d{9}|6\\d{7,10})",,,, "93123456789"]],
    DE: [, [,, "(?:1|[235-9]\\d{11}|4(?:[0-8]\\d{2,10}|9(?:[05]\\d{7}|[46][1-8]\\d{2,6})))\\d{3}|[1-35-9]\\d{6,13}|49(?:(?:[0-25]\\d|3[1-689])\\d{4,8}|4[1-8]\\d{4}|6[0-8]\\d{3,4}|7[1-7]\\d{5,8})|497[0-7]\\d{4}|49(?:[0-2579]\\d|[34][1-9])\\d{3}|[1-9]\\d{5}|[13468]\\d{4}",,,,,,, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [3]], [,, "(?:2(?:0[1-689]|[1-3569]\\d|4[0-8]|7[1-7]|8[0-7])|5(?:0[2-8]|[124-6]\\d|[38][0-8]|[79][0-7])|6(?:0[02-9]|[1-3589]\\d|[47][0-8]|6[1-9])|7(?:0[2-8]|1[1-9]|[27][0-7]|3\\d|[4-6][0-8]|8[0-5]|9[013-7])|8(?:0[2-9]|1[0-79]|[29]\\d|3[0-46-9]|4[0-6]|5[013-9]|6[1-8]|7[0-8]|8[0-24-6])|9(?:0[6-9]|[1-4]\\d|[589][0-7]|6[0-8]|7[0-467]))\\d{4,12}|3(?:(?:[03569]\\d|4[0-79]|7[1-7]|8[1-8])\\d{4,12}|2\\d{9})|4(?:(?:[02-48]\\d|1[02-9]|5[0-6]|6[0-8]|7[0-79])\\d{4,12}|9(?:[0-37]\\d{4,9}|[4-6]\\d{4,10}))|(?:2(?:0[1-389]|1[124]|2[18]|3[14]|[4-9]1)|3(?:0\\d?|[35-9][15]|4[015])|4(?:0\\d?|[2-9]1)|[57][1-9]1|[68](?:[1-8]1|9\\d?)|9(?:06|[1-9]1))\\d{3}",,,, "30123456",,, [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [3, 4]], [,, "1(?:5[0-25-9]\\d{8}|(?:6[023]|7\\d)\\d{7,8})",,,, "15123456789",,, [10, 11]], [,, "800\\d{7,12}",,,, "8001234567890",,, [10, 11, 12, 13, 14, 15]], [,, "(?:137[7-9]|900(?:[135]|9\\d))\\d{6}",,,, "9001234567",,, [10, 11]], [,, "1(?:3(?:7[1-6]\\d\\d|8)|80\\d{1,7})\\d{4}",,,, "18012345",,, [7, 8, 9, 10, 11, 12, 13, 14]], [,, "700\\d{8}",,,, "70012345678",,, [11]], [,,,,,,,,, [-1]], "DE", 49, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3,13})", "$1 $2", ["3[02]|40|[68]9"], "0$1"], [, "(\\d{3})(\\d{3,12})", "$1 $2", ["2(?:0[1-389]|1[124]|2[18]|3[14]|[4-9]1)|3(?:[35-9][15]|4[015])|(?:4[2-9]|[57][1-9]|[68][1-8])1|9(?:06|[1-9]1)", "2(?:0[1-389]|1(?:[14]|2[0-8])|2[18]|3[14]|[4-9]1)|3(?:[35-9][15]|4[015])|(?:4[2-9]|[57][1-9]|[68][1-8])1|9(?:06|[1-9]1)"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["138"], "0$1"], [, "(\\d{4})(\\d{3,11})", "$1 $2", ["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|7(?:0[2-8]|[1-9])|8(?:0[2-9]|[1-8])|9(?:0[7-9]|[1-9])", "[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|[46][1246]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|3[1357]|4[13578]|6[1246]|7[1356]|9[1346])|5(?:0[14]|2[1-3589]|3[1357]|[49][1246]|6[1-4]|7[13468]|8[13568])|6(?:0[1356]|2[1-489]|3[124-6]|4[1347]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|3[1357]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|4[1347]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|3[1357]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|7(?:0[2-8]|[1-9])|8(?:0[2-9]|[1-8])|9(?:0[7-9]|[1-9])"], "0$1"], [, "(\\d{3})(\\d{5,11})", "$1 $2", ["181"], "0$1"], [, "(\\d{3})(\\d)(\\d{4,10})", "$1 $2 $3", ["1(?:3|80)|9"], "0$1"], [, "(\\d{5})(\\d{3,10})", "$1 $2", ["3"], "0$1"], [, "(\\d{3})(\\d{7,8})", "$1 $2", ["1[67]"], "0$1"], [, "(\\d{3})(\\d{7,12})", "$1 $2", ["8"], "0$1"], [, "(\\d{5})(\\d{6})", "$1 $2", ["185", "1850", "18500"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], [, "(\\d{4})(\\d{7})", "$1 $2", ["18[68]"], "0$1"], [, "(\\d{5})(\\d{6})", "$1 $2", ["15[0568]"], "0$1"], [, "(\\d{4})(\\d{7})", "$1 $2", ["15[1279]"], "0$1"], [, "(\\d{3})(\\d{8})", "$1 $2", ["18"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{7,8})", "$1 $2 $3", ["1(?:6[023]|7)"], "0$1"], [, "(\\d{4})(\\d{2})(\\d{7})", "$1 $2 $3", ["15[279]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{8})", "$1 $2 $3", ["15"], "0$1"]],, [,, "16(?:4\\d{1,10}|[89]\\d{1,11})",,,, "16412345",,, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]],,, [,,,,,,,,, [-1]], [,, "18(?:1\\d{5,11}|[2-9]\\d{8})",,,, "18500123456",,, [8, 9, 10, 11, 12, 13, 14]],,, [,, "1(?:5(?:(?:[03-68]00|113)\\d|2\\d55|7\\d99|9\\d33)|(?:6(?:013|255|399)|7(?:(?:[015]1|[69]3)3|[2-4]55|[78]99))\\d?)\\d{7}",,,, "177991234567",,, [12, 13]]],
    DJ: [, [,, "(?:2\\d|77)\\d{6}",,,,,,, [8]], [,, "2(?:1[2-5]|7[45])\\d{5}",,,, "21360003"], [,, "77\\d{6}",,,, "77831001"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "DJ", 253, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[27]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    DK: [, [,, "[2-9]\\d{7}",,,,,,, [8]], [,, "(?:[2-7]\\d|8[126-9]|9[1-36-9])\\d{6}",,,, "32123456"], [,, "(?:[2-7]\\d|8[126-9]|9[1-36-9])\\d{6}",,,, "32123456"], [,, "80\\d{6}",,,, "80123456"], [,, "90\\d{6}",,,, "90123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "DK", 45, "00",,,,,,, 1, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    DM: [, [,, "(?:[58]\\d\\d|767|900)\\d{7}",,,,,,, [10], [7]], [,, "767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4]|70[1-3])\\d{4}",,,, "7674201234",,,, [7]], [,, "767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-7])\\d{4}",,,, "7672251234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "DM", 1, "011", "1",,, "1|([2-7]\\d{6})$", "767$1",,,,, [,,,,,,,,, [-1]],, "767", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    DO: [, [,, "(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "8(?:[04]9[2-9]\\d\\d|29(?:2(?:[0-59]\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\d|4[7-9])|[45]\\d\\d|6(?:[0-27-9]\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\d{4}",,,, "8092345678",,,, [7]], [,, "8[024]9[2-9]\\d{6}",,,, "8092345678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "DO", 1, "011", "1",,, "1",,,,,, [,,,,,,,,, [-1]],, "8[024]9", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    DZ: [, [,, "(?:[1-4]|[5-79]\\d|80)\\d{7}",,,,,,, [8, 9]], [,, "(?:(?:1\\d|2[013-79]|3[0-8]|4[0135689])\\d|9619)\\d{5}",,,, "12345678"], [,, "(?:(?:5[4-6]|7[7-9])\\d|6(?:[569]\\d|7[0-6]))\\d{6}",,,, "551234567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "80[3-689]1\\d{5}",,,, "808123456",,, [9]], [,, "80[12]1\\d{5}",,,, "801123456",,, [9]], [,,,,,,,,, [-1]], [,, "98[23]\\d{6}",,,, "983123456",,, [9]], "DZ", 213, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-4]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-8]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    EC: [, [,, "1800\\d{6,7}|(?:[2-7]|9\\d)\\d{7}",,,,,,, [8, 9, 10, 11], [7]], [,, "[2-7][2-7]\\d{6}",,,, "22123456",,, [8], [7]], [,, "9(?:(?:39|[57][89]|[89]\\d)\\d|6(?:[0-27-9]\\d|30))\\d{5}",,,, "991234567",,, [9]], [,, "1800\\d{6,7}",,,, "18001234567",,, [10, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "[2-7]890\\d{4}",,,, "28901234",,, [8]], "EC", 593, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-7]"]], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2-$3", ["[2-7]"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], [[, "(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-7]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    EE: [, [,, "8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d\\d|900)\\d{4}",,,,,,, [7, 8, 10]], [,, "(?:3[23589]|4[3-8]|6\\d|7[1-9]|88)\\d{5}",,,, "3212345",,, [7]], [,, "(?:5\\d|8[1-4])\\d{6}|5(?:(?:[02]\\d|5[0-478])\\d|1(?:[0-8]\\d|95)|6(?:4[0-4]|5[1-589]))\\d{3}",,,, "51234567",,, [7, 8]], [,, "800(?:(?:0\\d\\d|1)\\d|[2-9])\\d{3}",,,, "80012345"], [,, "(?:40\\d\\d|900)\\d{4}",,,, "9001234",,, [7, 8]], [,,,,,,,,, [-1]], [,, "70[0-2]\\d{5}",,,, "70012345",,, [8]], [,,,,,,,,, [-1]], "EE", 372, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]", "[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]"]], [, "(\\d{4})(\\d{3,4})", "$1 $2", ["[45]|8(?:00|[1-4])", "[45]|8(?:00[1-9]|[1-4])"]], [, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["7"]], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["80"]]],, [,,,,,,,,, [-1]],,, [,, "800[2-9]\\d{3}",,,,,,, [7]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    EG: [, [,, "(?:[189]\\d?|[24-6])\\d{8}|[135]\\d{7}",,,,,,, [8, 9, 10], [6, 7]], [,, "1(?:3[23]\\d{6}|5\\d{6,7})|(?:(?:2[2-4]|3)\\d|4(?:0[2-5]|[578][23]|64)|6[24-689]3|8(?:2[2-57]|4[26]|6[237]|8[2-4])|9(?:2[27]|3[24]|52|6[2356]|7[2-4]))\\d{6}|5(?:(?:0[2-7]|5\\d)\\d{6}|7[23]\\d{5,6})",,,, "234567890",,, [8, 9], [6, 7]], [,, "1[0-25]\\d{8}",,,, "1001234567",,, [10]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "900\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "EG", 20, "00", "0",,, "0",,,, [[, "(\\d)(\\d{7,8})", "$1 $2", ["[23]"], "0$1"], [, "(\\d{2})(\\d{6,7})", "$1 $2", ["1[35]|[4-6]|8[2468]|9[235-7]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[189]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    EH: [, [,, "[5-8]\\d{8}",,,,,,, [9]], [,, "528[89]\\d{5}",,,, "528812345"], [,, "(?:6(?:[0-79]\\d|8[0-247-9])|7(?:0[067]|6[1267]|7[017]))\\d{6}",,,, "650123456"], [,, "80\\d{7}",,,, "801234567"], [,, "89\\d{7}",,,, "891234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5924[01]\\d{4}",,,, "592401234"], "EH", 212, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],, "528[89]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    ER: [, [,, "[178]\\d{6}",,,,,,, [7], [6]], [,, "(?:1(?:1[12568]|[24]0|55|6[146])|8\\d\\d)\\d{4}",,,, "8370362",,,, [6]], [,, "(?:17[1-3]|7\\d\\d)\\d{4}",,,, "7123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ER", 291, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[178]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    ES: [, [,, "(?:51|[6-9]\\d)\\d{7}",,,,,,, [9]], [,, "(?:8(?:[1356]\\d|[28][0-8]|[47][1-9])\\d{4}|9(?:(?:(?:[135]\\d|[28][0-8]|4[1-9])\\d\\d|7(?:[124-9]\\d\\d|3(?:[0-8]\\d|9[1-9])))\\d\\d|6(?:[0-8]\\d{4}|9(?:0(?:[0-57-9]\\d\\d|6(?:0[0-8]|1[1-9]|[2-9]\\d))|[1-9]\\d{3}))))\\d\\d",,,, "810123456"], [,, "(?:(?:6\\d|7[1-48])\\d{5}|9(?:6906(?:09|10)|7390\\d\\d))\\d\\d",,,, "612345678"], [,, "[89]00\\d{6}",,,, "800123456"], [,, "80[367]\\d{6}",,,, "803123456"], [,, "90[12]\\d{6}",,,, "901123456"], [,, "70\\d{7}",,,, "701234567"], [,,,,,,,,, [-1]], "ES", 34, "00",,,,,,,, [[, "(\\d{4})", "$1", ["905"]], [, "(\\d{6})", "$1", ["[79]9"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]], [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "51\\d{7}",,,, "511234567"],,, [,,,,,,,,, [-1]]],
    ET: [, [,, "(?:11|[2-59]\\d)\\d{7}",,,,,,, [9], [7]], [,, "(?:11(?:1(?:1[124]|2[2-57]|3[1-5]|5[5-8]|8[6-8])|2(?:13|3[6-8]|5[89]|7[05-9]|8[2-6])|3(?:2[01]|3[0-289]|4[1289]|7[1-4]|87)|4(?:1[69]|3[2-49]|4[0-3]|6[5-8])|5(?:1[578]|44|5[0-4])|6(?:18|2[69]|39|4[5-7]|5[1-5]|6[0-59]|8[015-8]))|2(?:2(?:11[1-9]|22[0-7]|33\\d|44[1467]|66[1-68])|5(?:11[124-6]|33[2-8]|44[1467]|55[14]|66[1-3679]|77[124-79]|880))|3(?:3(?:11[0-46-8]|(?:22|55)[0-6]|33[0134689]|44[04]|66[01467])|4(?:44[0-8]|55[0-69]|66[0-3]|77[1-5]))|4(?:6(?:22[0-24-7]|33[1-5]|44[13-69]|55[14-689]|660|88[1-4])|7(?:(?:11|22)[1-9]|33[13-7]|44[13-6]|55[1-689]))|5(?:7(?:227|55[05]|(?:66|77)[14-8])|8(?:11[149]|22[013-79]|33[0-68]|44[013-8]|550|66[1-5]|77\\d)))\\d{4}",,,, "111112345",,,, [7]], [,, "9\\d{8}",,,, "911234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ET", 251, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-59]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    FI: [, [,, "(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}|[1-35689]\\d{4}",,,,,,, [5, 6, 7, 8, 9, 10]], [,, "(?:1[3-79][1-8]|[235689][1-8]\\d)\\d{2,6}",,,, "131234567",,, [5, 6, 7, 8, 9]], [,, "(?:4[0-8]|50)\\d{4,8}",,,, "412345678",,, [6, 7, 8, 9, 10]], [,, "800\\d{4,6}",,,, "800123456",,, [7, 8, 9]], [,, "[67]00\\d{5,6}",,,, "600123456",,, [8, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FI", 358, "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "0",,, "0",, "00",, [[, "(\\d{5})", "$1", ["75[12]"], "0$1"], [, "(\\d)(\\d{4,9})", "$1 $2", ["[2568][1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"], [, "(\\d{6})", "$1", ["11"]], [, "(\\d{3})(\\d{3,7})", "$1 $2", ["(?:[12]0|7)0|[368]"], "0$1"], [, "(\\d{2})(\\d{4,8})", "$1 $2", ["[12457]"], "0$1"]], [[, "(\\d)(\\d{4,9})", "$1 $2", ["[2568][1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"], [, "(\\d{3})(\\d{3,7})", "$1 $2", ["(?:[12]0|7)0|[368]"], "0$1"], [, "(\\d{2})(\\d{4,8})", "$1 $2", ["[12457]"], "0$1"]], [,,,,,,,,, [-1]], 1, "1[03-79]|[2-9]", [,, "[13]00\\d{3,7}|20(?:0\\d{3,7}|(?:2[023]|9[89])\\d{1,6})|60(?:[12]\\d{5,6}|6\\d{7})|7(?:(?:1|3\\d)\\d{7}|5[03-9]\\d{3,7})"], [,, "(?:10|[23][09])\\d{4,8}|60(?:[12]\\d{5,6}|6\\d{7})|7(?:(?:1|3\\d)\\d{7}|5[03-9]\\d{3,7})|20[2-59]\\d\\d",,,, "10112345"],,, [,,,,,,,,, [-1]]],
    FJ: [, [,, "(?:(?:0800\\d|[235-9])\\d|45)\\d{5}",,,,,,, [7, 11]], [,, "(?:(?:3[0-5]|8[58])\\d|6(?:03|[25-7]\\d))\\d{4}",,,, "3212345",,, [7]], [,, "(?:[279]\\d|45|5[01568]|8[034679])\\d{5}",,,, "7012345",,, [7]], [,, "0800\\d{7}",,,, "08001234567",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FJ", 679, "0(?:0|52)",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[235-9]|45"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    FK: [, [,, "[2-7]\\d{4}",,,,,,, [5]], [,, "[2-47]\\d{4}",,,, "31234"], [,, "[56]\\d{4}",,,, "51234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FK", 500, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    FM: [, [,, "[39]\\d{6}",,,,,,, [7]], [,, "(?:3[2357]0[1-9]|9[2-6]\\d\\d)\\d{3}",,,, "3201234"], [,, "(?:3[2357]0[1-9]|9[2-7]\\d\\d)\\d{3}",,,, "3501234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FM", 691, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[39]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    FO: [, [,, "(?:[2-8]\\d|90)\\d{4}",,,,,,, [6]], [,, "(?:20|[34]\\d|8[19])\\d{4}",,,, "201234"], [,, "(?:[27][1-9]|5\\d)\\d{4}",,,, "211234"], [,, "80[257-9]\\d{3}",,,, "802123"], [,, "90(?:[13-5][15-7]|2[125-7]|99)\\d\\d",,,, "901123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:6[0-36]|88)\\d{4}",,,, "601234"], "FO", 298, "00",,,, "(10(?:01|[12]0|88))",,,, [[, "(\\d{6})", "$1", ["[2-9]"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    FR: [, [,, "[1-9]\\d{8}",,,,,,, [9]], [,, "[1-5]\\d{8}",,,, "123456789"], [,, "(?:6\\d\\d|7(?:00|[3-9]\\d))\\d{6}",,,, "612345678"], [,, "80[0-5]\\d{6}",,,, "801234567"], [,, "8[129]\\d{7}",,,, "891123456"], [,, "884\\d{6}",,,, "884012345"], [,,,,,,,,, [-1]], [,, "9\\d{8}",,,, "912345678"], "FR", 33, "00", "0",,, "0",,,, [[, "(\\d{4})", "$1", ["10"]], [, "(\\d{3})(\\d{3})", "$1 $2", ["1"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "80[6-9]\\d{6}",,,, "806123456"],,, [,,,,,,,,, [-1]]],
    GA: [, [,, "(?:0\\d|[2-7])\\d{6}",,,,,,, [7, 8]], [,, "01\\d{6}",,,, "01441234",,, [8]], [,, "(?:0[2-7]|[2-7])\\d{6}",,,, "06031234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GA", 241, "00",,,,,,,, [[, "(\\d)(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-7]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GB: [, [,, "[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}",,,,,,, [7, 9, 10], [4, 5, 6, 8]], [,, "(?:1(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|2(?:0[024-9]|1[0-7]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)|3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))|2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d)\\d{6}|1(?:(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d|7(?:(?:26(?:6[13-9]|7[0-7])|442\\d|50(?:2[0-3]|[3-68]2|76))\\d|6888[2-46-8]))\\d\\d",,,, "1212345678",,, [9, 10], [4, 5, 6, 7, 8]], [,, "7(?:(?:[1-3]\\d\\d|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|8(?:[014-9]\\d|[23][0-8]))\\d|4(?:[0-46-9]\\d\\d|5(?:[0-689]\\d|7[0-57-9]))|7(?:0(?:0[01]|[1-9]\\d)|(?:[1-7]\\d|8[02-9]|9[0-689])\\d)|9(?:(?:[024-9]\\d|3[0-689])\\d|1(?:[02-9]\\d|1[028])))\\d{5}",,,, "7400123456",,, [10]], [,, "80[08]\\d{7}|800\\d{6}|8001111",,,, "8001234567"], [,, "(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d",,,, "9012345678",,, [7, 10]], [,,,,,,,,, [-1]], [,, "70\\d{8}",,,, "7012345678",,, [10]], [,, "56\\d{8}",,,, "5612345678",,, [10]], "GB", 44, "00", "0", " x",, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["800", "8001", "80011", "800111", "8001111"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["845", "8454", "84546", "845464"], "0$1"], [, "(\\d{3})(\\d{6})", "$1 $2", ["800"], "0$1"], [, "(\\d{5})(\\d{4,5})", "$1 $2", ["1(?:38|5[23]|69|76|94)", "1(?:(?:38|69)7|5(?:24|39)|768|946)", "1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"], "0$1"], [, "(\\d{4})(\\d{5,6})", "$1 $2", ["1(?:[2-69][02-9]|[78])"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[25]|7(?:0|6[024-9])", "[25]|7(?:0|6(?:[04-9]|2[356]))"], "0$1"], [, "(\\d{4})(\\d{6})", "$1 $2", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1389]"], "0$1"]],, [,, "76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\d{6}",,,, "7640123456",,, [10]], 1,, [,,,,,,,,, [-1]], [,, "(?:3[0347]|55)\\d{8}",,,, "5512345678",,, [10]],,, [,,,,,,,,, [-1]]],
    GD: [, [,, "(?:473|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-49]|5[5-79]|73|90)|63[68]|7(?:58|84)|800|938)\\d{4}",,,, "4732691234",,,, [7]], [,, "473(?:4(?:0[2-79]|1[04-9]|2[0-5]|58)|5(?:2[01]|3[3-8])|901)\\d{4}",,,, "4734031234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "GD", 1, "011", "1",,, "1|([2-9]\\d{6})$", "473$1",,,,, [,,,,,,,,, [-1]],, "473", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GE: [, [,, "(?:[3-57]\\d\\d|800)\\d{6}",,,,,,, [9], [6]], [,, "(?:3(?:[256]\\d|4[124-9]|7[0-4])|4(?:1\\d|2[2-7]|3[1-79]|4[2-8]|7[239]|9[1-7]))\\d{6}",,,, "322123456",,,, [6]], [,, "(?:5(?:[14]4|5[0157-9]|68|7[0147-9]|9[1-35-9])|790)\\d{6}",,,, "555123456"], [,, "800\\d{6}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "706\\d{6}",,,, "706123456"], "GE", 995, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[57]"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[348]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "706\\d{6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GF: [, [,, "[56]94\\d{6}",,,,,,, [9]], [,, "594(?:[023]\\d|1[01]|4[03-9]|5[6-9]|6[0-3]|80|9[014])\\d{4}",,,, "594101234"], [,, "694(?:[0-249]\\d|3[0-48])\\d{4}",,,, "694201234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GF", 594, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[56]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GG: [, [,, "(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?",,,,,,, [7, 9, 10], [6]], [,, "1481[25-9]\\d{5}",,,, "1481256789",,, [10], [6]], [,, "7(?:(?:781|839)\\d|911[17])\\d{5}",,,, "7781123456",,, [10]], [,, "80[08]\\d{7}|800\\d{6}|8001111",,,, "8001234567"], [,, "(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d",,,, "9012345678",,, [7, 10]], [,,,,,,,,, [-1]], [,, "70\\d{8}",,,, "7012345678",,, [10]], [,, "56\\d{8}",,,, "5612345678",,, [10]], "GG", 44, "00", "0",,, "0|([25-9]\\d{5})$", "1481$1",,,,, [,, "76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\d{6}",,,, "7640123456",,, [10]],,, [,,,,,,,,, [-1]], [,, "(?:3[0347]|55)\\d{8}",,,, "5512345678",,, [10]],,, [,,,,,,,,, [-1]]],
    GH: [, [,, "(?:[235]\\d{3}|800)\\d{5}",,,,,,, [8, 9], [7]], [,, "3(?:0(?:[237]\\d|80)|[167](?:2[0-6]|7\\d|80)|2(?:2[0-5]|7\\d|80)|3(?:2[0-3]|7\\d|80)|4(?:2[013-9]|3[01]|7\\d|80)|5(?:2[0-7]|7\\d|80)|8(?:2[0-2]|7\\d|80)|9(?:[28]0|7\\d))\\d{5}",,,, "302345678",,, [9], [7]], [,, "(?:2[0346-8]\\d|5(?:[0457]\\d|6[01]))\\d{6}",,,, "231234567",,, [9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GH", 233, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[237]|80"]], [, "(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], [[, "(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], [,,,,,,,,, [-1]],,, [,, "800\\d{5}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GI: [, [,, "(?:[25]\\d\\d|629)\\d{5}",,,,,,, [8]], [,, "2(?:(?:00\\d|2(?:2[2457]|50))\\d|1(?:6[24-7]\\d|90[0-2]))\\d{3}",,,, "20012345"], [,, "(?:5[46-8]\\d|629)\\d{5}",,,, "57123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GI", 350, "00",,,,,,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["2"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GL: [, [,, "(?:19|[2-689]\\d)\\d{4}",,,,,,, [6]], [,, "(?:19|3[1-7]|6[14689]|8[14-79]|9\\d)\\d{4}",,,, "321000"], [,, "(?:[25][1-9]|4[2-9])\\d{4}",,,, "221234"], [,, "80\\d{4}",,,, "801234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3[89]\\d{4}",,,, "381234"], "GL", 299, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["19|[2-689]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GM: [, [,, "[2-9]\\d{6}",,,,,,, [7]], [,, "(?:4(?:[23]\\d\\d|4(?:1[024679]|[6-9]\\d))|5(?:54[0-7]|6[67]\\d|7(?:1[04]|2[035]|3[58]|48))|8\\d{3})\\d{3}",,,, "5661234"], [,, "(?:[23679]\\d|5[01])\\d{5}",,,, "3012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GM", 220, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GN: [, [,, "(?:30|6\\d\\d|722)\\d{6}",,,,,,, [8, 9]], [,, "30(?:24|3[12]|4[1-35-7]|5[13]|6[189]|[78]1|9[1478])\\d{4}",,,, "30241234",,, [8]], [,, "6[02356]\\d{7}",,,, "601123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "722\\d{6}",,,, "722123456",,, [9]], "GN", 224, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["3"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[67]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GP: [, [,, "(?:590|69\\d)\\d{6}",,,,,,, [9]], [,, "590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\d)\\d{4}",,,, "590201234"], [,, "69(?:0\\d\\d|1(?:2[29]|3[0-5]))\\d{4}",,,, "690001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GP", 590, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[56]"], "0$1"]],, [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GQ: [, [,, "(?:222|(?:3\\d|55|[89]0)\\d)\\d{6}",,,,,,, [9]], [,, "3(?:3(?:[0-24-9]\\d[46]|3\\d[7-9])|5\\d\\d[7-9])\\d{4}",,,, "333091234"], [,, "(?:222|55[015])\\d{6}",,,, "222123456"], [,, "80\\d[1-9]\\d{5}",,,, "800123456"], [,, "90\\d[1-9]\\d{5}",,,, "900123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GQ", 240, "00",,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235]"]], [, "(\\d{3})(\\d{6})", "$1 $2", ["[89]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GR: [, [,, "(?:[268]\\d|[79]0)\\d{8}",,,,,,, [10]], [,, "2(?:1\\d\\d|2(?:2[1-46-9]|[36][1-8]|4[1-7]|5[1-4]|7[1-5]|[89][1-9])|3(?:1\\d|2[1-57]|[35][1-3]|4[13]|7[1-7]|8[124-6]|9[1-79])|4(?:1\\d|2[1-8]|3[1-4]|4[13-5]|6[1-578]|9[1-5])|5(?:1\\d|[29][1-4]|3[1-5]|4[124]|5[1-6])|6(?:1\\d|[269][1-6]|3[1245]|4[1-7]|5[13-9]|7[14]|8[1-5])|7(?:1\\d|2[1-5]|3[1-6]|4[1-7]|5[1-57]|6[135]|9[125-7])|8(?:1\\d|2[1-5]|[34][1-4]|9[1-57]))\\d{6}",,,, "2123456789"], [,, "6(?:8[57-9]|9\\d)\\d{7}",,,, "6912345678"], [,, "800\\d{7}",,,, "8001234567"], [,, "90[19]\\d{7}",,,, "9091234567"], [,, "8(?:0[16]|12|25)\\d{7}",,,, "8011234567"], [,, "70\\d{8}",,,, "7012345678"], [,,,,,,,,, [-1]], "GR", 30, "00",,,,,,,, [[, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["21|7"]], [, "(\\d{4})(\\d{6})", "$1 $2", ["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2689]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GT: [, [,, "(?:1\\d{3}|[2-7])\\d{7}",,,,,,, [8, 11]], [,, "[267][2-9]\\d{6}",,,, "22456789",,, [8]], [,, "[3-5]\\d{7}",,,, "51234567",,, [8]], [,, "18[01]\\d{8}",,,, "18001112222",,, [11]], [,, "19\\d{9}",,,, "19001112222",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GT", 502, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2-7]"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GU: [, [,, "(?:[58]\\d\\d|671|900)\\d{7}",,,,,,, [10], [7]], [,, "671(?:3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[0236-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\d{4}",,,, "6713001234",,,, [7]], [,, "671(?:3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[0236-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\d{4}",,,, "6713001234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "GU", 1, "011", "1",,, "1|([3-9]\\d{6})$", "671$1",, 1,,, [,,,,,,,,, [-1]],, "671", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GW: [, [,, "[49]\\d{8}|4\\d{6}",,,,,,, [7, 9]], [,, "443\\d{6}",,,, "443201234",,, [9]], [,, "9(?:5\\d|6[569]|77)\\d{6}",,,, "955012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "40\\d{5}",,,, "4012345",,, [7]], "GW", 245, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["40"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    GY: [, [,, "(?:(?:(?:[2-46]\\d|77)\\d|862)\\d|9008)\\d{3}",,,,,,, [7]], [,, "(?:2(?:1[6-9]|2[0-35-9]|3[1-4]|5[3-9]|6\\d|7[0-24-79])|3(?:2[25-9]|3\\d)|4(?:4[0-24]|5[56])|77[1-57])\\d{4}",,,, "2201234"], [,, "6\\d{6}",,,, "6091234"], [,, "(?:289|862)\\d{4}",,,, "2891234"], [,, "9008\\d{3}",,,, "9008123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GY", 592, "001",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-46-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    HK: [, [,, "8[0-46-9]\\d{6,7}|9\\d{4}(?:\\d(?:\\d(?:\\d{4})?)?)?|(?:[235-79]\\d|46)\\d{6}",,,,,,, [5, 6, 7, 8, 9, 11]], [,, "(?:2(?:[13-8]\\d|2[013-9]|9[0-24-9])\\d|3(?:(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69])\\d|8(?:4[04]|9\\d))|58(?:0[1-8]|1[2-9]))\\d{4}",,,, "21234567",,, [8]], [,, "(?:46(?:0[0-6]|1[0-2]|4[0-57-9])|5(?:(?:[1-59][0-46-9]|6[0-4689])\\d|7(?:[0-2469]\\d|30))|6(?:(?:0[1-9]|[13-59]\\d|[68][0-57-9]|7[0-79])\\d|2(?:[0-57-9]\\d|6[01]))|707[1-5]|848[01]|9(?:(?:0[1-9]|1[02-9]|[358][0-8]|[467]\\d)\\d|2(?:[0-8]\\d|9[03-9])))\\d{4}",,,, "51234567",,, [8]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "900(?:[0-24-9]\\d{7}|3\\d{1,4})",,,, "90012345678",,, [5, 6, 7, 8, 11]], [,,,,,,,,, [-1]], [,, "8(?:1[0-4679]\\d|2(?:[0-36]\\d|7[0-4])|3(?:[034]\\d|2[09]|70))\\d{4}",,,, "81123456",,, [8]], [,,,,,,,,, [-1]], "HK", 852, "00(?:30|5[09]|[126-9]?)",,,,,, "00",, [[, "(\\d{3})(\\d{2,5})", "$1 $2", ["900", "9003"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]],, [,, "7(?:1(?:0[0-38]|1[0-3679]|3[013]|69|9[136])|2(?:[02389]\\d|1[18]|7[27-9])|3(?:[0-38]\\d|7[0-369]|9[2357-9])|47\\d|5(?:[178]\\d|5[0-5])|6(?:0[0-7]|2[236-9]|[35]\\d)|7(?:[27]\\d|8[7-9])|8(?:[23689]\\d|7[1-9])|9(?:[025]\\d|6[0-246-8]|7[0-36-9]|8[238]))\\d{4}",,,, "71123456",,, [8]],,, [,,,,,,,,, [-1]], [,, "30(?:0[1-9]|[15-7]\\d|2[047]|89)\\d{4}",,,, "30161234",,, [8]],,, [,,,,,,,,, [-1]]],
    HN: [, [,, "[237-9]\\d{7}",,,,,,, [8]], [,, "2(?:2(?:0[019]|1[1-36]|[23]\\d|4[04-6]|5[57]|6[24]|7[0135689]|8[01346-9]|9[0-2])|4(?:07|2[3-59]|3[13-689]|4[0-68]|5[1-35])|5(?:08|16|4[03-5]|5\\d|6[4-6]|74|80)|6(?:[056]\\d|17|3[04]|4[0-378]|[78][0-8]|9[01])|7(?:6[46-9]|7[02-9]|8[034])|8(?:79|8[0-357-9]|9[1-57-9]))\\d{4}",,,, "22123456"], [,, "[37-9]\\d{7}",,,, "91234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "HN", 504, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1-$2", ["[237-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    HR: [, [,, "(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}",,,,,,, [6, 7, 8, 9]], [,, "1\\d{7}|(?:2[0-3]|3[1-5]|4[02-47-9]|5[1-3])\\d{6,7}",,,, "12345678",,, [8, 9], [6, 7]], [,, "9(?:(?:01|[12589]\\d)\\d|7(?:[0679]\\d|51))\\d{5}|98\\d{6}",,,, "921234567",,, [8, 9]], [,, "80[01]\\d{4,6}",,,, "800123456",,, [7, 8, 9]], [,, "6[01459]\\d{6}|6[01]\\d{4,5}",,,, "611234",,, [6, 7, 8]], [,,,,,,,,, [-1]], [,, "7[45]\\d{6}",,,, "74123456",,, [8]], [,,,,,,,,, [-1]], "HR", 385, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["6[01]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["8"], "0$1"], [, "(\\d)(\\d{4})(\\d{3})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[67]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-5]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:62\\d?|72)\\d{6}",,,, "62123456",,, [8, 9]],,, [,,,,,,,,, [-1]]],
    HT: [, [,, "[2-489]\\d{7}",,,,,,, [8]], [,, "2(?:2\\d|5[1-5]|81|9[149])\\d{5}",,,, "22453300"], [,, "[34]\\d{7}",,,, "34101234"], [,, "8\\d{7}",,,, "80012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:[67][0-4]|8[0-3589]|9\\d)\\d{5}",,,, "98901234"], "HT", 509, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[2-489]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    HU: [, [,, "[2357]\\d{8}|[1-9]\\d{7}",,,,,,, [8, 9], [6, 7]], [,, "(?:1\\d|[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6[23689]|8[2-57-9]|9[2-69])\\d{6}",,,, "12345678",,, [8], [6, 7]], [,, "(?:[257]0|3[01])\\d{7}",,,, "201234567",,, [9]], [,, "[48]0\\d{6}",,,, "80123456",,, [8]], [,, "9[01]\\d{6}",,,, "90123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "21\\d{7}",,,, "211234567",,, [9]], "HU", 36, "00", "06",,, "06",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "($1)"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "($1)"]],, [,,,,,,,,, [-1]],,, [,, "[48]0\\d{6}",,,,,,, [8]], [,, "38\\d{7}",,,, "381234567",,, [9]],,, [,,,,,,,,, [-1]]],
    ID: [, [,, "(?:[1-36]|8\\d{5})\\d{6}|[1-9]\\d{8,10}|[2-9]\\d{7}",,,,,,, [7, 8, 9, 10, 11, 12], [5, 6]], [,, "2(?:[124]\\d{7,8}|(?:[35][1-4]|6[0-8]|7[1-6]|8\\d|9[1-8])\\d{5,8})|(?:3(?:1|[25][1-8]|3[1-68]|4[1-3]|6[1-3568]|7[0-469]|8\\d)|4(?:0[1-589]|1[01347-9]|2[0-36-8]|3[0-24-68]|43|5[1-378]|6[1-5]|7[134]|8[1245])|5(?:1[1-35-9]|2[25-8]|3[124-9]|4[1-3589]|5[1-46]|6[1-8])|7(?:02|[125][1-9]|[36]\\d|4[1-8]|7[0-36-9])|9(?:0[12]|1[013-8]|2[0-479]|5[125-8]|6[23679]|7[159]|8[01346]))\\d{5,8}|6(?:1(?:[0-8]\\d{4,7}|9\\d{4,8})|(?:[25]\\d|3[1-69]|4[1-6])\\d{5,8})|2(?:1(?:14|500)|2\\d{3})\\d{3}",,,, "218350123",,, [7, 8, 9, 10, 11], [5, 6]], [,, "8[1-35-9]\\d{7,10}",,,, "812345678",,, [9, 10, 11, 12]], [,, "(?:177\\d|800)\\d{5,7}",,,, "8001234567",,, [8, 9, 10, 11]], [,, "809\\d{7}",,,, "8091234567",,, [10]], [,, "804\\d{7}",,,, "8041234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ID", 62, "0(?:0[17-9]|10(?:00|1[67]))", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["15"]], [, "(\\d{2})(\\d{5,9})", "$1 $2", ["2[124]|[36]1"], "(0$1)"], [, "(\\d{3})(\\d{5,7})", "$1 $2", ["800"], "0$1"], [, "(\\d{3})(\\d{5,8})", "$1 $2", ["[2-79]"], "(0$1)"], [, "(\\d{3})(\\d{3,4})(\\d{3})", "$1-$2-$3", ["8[1-35-9]"], "0$1"], [, "(\\d{3})(\\d{6,8})", "$1 $2", ["1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["804"], "0$1"], [, "(\\d{3})(\\d)(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["80"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "8071\\d{6}",,,,,,, [10]], [,, "(?:1500|8071\\d{3})\\d{3}",,,, "8071123456",,, [7, 10]],,, [,,,,,,,,, [-1]]],
    IE: [, [,, "[148]\\d{9}|[124-9]\\d{8}|[124-69]\\d{7}|[24-69]\\d{6}",,,,,,, [7, 8, 9, 10], [5, 6]], [,, "(?:1\\d{2,3}|2(?:[13]\\d\\d|[24-9])|4(?:0[24]|(?:(?:[1-469]|8[0-46-9])\\d|5)\\d|7)|5(?:0[45]|(?:1|[23679]\\d)\\d|8)|6(?:[237-9]|[4-6]\\d\\d)|7[14]\\d\\d|9(?:[04]\\d\\d|[35-9]))\\d{5}|[269]1\\d{6}",,,, "2212345",,,, [5, 6]], [,, "8(?:22|[35-9]\\d)\\d{6}",,,, "850123456",,, [9]], [,, "1800\\d{6}",,,, "1800123456",,, [10]], [,, "15(?:1[2-8]|[2-8]0|9[089])\\d{6}",,,, "1520123456",,, [10]], [,, "18[59]0\\d{6}",,,, "1850123456",,, [10]], [,, "700\\d{6}",,,, "700123456",,, [9]], [,, "76\\d{7}",,,, "761234567",,, [9]], "IE", 353, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["2[24-9]|47|58|6[237-9]|9[35-9]"], "(0$1)"], [, "(\\d{3})(\\d{5})", "$1 $2", ["[45]0"], "(0$1)"], [, "(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2569]|4[1-69]|7[14]"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["81"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[78]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]], [, "(\\d{2})(\\d)(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["8"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["4"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,, "18[59]0\\d{6}",,,,,,, [10]], [,, "818\\d{6}",,,, "818123456",,, [9]],,, [,, "8[35-9]5\\d{7}",,,, "8551234567",,, [10]]],
    IL: [, [,, "1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}",,,,,,, [7, 8, 9, 10, 11, 12]], [,, "(?:153\\d\\d?|[2-489])\\d{7}",,,, "21234567",,, [8, 11, 12], [7]], [,, "5(?:(?:[0-489][2-9]|6\\d)\\d|5(?:01|2[2-5]|3[23]|4[45]|5[05689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\d{5}",,,, "502345678",,, [9]], [,, "1(?:255|80[019]\\d{3})\\d{3}",,,, "1800123456",,, [7, 10]], [,, "1(?:2(?:00\\d\\d|12)|9(?:0[01]|19)\\d\\d)\\d{4}",,,, "1919123456",,, [8, 10]], [,, "1700\\d{6}",,,, "1700123456",,, [10]], [,,,,,,,,, [-1]], [,, "7(?:(?:18|2[23]|3[237]|47|6[58]|7\\d|9[2357-9])\\d|8(?:2\\d|33|55|77|81))\\d{5}",,,, "771234567",,, [9]], "IL", 972, "0(?:0|1[2-9])", "0",,, "0",,,, [[, "(\\d{4})(\\d{3})", "$1-$2", ["125"]], [, "(\\d{4})(\\d{2})(\\d{2})", "$1-$2-$3", ["121"]], [, "(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-489]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1-$2-$3", ["12"]], [, "(\\d{4})(\\d{6})", "$1-$2", ["159"]], [, "(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3-$4", ["1[7-9]"]], [, "(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})", "$1-$2 $3-$4", ["15"]]],, [,,,,,,,,, [-1]],,, [,, "1700\\d{6}",,,,,,, [10]], [,, "1599\\d{6}",,,, "1599123456",,, [10]],,, [,, "151\\d{8,9}",,,, "15112340000",,, [11, 12]]],
    IM: [, [,, "(?:1624|(?:[3578]\\d|90)\\d\\d)\\d{6}",,,,,,, [10], [6]], [,, "1624[5-8]\\d{5}",,,, "1624756789",,,, [6]], [,, "7(?:4576|[59]24\\d|624[0-4689])\\d{5}",,,, "7924123456"], [,, "808162\\d{4}",,,, "8081624567"], [,, "(?:8(?:4(?:40[49]06|5624\\d)|7(?:0624|2299)\\d)|90[0167]624\\d)\\d{3}",,,, "9016247890"], [,,,,,,,,, [-1]], [,, "70\\d{8}",,,, "7012345678"], [,, "56\\d{8}",,,, "5612345678"], "IM", 44, "00", "0",,, "0|([5-8]\\d{5})$", "1624$1",,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:3(?:(?:08162|3\\d{4}|7(?:0624|2299))\\d|4(?:40[49]06|5624\\d))|55\\d{5})\\d{3}",,,, "5512345678"],,, [,,,,,,,,, [-1]]],
    IN: [, [,, "(?:00800|1\\d{0,5}|[2-9]\\d\\d)\\d{7}",,,,,,, [8, 9, 10, 11, 12, 13], [6, 7]], [,, "(?:1(?:1[2-7]\\d\\d|2(?:[0-249][2-7]\\d|[35-8]\\d[2-7])|3(?:[0-25][2-7]\\d|[346-9]\\d[2-7])|4(?:[145][2-7]\\d|[236-9]\\d[2-7])|[59](?:[0235-9]\\d[2-7]|[14][2-7]\\d)|6(?:[014][2-7]\\d|[235-9]\\d[2-7])|7(?:(?:0[24]|[1257][2-7])\\d|[34689]\\d[2-7])|8(?:[01346][2-7]\\d|[257-9]\\d[2-7]))|2(?:[02][2-7]\\d\\d|1(?:[134689]\\d[2-7]|[257][2-7]\\d)|3(?:[013][2-7]\\d|[24-8]\\d[2-7])|4(?:[01][2-7]\\d|[2-8]\\d[2-7])|5(?:[0137][2-7]\\d|[25689]\\d[2-7])|6(?:[0158][2-7]\\d|[2-4679]\\d[2-7])|7(?:[13-79]\\d[2-7]|8[2-7]\\d)|8(?:(?:0[13468]|[1568][2-7])\\d|[2-479]\\d[2-7])|9(?:(?:0\\d|[14][2-7])\\d|[235-9]\\d[2-7]))|3(?:(?:01|1[79])\\d[2-7]|2(?:[1-5]\\d[2-7]|6[2-7]\\d)|3[2-7]\\d\\d|4(?:[13][2-7]\\d|2(?:[0189][2-7]|[2-7]\\d)|[5-8]\\d[2-7])|5(?:[125689]\\d[2-7]|[34][2-7]\\d)|6(?:[01489][2-7]\\d|[235-7]\\d[2-7])|7(?:[02-46][2-7]\\d|[157-9]\\d[2-7])|8(?:(?:0\\d|[159][2-7])\\d|[2-46-8]\\d[2-7]))|4(?:[04][2-7]\\d\\d|1(?:[14578]\\d[2-7]|[36][2-7]\\d)|2(?:(?:0[24]|[1-47][2-7])\\d|[5689]\\d[2-7])|3(?:[15][2-7]\\d|[2-467]\\d[2-7])|5(?:[12][2-7]\\d|[4-7]\\d[2-7])|6(?:[0-26-9][2-7]\\d|[35]\\d[2-7])|7(?:(?:[014-9][2-7]|2[2-8])\\d|3\\d[2-7])|8(?:[013-57][2-7]\\d|[2689]\\d[2-7])|9(?:[014-7][2-7]\\d|[2389]\\d[2-7]))|5(?:1(?:[025][2-7]\\d|[146-9]\\d[2-7])|2(?:[14-8]\\d[2-7]|2[2-7]\\d)|3(?:[1346]\\d[2-7]|[25][2-7]\\d)|4(?:[14-69]\\d[2-7]|[28][2-7]\\d)|5(?:(?:1[2-7]|2[1-7])\\d|[46]\\d[2-7])|6(?:[146-9]\\d[2-7]|[25][2-7]\\d)|7(?:1[2-7]\\d|[2-4]\\d[2-7])|8(?:1[2-7]\\d|[2-8]\\d[2-7])|9(?:[15][2-7]\\d|[246]\\d[2-7]))|6(?:1(?:[1358]\\d[2-7]|2[2-7]\\d)|2(?:1[2-7]\\d|[2457]\\d[2-7])|3(?:1[2-7]\\d|[2-4]\\d[2-7])|4(?:1[2-7]\\d|[235-7]\\d[2-7])|5(?:[17][2-7]\\d|[2-689]\\d[2-7])|6(?:[13][2-7]\\d|[24578]\\d[2-7])|7(?:1[2-7]\\d|[235689]\\d[2-7]|4(?:[0189][2-7]|[2-7]\\d))|8(?:0[2-7]\\d|[1-6]\\d[2-7]))|7(?:1(?:[013-9]\\d[2-7]|2[2-7]\\d)|2(?:[0235-9]\\d[2-7]|[14][2-7]\\d)|3(?:[134][2-7]\\d|[2679]\\d[2-7])|4(?:[1-35689]\\d[2-7]|[47][2-7]\\d)|5(?:[15][2-7]\\d|[2-46-9]\\d[2-7])|[67](?:[02-9]\\d[2-7]|1[2-7]\\d)|8(?:(?:[013-7]\\d|2[0-6])[2-7]|8(?:[0189][2-7]|[2-7]\\d))|9(?:[0189]\\d[2-7]|[2-7]\\d\\d))|8(?:0[2-7]\\d\\d|1(?:[1357-9]\\d[2-7]|6[2-7]\\d)|2(?:[014][2-7]\\d|[235-8]\\d[2-7])|3(?:[03-57-9]\\d[2-7]|[126][2-7]\\d)|(?:4[0-24-9]|5\\d)\\d[2-7]|6(?:[136][2-7]\\d|[2457-9]\\d[2-7])|7(?:[078][2-7]\\d|[1-6]\\d[2-7])|8(?:[1256]\\d[2-7]|[34][2-7]\\d)|9(?:1[2-7]\\d|[2-4]\\d[2-7])))\\d{5}",,,, "7410410123",,, [10], [6, 7, 8]], [,, "(?:6(?:(?:0(?:0[0-3569]|26|33)|2(?:[06]\\d|3[02589]|8[0-479]|9[0-79])|9(?:0[019]|13))\\d|1279|3(?:(?:0[0-79]|6[0-4679]|7[0-24-9]|[89]\\d)\\d|5(?:0[0-6]|[1-9]\\d)))|7(?:(?:0\\d\\d|19[0-5])\\d|2(?:(?:[0235-79]\\d|[14][017-9])\\d|8(?:[0-59]\\d|[6-8][089]))|3(?:(?:[05-8]\\d|3[017-9])\\d|1(?:[089]\\d|11|7[02-8])|2(?:[0-49][089]|[5-8]\\d)|4(?:[07-9]\\d|11)|9(?:[016-9]\\d|[2-5][089]))|4(?:0\\d\\d|1(?:[015-9]\\d|[2-4][089])|[29](?:[0-7][089]|[89]\\d)|3(?:[0-8][089]|9\\d)|[47](?:[089]\\d|11|7[02-8])|[56]\\d[089]|8(?:[0-24-7][089]|[389]\\d))|5(?:(?:[0346-8]\\d|5[017-9])\\d|1(?:[07-9]\\d|11)|2(?:[04-9]\\d|[1-3][089])|9(?:[0-6][089]|[7-9]\\d))|6(?:0(?:[0-47]\\d|[5689][089])|(?:1[0-257-9]|[6-9]\\d)\\d|2(?:[0-4]\\d|[5-9][089])|3(?:[02-8][089]|[19]\\d)|4\\d[089]|5(?:[0-367][089]|[4589]\\d))|7(?:0(?:0[02-9]|[13-7][089]|[289]\\d)|[1-9]\\d\\d)|8(?:[0-79]\\d\\d|8(?:[089]\\d|11|7[02-9]))|9(?:[089]\\d\\d|313|7(?:[02-8]\\d|9[07-9])))|8(?:0(?:(?:[01589]\\d|6[67])\\d|7(?:[02-8]\\d|9[04-9]))|1(?:[0-57-9]\\d\\d|6(?:[089]\\d|7[02-8]))|2(?:[014](?:[089]\\d|7[02-8])|[235-9]\\d\\d)|3(?:[03-57-9]\\d\\d|[126](?:[089]\\d|7[02-8]))|[45]\\d{3}|6(?:[02457-9]\\d\\d|[136](?:[089]\\d|7[02-8]))|7(?:(?:0[07-9]|[1-69]\\d)\\d|[78](?:[089]\\d|7[02-8]))|8(?:[0-25-9]\\d\\d|3(?:[089]\\d|7[02-8])|4(?:[0489]\\d|7[02-8]))|9(?:[02-9]\\d\\d|1(?:[0289]\\d|7[02-8])))|9\\d{4})\\d{5}",,,, "8123456789",,, [10]], [,, "(?:00800\\d|1(?:600|80[03]\\d{3}))\\d{6}|1800\\d{4,8}",,,, "1800123456"], [,, "186[12]\\d{9}",,,, "1861123456789",,, [13]], [,, "1860\\d{7}",,,, "18603451234",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IN", 91, "00", "0",,, "0",,,, [[, "(\\d{7})", "$1", ["575"]], [, "(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],,, 1], [, "(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"],,, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[59][14]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1|9[15])|6(?:12|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)", "1(?:2(?:[0-24]|9[2-7])|3[0-25]|4[145]|[59][14]|6(?:0[2-7]|[1-9])|7[1257]|8(?:[06][2-7]|[1-57-9]))|2(?:1[257]|3[013]|4[01]|5[0137]|6(?:[058]|1[2-7])|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5(?:1|2[2-7])|[78]1|9[15])|6(?:12[2-7]|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3(?:1[2-7]|[34][2-6])|4[47][2-7]|61[346]|88[0-8])|8(?:(?:16|2[014]|3[126]|6[136])[2-7]|7(?:0[2-6]|[78][2-7])|8(?:3[2-7]|4[235-7])|91[3-7])", "1(?:2(?:[0-24]|9[2-7])|3[0-25]|4[145]|[59][14]|6(?:0[2-7]|[1-9])|7[1257]|8(?:[06][2-7]|[1-57-9]))|2(?:1[257]|3[013]|4[01]|5[0137]|6(?:[058]|1[2-7])|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5(?:1|2[2-7])|[78]1|9[15])|6(?:12(?:[2-6]|7[0-8])|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3(?:1(?:[2-6]|71)|[34][2-6])|4[47](?:[2-6]|7[19])|61[346]|88(?:[01][2-7]|[2-7]|82))|8(?:(?:16|2[014]|3[126]|6[136])(?:[2-6]|7[19])|7(?:0[2-6]|[78](?:[2-6]|7[19]))|8(?:3(?:[2-6]|7[19])|4(?:[2356]|7[19]))|91(?:[3-6]|7[19]))"], "0$1",, 1], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|[4-8])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5(?:[013-9]|2[2-7])))|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|(?:28[6-8]|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7])[2-7]|3(?:179|(?:2[0-49]|9[2-57])[2-7]))|807(?:1|9[1-3])"], "0$1",, 1], [, "(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1",, 1], [, "(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"],,, 1], [, "(\\d{2})(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3 $4", ["0"], "0$1",, 1], [, "(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"],,, 1]], [[, "(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],,, 1], [, "(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"],,, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[59][14]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1|9[15])|6(?:12|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)", "1(?:2(?:[0-24]|9[2-7])|3[0-25]|4[145]|[59][14]|6(?:0[2-7]|[1-9])|7[1257]|8(?:[06][2-7]|[1-57-9]))|2(?:1[257]|3[013]|4[01]|5[0137]|6(?:[058]|1[2-7])|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5(?:1|2[2-7])|[78]1|9[15])|6(?:12[2-7]|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3(?:1[2-7]|[34][2-6])|4[47][2-7]|61[346]|88[0-8])|8(?:(?:16|2[014]|3[126]|6[136])[2-7]|7(?:0[2-6]|[78][2-7])|8(?:3[2-7]|4[235-7])|91[3-7])", "1(?:2(?:[0-24]|9[2-7])|3[0-25]|4[145]|[59][14]|6(?:0[2-7]|[1-9])|7[1257]|8(?:[06][2-7]|[1-57-9]))|2(?:1[257]|3[013]|4[01]|5[0137]|6(?:[058]|1[2-7])|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5(?:1|2[2-7])|[78]1|9[15])|6(?:12(?:[2-6]|7[0-8])|[2-4]1|5[17]|6[13]|7[14]|80)|7(?:12|(?:2[14]|5[15])[2-6]|3(?:1(?:[2-6]|71)|[34][2-6])|4[47](?:[2-6]|7[19])|61[346]|88(?:[01][2-7]|[2-7]|82))|8(?:(?:16|2[014]|3[126]|6[136])(?:[2-6]|7[19])|7(?:0[2-6]|[78](?:[2-6]|7[19]))|8(?:3(?:[2-6]|7[19])|4(?:[2356]|7[19]))|91(?:[3-6]|7[19]))"], "0$1",, 1], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|[4-8])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5(?:[013-9]|2[2-7])))|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|[4-8])|7(?:1(?:[013-8]|9[6-9])|(?:28[6-8]|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7])[2-7]|3(?:179|(?:2[0-49]|9[2-57])[2-7]))|807(?:1|9[1-3])"], "0$1",, 1], [, "(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1",, 1], [, "(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"],,, 1], [, "(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"],,, 1]], [,,,,,,,,, [-1]],,, [,, "(?:00800\\d|1(?:600|8(?:0[03]\\d\\d|6(?:0|[12]\\d\\d))\\d))\\d{6}|1800\\d{4,8}"], [,, "140\\d{7}",,,, "1409305260",,, [10]],,, [,,,,,,,,, [-1]]],
    IO: [, [,, "3\\d{6}",,,,,,, [7]], [,, "37\\d{5}",,,, "3709100"], [,, "38\\d{5}",,,, "3801234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IO", 246, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["3"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    IQ: [, [,, "(?:1|[2-6]\\d?|7\\d\\d)\\d{7}",,,,,,, [8, 9, 10], [6, 7]], [,, "1\\d{7}|(?:2[13-5]|3[02367]|4[023]|5[03]|6[026])\\d{6,7}",,,, "12345678",,, [8, 9], [6, 7]], [,, "7[3-9]\\d{8}",,,, "7912345678",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IQ", 964, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-6]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    IR: [, [,, "[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}",,,,,,, [4, 5, 6, 7, 10], [8]], [,, "(?:(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])\\d{4}|94(?:(?:000|(?:11|2\\d)\\d|30[01])\\d|4(?:111|40\\d)))\\d{4}|(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])(?:[16]|[289]\\d?)\\d{3}",,,, "2123456789",,, [6, 7, 10], [4, 5, 8]], [,, "9(?:(?:0(?:[1-35]\\d|44)|(?:[13]\\d|2[0-2])\\d)\\d|9(?:(?:[01]\\d|44)\\d|510|8(?:1[01]|88)|9(?:0[013]|1[0134]|21|77|9[6-9])))\\d{5}",,,, "9123456789",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "993\\d{7}",,,, "9932123456",,, [10]], "IR", 98, "00", "0",,, "0",,,, [[, "(\\d{4,5})", "$1", ["96"], "0$1"], [, "(\\d{2})(\\d{4,5})", "$1 $2", ["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[1-8]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "9(?:4(?:11[1-7]|440)\\d{5}|6(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19]))",,,,,,, [4, 5, 10]], [,, "96(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19])",,,, "9601",,, [4, 5]],,, [,,,,,,,,, [-1]]],
    IS: [, [,, "(?:38\\d|[4-9])\\d{6}",,,,,,, [7, 9]], [,, "(?:4(?:1[0-24-69]|2[0-7]|[37][0-8]|4[0-245]|5[0-68]|6\\d|8[0-36-8])|5(?:05|[156]\\d|2[02578]|3[0-579]|4[03-7]|7[0-2578]|8[0-35-9]|9[013-689])|87[23])\\d{4}",,,, "4101234",,, [7]], [,, "(?:38[589]\\d\\d|6(?:1[1-8]|2[0-6]|3[027-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\d)|7(?:5[057]|[6-8]\\d|9[0-3])|8(?:2[0-59]|[3469]\\d|5[1-9]|8[28]))\\d{4}",,,, "6111234"], [,, "800\\d{4}",,,, "8001234",,, [7]], [,, "90\\d{5}",,,, "9011234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "49\\d{5}",,,, "4921234",,, [7]], "IS", 354, "00|1(?:0(?:01|[12]0)|100)",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[4-9]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["3"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "809\\d{4}",,,, "8091234",,, [7]],,, [,, "(?:689|8(?:7[0189]|80)|95[48])\\d{4}",,,, "6891234",,, [7]]],
    IT: [, [,, "0\\d{6}(?:\\d{4})?|3[0-8]\\d{9}|(?:[0138]\\d?|55)\\d{8}|[08]\\d{5}(?:\\d{2})?",,,,,,, [6, 7, 8, 9, 10, 11]], [,, "0(?:(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d|6(?:[0-57-9]\\d\\d|6(?:[0-8]\\d|9[0-79])))\\d{1,6}",,,, "0212345678"], [,, "33\\d{9}|3[1-9]\\d{8}|3[2-9]\\d{7}",,,, "3123456789",,, [9, 10, 11]], [,, "80(?:0\\d{3}|3)\\d{3}",,,, "800123456",,, [6, 9]], [,, "(?:(?:0878|1(?:44|6[346])\\d)\\d\\d|89(?:2|(?:4[5-9]|(?:5[5-9]|9)\\d\\d)\\d))\\d{3}|89[45][0-4]\\d\\d",,,, "899123456",,, [6, 8, 9, 10]], [,, "84(?:[08]\\d{3}|[17])\\d{3}",,,, "848123456",,, [6, 9]], [,, "1(?:78\\d|99)\\d{6}",,,, "1781234567",,, [9, 10]], [,, "55\\d{8}",,,, "5512345678",,, [10]], "IT", 39, "00",,,,,,,, [[, "(\\d{4,5})", "$1", ["1(?:0|9[246])", "1(?:0|9(?:2[2-9]|[46]))"]], [, "(\\d{6})", "$1", ["1(?:1|92)"]], [, "(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], [, "(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[245])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))"]], [, "(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["894"]], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1[4679]|[38]"]], [, "(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["3"]], [, "(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]], [[, "(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], [, "(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[245])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))"]], [, "(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["894"]], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1[4679]|[38]"]], [, "(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["3"]], [, "(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]], [,,,,,,,,, [-1]], 1,, [,, "848\\d{6}",,,,,,, [9]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    JE: [, [,, "(?:1534|(?:[3578]\\d|90)\\d\\d)\\d{6}",,,,,,, [10], [6]], [,, "1534[0-24-8]\\d{5}",,,, "1534456789",,,, [6]], [,, "7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}",,,, "7797712345"], [,, "80(?:07(?:35|81)|8901)\\d{4}",,,, "8007354567"], [,, "(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}",,,, "9018105678"], [,,,,,,,,, [-1]], [,, "701511\\d{4}",,,, "7015115678"], [,, "56\\d{8}",,,, "5612345678"], "JE", 44, "00", "0",,, "0|([0-24-8]\\d{5})$", "1534$1",,,,, [,, "76(?:0[0-2]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\\d{6}",,,, "7640123456"],,, [,,,,,,,,, [-1]], [,, "(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}",,,, "5512345678"],,, [,,,,,,,,, [-1]]],
    JM: [, [,, "(?:[58]\\d\\d|658|900)\\d{7}",,,,,,, [10], [7]], [,, "(?:658[2-9]\\d\\d|876(?:5(?:0[12]|1[0-46-8]|2[35]|63)|6(?:0[1-3579]|1[0237-9]|[23]\\d|40|5[06]|6[2-589]|7[05]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\d|9[2-468])))\\d{4}",,,, "8765230123",,,, [7]], [,, "876(?:(?:2[14-9]|[348]\\d)\\d|5(?:0[3-9]|[2-57-9]\\d|6[0-24-9])|7(?:0[07]|7\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579]))\\d{4}",,,, "8762101234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "JM", 1, "011", "1",,, "1",,,,,, [,,,,,,,,, [-1]],, "658|876", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    JO: [, [,, "(?:(?:(?:[268]|7\\d)\\d|32|53)\\d|900)\\d{5}",,,,,,, [8, 9]], [,, "(?:2(?:6(?:2[0-35-9]|3[0-578]|4[24-7]|5[0-24-8]|[6-8][023]|9[0-3])|7(?:0[1-79]|10|2[014-7]|3[0-689]|4[019]|5[0-3578]))|32(?:0[1-69]|1[1-35-7]|2[024-7]|3\\d|4[0-3]|[57][023]|6[03])|53(?:0[0-3]|[13][023]|2[0-59]|49|5[0-35-9]|6[15]|7[45]|8[1-6]|9[0-36-9])|6(?:2(?:[05]0|22)|3(?:00|33)|4(?:0[0-25]|1[2-7]|2[0569]|[38][07-9]|4[025689]|6[0-589]|7\\d|9[0-2])|5(?:[01][056]|2[034]|3[0-57-9]|4[178]|5[0-69]|6[0-35-9]|7[1-379]|8[0-68]|9[0239]))|87(?:[029]0|7[08]))\\d{4}",,,, "62001234",,, [8]], [,, "7(?:55[0-49]|(?:7[025-9]|[89][0-25-9])\\d)\\d{5}",,,, "790123456",,, [9]], [,, "80\\d{6}",,,, "80012345",,, [8]], [,, "900\\d{5}",,,, "90012345",,, [8]], [,, "85\\d{6}",,,, "85012345",,, [8]], [,, "70\\d{7}",,,, "700123456",,, [9]], [,,,,,,,,, [-1]], "JO", 962, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2356]|87"], "(0$1)"], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["[89]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["70"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]],, [,, "74(?:66|77)\\d{5}",,,, "746612345",,, [9]],,, [,,,,,,,,, [-1]], [,, "8(?:10|8\\d)\\d{5}",,,, "88101234",,, [8]],,, [,,,,,,,,, [-1]]],
    JP: [, [,, "00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}",,,,,,, [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]], [,, "(?:1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|[58][2-8]|6[2-7]|7[2-9]|9[1-9])|(?:2[2-9]|[36][1-9])\\d|4(?:[2-578]\\d|6[02-8]|9[2-59])|5(?:[2-589]\\d|6[1-9]|7[2-8])|7(?:[25-9]\\d|3[4-9]|4[02-9])|8(?:[2679]\\d|3[2-9]|4[5-9]|5[1-9]|8[03-9])|9(?:[2-58]\\d|[679][1-9]))\\d{6}",,,, "312345678",,, [9]], [,, "[7-9]0[1-9]\\d{7}",,,, "9012345678",,, [10]], [,, "(?:00(?:(?:37|66)\\d{4,11}|777(?:[01]|(?:5|8\\d)\\d)|882[1245]\\d\\d)|(?:120|800\\d)\\d{4})\\d\\d",,,, "120123456"], [,, "990\\d{6}",,,, "990123456",,, [9]], [,,,,,,,,, [-1]], [,, "60\\d{7}",,,, "601234567",,, [9]], [,, "50[1-9]\\d{7}",,,, "5012345678",,, [10]], "JP", 81, "010", "0",,, "0",,,, [[, "(\\d{4})(\\d{4})", "$1-$2", ["007", "0077", "00777", "00777[01]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], [, "(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])", "1(?:267|3(?:7[247]|9[278])|4(?:5[67]|66)|5(?:47|58|64|8[67])|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))", "1(?:267|3(?:7[247]|9[278])|4(?:5[67]|66)|5(?:47|58|64|8[67])|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["2(?:[34]7|[56]9|74|9[14-79])|82[0367]|993", "2(?:[34]7|[56]9|74|9(?:1[02-689]|[4-79]))|82[0367]|993[0-25-9]", "2(?:[34]7|59(?:[02-8]|1[0-689]|9[0-8])|69|74|9(?:1[02-689]|[4-79]))|82[0367]|993[0-25-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["2(?:2[12]|3[0-269]|4[59]|5[0-468]|62|7[1-35]|8[16]|9[0238])|4(?:2[1-57]|3[0-57]|[45]|6[28]|7[259]|8[1-9]|9[29])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|9(?:4[15]|9[12489])", "2(?:2[12]|3[0-269]|4[59]|5(?:[04][01]|[1-3]|[68]1)|62|7[1-35]|8[16]|9(?:[028]|3[015-9]))|4(?:2(?:[13-57]|21)|3[0-57]|[45]|6[28]|7(?:2|[59][019])|8[1-9]|9[29])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|9(?:4[15]|9(?:[1289]|4[0178]))"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[37]|5[5-9]|64|78|8[39]|91)|4(?:2[2689]|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|60|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93)", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:3[014-9]|7)|5(?:5[0-69]|[68]0|7[015-9]|9)|64[016-9]|78[0189]|8(?:3[0134]|9[0-5])|917)|4(?:2(?:20|6|8[014-6]|9[178])|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9(?:[0-3]|[89][019]))|60|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|7[016-9])|49|6(?:[0-24]|5[0-3589]|[68][019]|9[01459])|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93[34])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:3[014-9]|7)|5(?:5[0-69]|[68]0|7[015-9]|9)|64[016-9]|78[0189]|8(?:3[0134]|9[0-5])|917)|4(?:2(?:20|6|8[014-6]|9[178])|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9(?:[0-3]|[89][019]))|60|8(?:2(?:[1258]|4[0-39]|9(?:[0169]|2[1-9]|4[1-3]))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|8[019]|9(?:[0145]|9[014-9]))|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93(?:31|4[357]))", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:3[014-9]|7)|5(?:5[0-69]|[68]0|7[015-9]|9)|64[016-9]|78[0189]|8(?:3[0134]|9[0-5])|917)|4(?:2(?:20|6|8[014-6]|9[178])|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9(?:[0-3]|[89][019]))|60|8(?:2(?:[1258]|4[0-39]|9(?:[019]|2[1-9]|4[1-3]|6(?:[0-47-9]|5[01346-9]|6[1-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|8[019]|9(?:[0145]|9[014-9]))|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93(?:31|4[357]))"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2[09]|7(?:0[019]|1))"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])", "[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])"], "0$1"], [, "(\\d{4})(\\d{2})(\\d{3,4})", "$1-$2-$3", ["007"]], [, "(\\d{4})(\\d{2})(\\d{4})", "$1-$2-$3", ["008"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[2579]|80"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3,4})", "$1-$2-$3", ["0"]], [, "(\\d{4})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["0"]], [, "(\\d{4})(\\d{5})(\\d{5,6})", "$1-$2-$3", ["0"]], [, "(\\d{4})(\\d{6})(\\d{6,7})", "$1-$2-$3", ["0"]]], [[, "(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], [, "(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])", "1(?:267|3(?:7[247]|9[278])|4(?:5[67]|66)|5(?:47|58|64|8[67])|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))", "1(?:267|3(?:7[247]|9[278])|4(?:5[67]|66)|5(?:47|58|64|8[67])|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["2(?:[34]7|[56]9|74|9[14-79])|82[0367]|993", "2(?:[34]7|[56]9|74|9(?:1[02-689]|[4-79]))|82[0367]|993[0-25-9]", "2(?:[34]7|59(?:[02-8]|1[0-689]|9[0-8])|69|74|9(?:1[02-689]|[4-79]))|82[0367]|993[0-25-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["2(?:2[12]|3[0-269]|4[59]|5[0-468]|62|7[1-35]|8[16]|9[0238])|4(?:2[1-57]|3[0-57]|[45]|6[28]|7[259]|8[1-9]|9[29])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|9(?:4[15]|9[12489])", "2(?:2[12]|3[0-269]|4[59]|5(?:[04][01]|[1-3]|[68]1)|62|7[1-35]|8[16]|9(?:[028]|3[015-9]))|4(?:2(?:[13-57]|21)|3[0-57]|[45]|6[28]|7(?:2|[59][019])|8[1-9]|9[29])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|9(?:4[15]|9(?:[1289]|4[0178]))"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[37]|5[5-9]|64|78|8[39]|91)|4(?:2[2689]|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|60|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93)", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:3[014-9]|7)|5(?:5[0-69]|[68]0|7[015-9]|9)|64[016-9]|78[0189]|8(?:3[0134]|9[0-5])|917)|4(?:2(?:20|6|8[014-6]|9[178])|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9(?:[0-3]|[89][019]))|60|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|7[016-9])|49|6(?:[0-24]|5[0-3589]|[68][019]|9[01459])|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93[34])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:3[014-9]|7)|5(?:5[0-69]|[68]0|7[015-9]|9)|64[016-9]|78[0189]|8(?:3[0134]|9[0-5])|917)|4(?:2(?:20|6|8[014-6]|9[178])|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9(?:[0-3]|[89][019]))|60|8(?:2(?:[1258]|4[0-39]|9(?:[0169]|2[1-9]|4[1-3]))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|8[019]|9(?:[0145]|9[014-9]))|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93(?:31|4[357]))", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:3[014-9]|7)|5(?:5[0-69]|[68]0|7[015-9]|9)|64[016-9]|78[0189]|8(?:3[0134]|9[0-5])|917)|4(?:2(?:20|6|8[014-6]|9[178])|64|7[347])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9(?:[0-3]|[89][019]))|60|8(?:2(?:[1258]|4[0-39]|9(?:[019]|2[1-9]|4[1-3]|6(?:[0-47-9]|5[01346-9]|6[1-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|8[019]|9(?:[0145]|9[014-9]))|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|5[138]|6[1-3]|7[156]|8[189]|93(?:31|4[357]))"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2[09]|7(?:0[019]|1))"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])", "[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[2579]|80"], "0$1"]], [,, "20\\d{8}",,,, "2012345678",,, [10]],,, [,, "00(?:(?:37|66)\\d{4,11}|777(?:[01]|(?:5|8\\d)\\d)|882[1245]\\d\\d)\\d\\d"], [,, "570\\d{6}",,,, "570123456",,, [9]],,, [,,,,,,,,, [-1]]],
    KE: [, [,, "(?:(?:2|80)0\\d?|[4-7]\\d\\d|900)\\d{6}|[4-6]\\d{6,7}",,,,,,, [7, 8, 9, 10]], [,, "20\\d{6,7}|(?:4[0-6]|5\\d|6[0-24-9])\\d{7}|(?:4[0245]|6[014-9])\\d{6}|5[1-79]\\d{5,6}|(?:4[245]|6[01457-9])\\d{5}",,,, "202012345",,, [7, 8, 9]], [,, "7\\d{8}",,,, "712123456",,, [9]], [,, "800[24-8]\\d{5,6}",,,, "800223456",,, [9, 10]], [,, "900[02-9]\\d{5}",,,, "900223456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KE", 254, "000", "0",,, "0",,,, [[, "(\\d{2})(\\d{5,7})", "$1 $2", ["[24-6]"], "0$1"], [, "(\\d{3})(\\d{6})", "$1 $2", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KG: [, [,, "(?:[235-7]\\d|99)\\d{7}|800\\d{6,7}",,,,,,, [9, 10], [5, 6]], [,, "(?:3(?:1(?:[256]\\d|3[1-9]|47)|2(?:22|3[0-479]|6[0-7])|4(?:22|5[6-9]|6\\d)|5(?:22|3[4-7]|59|6\\d)|6(?:22|5[35-7]|6\\d)|7(?:22|3[468]|4[1-9]|59|[67]\\d)|9(?:22|4[1-8]|6\\d))|6(?:09|12|2[2-4])\\d)\\d{5}",,,, "312123456",,, [9], [5, 6]], [,, "(?:2(?:0[0-35]|2\\d)|5[0-24-7]\\d|7(?:[07]\\d|55)|99[69])\\d{6}",,,, "700123456",,, [9]], [,, "800\\d{6,7}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KG", 996, "00", "0",,, "0",,,, [[, "(\\d{4})(\\d{5})", "$1 $2", ["3(?:1[346]|[24-79])"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235-79]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d)(\\d{2,3})", "$1 $2 $3 $4", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KH: [, [,, "1\\d{9}|[1-9]\\d{7,8}",,,,,,, [8, 9, 10], [6, 7]], [,, "(?:2(?:3(?:4(?:[2-4]|[56]\\d)|[568]\\d\\d)|[4-6](?:4[56]|[56]\\d)\\d)|(?:3[2-6]|4[2-4]|[5-7][2-5])(?:4[56]|[56]\\d)\\d)\\d{4}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])[236-9]\\d{5}",,,, "23756789",,, [8, 9], [6, 7]], [,, "(?:(?:(?:1[28]|9[67])\\d|8(?:[013-79]|8\\d))\\d|(?:2[3-6]|4[2-4]|[56][2-5])48|3(?:[18]\\d\\d|[2-6]48)|7(?:(?:[07-9]|[16]\\d)\\d|[2-5]48))\\d{5}|(?:1\\d|6[016-9]|9[0-57-9])\\d{6}",,,, "91234567",,, [8, 9]], [,, "1800(?:1\\d|2[019])\\d{4}",,,, "1800123456",,, [10]], [,, "1900(?:1\\d|2[09])\\d{4}",,,, "1900123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KH", 855, "00[14-9]", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-9]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KI: [, [,, "(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}",,,,,,, [5, 8]], [,, "(?:[24]\\d|3[1-9]|50|65(?:02[12]|12[56]|22[89]|[3-5]00)|7(?:27\\d\\d|3100|5(?:02[12]|12[56]|22[89]|[34](?:00|81)|500))|8[0-5])\\d{3}",,,, "31234"], [,, "(?:6(?:200[01]|30[01]\\d)|7(?:200[01]|3(?:0[0-5]\\d|140)))\\d{3}",,,, "72001234",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "30(?:0[01]\\d\\d|12(?:11|20))\\d\\d",,,, "30010000",,, [8]], "KI", 686, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KM: [, [,, "[3478]\\d{6}",,,,,,, [7]], [,, "7[4-7]\\d{5}",,,, "7712345"], [,, "[34]\\d{6}",,,, "3212345"], [,,,,,,,,, [-1]], [,, "8\\d{6}",,,, "8001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KM", 269, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[3478]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KN: [, [,, "(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "869(?:2(?:29|36)|302|4(?:6[015-9]|70))\\d{4}",,,, "8692361234",,,, [7]], [,, "869(?:5(?:5[6-8]|6[5-7])|66\\d|76[02-7])\\d{4}",,,, "8697652917",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "KN", 1, "011", "1",,, "1|([2-7]\\d{6})$", "869$1",,,,, [,,,,,,,,, [-1]],, "869", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KP: [, [,, "(?:(?:19\\d|2)\\d|85)\\d{6}",,,,,,, [8, 10], [6, 7]], [,, "(?:2\\d|85)\\d{6}",,,, "21234567",,, [8], [6, 7]], [,, "19[1-3]\\d{7}",,,, "1921234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KP", 850, "00|99", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "2(?:[0-24-9]\\d\\d|3(?:[0-79]\\d|8[02-9]))\\d{4}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KR: [, [,, "(?:00[1-9]\\d{2,4}|[12]|5\\d{3})\\d{7}|(?:(?:00|[13-6])\\d|70)\\d{8}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}",,,,,,, [5, 6, 8, 9, 10, 11, 12, 13, 14], [3, 4, 7]], [,, "(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\\d{2,3}",,,, "22123456",,, [5, 6, 8, 9, 10], [3, 4, 7]], [,, "1[0-26-9]\\d{7,8}",,,, "1000000000",,, [9, 10]], [,, "(?:00(?:3(?:08|68\\d)|798\\d{1,3})|80\\d)\\d{6}",,,, "801234567",,, [9, 11, 12, 13, 14]], [,, "60[2-9]\\d{6}",,,, "602345678",,, [9]], [,,,,,,,,, [-1]], [,, "50\\d{8,9}",,,, "5012345678",,, [10, 11]], [,, "70\\d{8}",,,, "7012345678",,, [10]], "KR", 82, "00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))", "0",,, "0(8(?:[1-46-8]|5\\d\\d))?",,,, [[, "(\\d{5})", "$1", ["1[016-9]1", "1[016-9]11", "1[016-9]114"], "0$1"], [, "(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1", "0$CC-$1"], [, "(\\d{4})(\\d{4})", "$1-$2", ["1"]], [, "(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60|8"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1", "0$CC-$1"], [, "(\\d{5})(\\d{3})(\\d{3})", "$1 $2 $3", ["003", "0030"]], [, "(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1", "0$CC-$1"], [, "(\\d{5})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0"]], [, "(\\d{5})(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["0"]]], [[, "(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1", "0$CC-$1"], [, "(\\d{4})(\\d{4})", "$1-$2", ["1"]], [, "(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60|8"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1", "0$CC-$1"]], [,, "15\\d{7,8}",,,, "1523456789",,, [9, 10]],,, [,, "00(?:3(?:08|68\\d)|798\\d{1,3})\\d{6}",,,,,,, [11, 12, 13, 14]], [,, "1(?:5(?:22|44|66|77|88|99)|6(?:[07]0|44|6[16]|88)|8(?:00|33|55|77|99))\\d{4}",,,, "15441234",,, [8]],,, [,,,,,,,,, [-1]]],
    KW: [, [,, "(?:18|[2569]\\d\\d)\\d{5}",,,,,,, [7, 8]], [,, "2(?:[23]\\d\\d|4(?:[1-35-9]\\d|44)|5(?:0[034]|[2-46]\\d|5[1-3]|7[1-7]))\\d{4}",,,, "22345678",,, [8]], [,, "(?:5(?:(?:[05]\\d|1[0-7]|6[56])\\d|2(?:22|5[25]))|6(?:(?:0[034679]|5[015-9]|6\\d)\\d|222|7(?:0[013-9]|[67]\\d)|9(?:[069]\\d|3[039]))|9(?:(?:0[09]|22|4[01479]|55|6[0679]|8[057-9]|9\\d)\\d|11[01]|7(?:02|[1-9]\\d)))\\d{4}",,,, "50012345",,, [8]], [,, "18\\d{5}",,,, "1801234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KW", 965, "00",,,,,,,, [[, "(\\d{4})(\\d{3,4})", "$1 $2", ["[169]|2(?:[235]|4[1-35-9])|52"]], [, "(\\d{3})(\\d{5})", "$1 $2", ["[25]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KY: [, [,, "(?:345|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "345(?:2(?:22|44)|444|6(?:23|38|40)|7(?:4[35-79]|6[6-9]|77)|8(?:00|1[45]|25|[48]8)|9(?:14|4[035-9]))\\d{4}",,,, "3452221234",,,, [7]], [,, "345(?:32[1-9]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|9(?:1[67]|2[2-9]|3[689]))\\d{4}",,,, "3453231234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "(?:345976|900[2-9]\\d\\d)\\d{4}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "KY", 1, "011", "1",,, "1|([2-9]\\d{6})$", "345$1",,,,, [,, "345849\\d{4}",,,, "3458491234"],, "345", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    KZ: [, [,, "(?:33622|(?:7\\d|80)\\d{3})\\d{5}",,,,,,, [10]], [,, "(?:33622|7(?:1(?:0(?:[23]\\d|4[0-3]|59|63)|1(?:[23]\\d|4[0-79]|59)|2(?:[23]\\d|59)|3(?:2\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\d|3[013-9]|5[1-9])|5(?:2\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\d|5[19]|61)|72\\d|8(?:[27]\\d|3[1-46-9]|4[0-5]))|2(?:1(?:[23]\\d|4[46-9]|5[3469])|2(?:2\\d|3[0679]|46|5[12679])|3(?:[2-4]\\d|5[139])|4(?:2\\d|3[1-35-9]|59)|5(?:[23]\\d|4[0-246-8]|59|61)|6(?:2\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\d|40|5[279])|8(?:[23]\\d|4[0-3]|59)|9(?:2\\d|3[124578]|59))))\\d{5}",,,, "7123456789"], [,, "7(?:0[0-2578]|47|6[02-4]|7[15-8]|85)\\d{7}",,,, "7710009998"], [,, "800\\d{7}",,,, "8001234567"], [,, "809\\d{7}",,,, "8091234567"], [,,,,,,,,, [-1]], [,, "808\\d{7}",,,, "8081234567"], [,, "751\\d{7}",,,, "7511234567"], "KZ", 7, "810", "8",,, "8",, "8~10",,,, [,,,,,,,,, [-1]],, "33|7", [,, "751\\d{7}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LA: [, [,, "(?:2\\d|3)\\d{8}|(?:[235-8]\\d|41)\\d{6}",,,,,,, [8, 9, 10], [6]], [,, "(?:2[13]|[35-7][14]|41|8[1468])\\d{6}",,,, "21212862",,, [8], [6]], [,, "20(?:[29]\\d|5[24-689]|7[6-8])\\d{6}",,,, "2023123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LA", 856, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2[13]|3[14]|[4-8]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["3"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["2"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "30\\d{7}",,,, "301234567",,, [9]],,, [,,,,,,,,, [-1]]],
    LB: [, [,, "[7-9]\\d{7}|[13-9]\\d{6}",,,,,,, [7, 8]], [,, "(?:(?:[14-69]\\d|8[02-9])\\d|7(?:[2-57]\\d|62|8[0-7]|9[04-9]))\\d{4}",,,, "1123456",,, [7]], [,, "(?:(?:3|81)\\d|7(?:[01]\\d|6[013-9]|8[89]|9[1-3]))\\d{5}",,,, "71123456"], [,,,,,,,,, [-1]], [,, "9[01]\\d{6}",,,, "90123456",,, [8]], [,, "80\\d{6}",,,, "80123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LB", 961, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[7-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LC: [, [,, "(?:[58]\\d\\d|758|900)\\d{7}",,,,,,, [10], [7]], [,, "758(?:4(?:30|5\\d|6[2-9]|8[0-2])|57[0-2]|638)\\d{4}",,,, "7584305678",,,, [7]], [,, "758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\d|3[01]))\\d{4}",,,, "7582845678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "LC", 1, "011", "1",,, "1|([2-7]\\d{6})$", "758$1",,,,, [,,,,,,,,, [-1]],, "758", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LI: [, [,, "(?:(?:[2378]|6\\d\\d)\\d|90)\\d{5}",,,,,,, [7, 9]], [,, "(?:2(?:01|1[27]|3\\d|6[02-578]|96)|3(?:7[0135-7]|8[048]|9[0269]))\\d{4}",,,, "2345678",,, [7]], [,, "(?:6(?:5(?:09|1\\d|20)|6(?:0[0-6]|10|2[06-9]|39))\\d|7(?:[37-9]\\d|42|56))\\d{4}",,,, "660234567"], [,, "80(?:02[28]|9\\d\\d)\\d\\d",,,, "8002222",,, [7]], [,, "90(?:02[258]|1(?:23|3[14])|66[136])\\d\\d",,,, "9002222",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LI", 423, "00", "0",,, "0|(10(?:01|20|66))",,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[237-9]"],, "$CC $1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["69"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "870(?:28|87)\\d\\d",,,, "8702812",,, [7]],,, [,, "697(?:42|56|[78]\\d)\\d{4}",,,, "697861234",,, [9]]],
    LK: [, [,, "(?:[1-7]\\d|[89]1)\\d{7}",,,,,,, [9], [7]], [,, "(?:[189]1|2[13-7]|3[1-8]|4[157]|5[12457]|6[35-7])[2-57]\\d{6}",,,, "112345678",,,, [7]], [,, "7[0-25-8]\\d{7}",,,, "712345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LK", 94, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[1-689]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "1973\\d{5}",,,, "197312345"],,, [,,,,,,,,, [-1]]],
    LR: [, [,, "(?:2|33|5\\d|77|88)\\d{7}|[45]\\d{6}",,,,,,, [7, 8, 9]], [,, "(?:2\\d{3}|33333)\\d{4}",,,, "21234567",,, [8, 9]], [,, "(?:(?:330|555|(?:77|88)\\d)\\d|4[67])\\d{5}|5\\d{6}",,,, "770123456",,, [7, 9]], [,,,,,,,,, [-1]], [,, "332(?:02|[34]\\d)\\d{4}",,,, "332021234",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LR", 231, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[45]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3578]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LS: [, [,, "(?:[256]\\d\\d|800)\\d{5}",,,,,,, [8]], [,, "2\\d{7}",,,, "22123456"], [,, "[56]\\d{7}",,,, "50123456"], [,, "800[256]\\d{4}",,,, "80021234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LS", 266, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2568]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LT: [, [,, "(?:[3469]\\d|52|[78]0)\\d{6}",,,,,,, [8]], [,, "(?:3[1478]|4[124-6]|52)\\d{6}",,,, "31234567"], [,, "6\\d{7}",,,, "61234567"], [,, "800\\d{5}",,,, "80012345"], [,, "9(?:0[0239]|10)\\d{5}",,,, "90012345"], [,, "808\\d{5}",,,, "80812345"], [,, "700\\d{5}",,,, "70012345"], [,,,,,,,,, [-1]], "LT", 370, "00", "8",,, "[08]",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["52[0-79]"], "(8-$1)",, 1], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[7-9]"], "8 $1",, 1], [, "(\\d{2})(\\d{6})", "$1 $2", ["37|4(?:[15]|6[1-8])"], "(8-$1)",, 1], [, "(\\d{3})(\\d{5})", "$1 $2", ["[3-6]"], "(8-$1)",, 1]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "70[67]\\d{5}",,,, "70712345"],,, [,,,,,,,,, [-1]]],
    LU: [, [,, "[2457-9]\\d{3,10}|3(?:[0-46-9]\\d{2,9}|5(?:[013-9]\\d{1,8}|2\\d{1,3}))|6\\d{8}",,,,,,, [4, 5, 6, 7, 8, 9, 10, 11]], [,, "(?:(?:2[2-9]|[457]\\d)\\d|3(?:[0-46-9]\\d|5[013-9])|8(?:0[2-9]|[13-9]\\d)|9(?:0[89]|[2-579]\\d))\\d{1,8}",,,, "27123456"], [,, "6(?:[269][18]|5[158]|7[189]|81)\\d{6}",,,, "628123456",,, [9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,, "90[015]\\d{5}",,,, "90012345",,, [8]], [,, "801\\d{5}",,,, "80112345",,, [8]], [,,,,,,,,, [-1]], [,, "20(?:1\\d{5}|[2-689]\\d{1,7})",,,, "20201234",,, [4, 5, 6, 7, 8, 9, 10]], "LU", 352, "00",,,, "(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)",,,, [[, "(\\d{2})(\\d{3})", "$1 $2", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["20[2-689]"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4", ["2(?:[0367]|4[3-8])"],, "$CC $1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["80[01]|90[015]"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["20"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4 $5", ["2(?:[0367]|4[3-8])"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})", "$1 $2 $3 $4", ["2[2-9]|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LV: [, [,, "(?:[268]\\d|90)\\d{6}",,,,,,, [8]], [,, "6\\d{7}",,,, "63123456"], [,, "2\\d{7}",,,, "21234567"], [,, "80\\d{6}",,,, "80123456"], [,, "90\\d{6}",,,, "90123456"], [,, "81\\d{6}",,,, "81123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LV", 371, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[269]|8[01]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    LY: [, [,, "(?:[2569]\\d|71)\\d{7}",,,,,,, [9], [7]], [,, "(?:2[13-5]|5[1347]|6[1-479]|71)\\d{7}",,,, "212345678",,,, [7]], [,, "9[1-6]\\d{7}",,,, "912345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LY", 218, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{7})", "$1-$2", ["[25-79]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MA: [, [,, "[5-8]\\d{8}",,,,,,, [9]], [,, "5(?:2(?:[015-79]\\d|2[02-9]|3[2-57]|4[2-8]|8[235-7])|3(?:[0-48]\\d|[57][2-9]|6[2-8]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}",,,, "520123456"], [,, "(?:6(?:[0-79]\\d|8[0-247-9])|7(?:0[067]|6[1267]|7[017]))\\d{6}",,,, "650123456"], [,, "80\\d{7}",,,, "801234567"], [,, "89\\d{7}",,,, "891234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5924[01]\\d{4}",,,, "592401234"], "MA", 212, "00", "0",,, "0",,,, [[, "(\\d{5})(\\d{4})", "$1-$2", ["5(?:29|38)", "5(?:29|38)[89]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5[45]"], "0$1"], [, "(\\d{4})(\\d{5})", "$1-$2", ["5(?:2[2-489]|3[5-9]|9)|892"], "0$1"], [, "(\\d{2})(\\d{7})", "$1-$2", ["8"], "0$1"], [, "(\\d{3})(\\d{6})", "$1-$2", ["[5-7]"], "0$1"]],, [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MC: [, [,, "(?:(?:[349]|6\\d)\\d\\d|870)\\d{5}",,,,,,, [8, 9]], [,, "(?:870|9[2-47-9]\\d)\\d{5}",,,, "99123456",,, [8]], [,, "(?:(?:3|6\\d)\\d\\d|4(?:4\\d|5[1-9]))\\d{5}",,,, "612345678"], [,, "90\\d{6}",,,, "90123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MC", 377, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["8"]], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[39]"]], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[39]"]], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], [,,,,,,,,, [-1]],,, [,, "870\\d{5}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MD: [, [,, "(?:[235-7]\\d|[89]0)\\d{6}",,,,,,, [8]], [,, "(?:(?:2[1-9]|3[1-79])\\d|5(?:33|5[257]))\\d{5}",,,, "22212345"], [,, "(?:562|6\\d\\d|7(?:[189]\\d|6[07]|7[457-9]))\\d{5}",,,, "62112345"], [,, "800\\d{5}",,,, "80012345"], [,, "90[056]\\d{5}",,,, "90012345"], [,, "808\\d{5}",,,, "80812345"], [,,,,,,,,, [-1]], [,, "3[08]\\d{6}",,,, "30123456"], "MD", 373, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["22|3"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[25-7]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "803\\d{5}",,,, "80312345"],,, [,,,,,,,,, [-1]]],
    ME: [, [,, "(?:20|[3-79]\\d|80\\d?)\\d{6}",,,,,,, [8, 9], [6]], [,, "(?:20[2-8]|3(?:[0-2][2-7]|3[24-7])|4(?:0[2-467]|1[2467])|5(?:[01][2467]|2[2-467]))\\d{5}",,,, "30234567",,, [8], [6]], [,, "6(?:00|3[024]|6[0-25]|[7-9]\\d)\\d{5}",,,, "67622901",,, [8]], [,, "80(?:[0-2578]|9\\d)\\d{5}",,,, "80080002"], [,, "9(?:4[1568]|5[178])\\d{5}",,,, "94515151",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "78[1-49]\\d{5}",,,, "78108780",,, [8]], "ME", 382, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "77[1-9]\\d{5}",,,, "77273012",,, [8]],,, [,,,,,,,,, [-1]]],
    MF: [, [,, "(?:590|69\\d)\\d{6}",,,,,,, [9]], [,, "590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}",,,, "590271234"], [,, "69(?:0\\d\\d|1(?:2[29]|3[0-5]))\\d{4}",,,, "690001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MF", 590, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MG: [, [,, "[23]\\d{8}",,,,,,, [9], [7]], [,, "20(?:(?:2\\d|4[47]|5[3467]|6[279]|8[268]|9[245])\\d|7(?:2[29]|[35]\\d))\\d{4}",,,, "202123456",,,, [7]], [,, "3[2-49]\\d{7}",,,, "321234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "22\\d{7}",,,, "221234567"], "MG", 261, "00", "0",,, "0|([24-9]\\d{6})$", "20$1",,, [[, "(\\d{2})(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["[23]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MH: [, [,, "(?:(?:[256]\\d|45)\\d|329)\\d{4}",,,,,,, [7]], [,, "(?:247|528|625)\\d{4}",,,, "2471234"], [,, "(?:(?:23|54)5|329|45[56])\\d{4}",,,, "2351234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "635\\d{4}",,,, "6351234"], "MH", 692, "011", "1",,, "1",,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-6]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MK: [, [,, "[2-578]\\d{7}",,,,,,, [8], [6, 7]], [,, "(?:2(?:[23]\\d|5[0-24578]|6[01]|82)|3(?:1[3-68]|[23][2-68]|4[23568])|4(?:[23][2-68]|4[3-68]|5[2568]|6[25-8]|7[24-68]|8[4-68]))\\d{5}",,,, "22012345",,,, [6, 7]], [,, "7(?:(?:[0-25-8]\\d|3[2-4]|9[23])\\d|421)\\d{4}",,,, "72345678"], [,, "800\\d{5}",,,, "80012345"], [,, "5[02-9]\\d{6}",,,, "50012345"], [,, "8(?:0[1-9]|[1-9]\\d)\\d{5}",,,, "80123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MK", 389, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[347]"], "0$1"], [, "(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[58]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    ML: [, [,, "(?:[246-9]\\d|50)\\d{6}",,,,,,, [8]], [,, "(?:2(?:0(?:2\\d|7[0-8])|1(?:2[67]|[4-689]\\d))|4(?:0[0-4]|4[1-39])\\d)\\d{4}",,,, "20212345"], [,, "(?:2(?:079|17\\d)|(?:50|[679]\\d|8[239])\\d\\d)\\d{4}",,,, "65012345"], [,, "80\\d{6}",,,, "80012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ML", 223, "00",,,,,,,, [[, "(\\d{4})", "$1", ["67[057-9]|74[045]", "67(?:0[09]|[59]9|77|8[89])|74(?:0[02]|44|55)"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]], [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]], [,,,,,,,,, [-1]],,, [,, "80\\d{6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MM: [, [,, "(?:1|[24-7]\\d)\\d{5,7}|8\\d{6,9}|9(?:[0-46-9]\\d{6,8}|5\\d{6})|2\\d{5}",,,,,,, [6, 7, 8, 9, 10], [5]], [,, "(?:1(?:(?:2\\d|3[56]|[89][0-6])\\d|4(?:2[2-469]|39|6[25]|7[01])|6)|2(?:2(?:00|8[34])|4(?:0\\d|2[246]|39|62|7[01])|51\\d\\d)|4(?:2(?:2\\d\\d|480)|3(?:20\\d|470|56)|420\\d|5470)|5(?:2(?:2\\d\\d?|470)|4(?:2(?:1|86)|470)|522\\d|7(?:20\\d|480)|[89](?:20\\d|470))|6(?:0(?:[23]|88\\d)|(?:124|42[04]|[56]2\\d)\\d|3(?:20\\d|470)|7(?:(?:3\\d|8[01459])\\d|4(?:39|[67]0)))|7(?:0470|1(?:20\\d?|470)|4(?:25\\d|470)|5(?:202|470|96\\d))|8(?:[13](?:2\\d\\d|470)|[25]2\\d\\d))\\d{4}|(?:(?:1[2-6]\\d|4(?:2[24-8]|3[2-7]|[46][2-6]|5[3-5])|5(?:[27][2-8]|3[2-68]|4[24-8]|5[23]|6[2-4]|8[24-7]|9[2-7])|6(?:[19]20|42[03-6]|(?:52|7[45])\\d)|7(?:[04][24-8]|[15][2-7]|22|3[2-4]))\\d|25\\d{2,3}|8(?:[135]2\\d\\d|2(?:2\\d\\d|320)))\\d{3}|(?:2[2-9]|6(?:1[2356]|[24][2-6]|3[24-6]|5[2-4]|6[2-8]|7[235-7]|8[245]|9[24])|8(?:1[2-689]|2[2-8]|3[24]|4[24-7]|5[245]|6[23]))\\d{4}",,,, "1234567",,, [6, 7, 8, 9], [5]], [,, "(?:17[01]|9(?:2(?:[0-4]|[56]\\d\\d)|(?:3(?:[0-36]|4\\d)|(?:6[89]|89)\\d|7(?:3|5[0-2]|[6-9]\\d))\\d|4(?:(?:[0245]\\d|[1379])\\d|88)|5[0-6]|9(?:[089]|[5-7]\\d\\d))\\d)\\d{4}|9[69]1\\d{6}|9[68]\\d{6}",,,, "92123456",,, [7, 8, 9, 10]], [,, "80080(?:[01][1-9]|2\\d)\\d{3}",,,, "8008001234",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:1(?:333|468)|2468)\\d{4}",,,, "13331234",,, [8]], "MM", 95, "00", "0",,, "0",,,, [[, "(\\d)(\\d{2})(\\d{3})", "$1 $2 $3", ["16|2"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[4-7]|8[1-35]"], "0$1"], [, "(\\d)(\\d{3})(\\d{4,6})", "$1 $2 $3", ["9(?:2[0-4]|[35-9]|4[137-9])"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["92"], "0$1"], [, "(\\d)(\\d{5})(\\d{4})", "$1 $2 $3", ["9"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MN: [, [,, "[12]\\d{8,9}|[1257-9]\\d{7}",,,,,,, [8, 9, 10], [4, 5, 6]], [,, "(?:[12](?:1|2[1-37]|(?:3[2-8]|4[2-68]|5[1-4689])\\d?)|5[0568])\\d{6}|[12]2[1-3]\\d{5}",,,, "50123456",,,, [4, 5, 6]], [,, "(?:8(?:[05689]\\d|3[01])|9[013-9]\\d)\\d{5}",,,, "88123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "7[05-8]\\d{6}",,,, "75123456",,, [8]], "MN", 976, "001", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[12]1"], "0$1"], [, "(\\d{4})(\\d{4})", "$1 $2", ["[57-9]"]], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["[12]2[1-3]"], "0$1"], [, "(\\d{4})(\\d{5,6})", "$1 $2", ["[12](?:27|3[2-8]|4[2-68]|5[1-4689])", "[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"], "0$1"], [, "(\\d{5})(\\d{4,5})", "$1 $2", ["[12]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MO: [, [,, "(?:28|[68]\\d)\\d{6}",,,,,,, [8]], [,, "(?:28[2-57-9]|8(?:11|[2-57-9]\\d))\\d{5}",,,, "28212345"], [,, "6(?:[2356]\\d\\d|8(?:[02][5-9]|[1478]\\d|[356][0-4]))\\d{4}",,,, "66123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MO", 853, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[268]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MP: [, [,, "(?:[58]\\d\\d|(?:67|90)0)\\d{7}",,,,,,, [10], [7]], [,, "670(?:2(?:3[3-7]|56|8[5-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\d{4}",,,, "6702345678",,,, [7]], [,, "670(?:2(?:3[3-7]|56|8[5-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\d{4}",,,, "6702345678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "MP", 1, "011", "1",,, "1|([2-9]\\d{6})$", "670$1",, 1,,, [,,,,,,,,, [-1]],, "670", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MQ: [, [,, "(?:596|69\\d)\\d{6}",,,,,,, [9]], [,, "596(?:0[0-7]|10|2[7-9]|3[05-9]|4[0-46-8]|[5-7]\\d|8[09]|9[4-8])\\d{4}",,,, "596301234"], [,, "69(?:6(?:[0-47-9]\\d|5[0-6]|6[0-4])|727)\\d{4}",,,, "696201234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MQ", 596, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[56]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MR: [, [,, "(?:[2-4]\\d\\d|800)\\d{5}",,,,,,, [8]], [,, "(?:25[08]|35\\d|45[1-7])\\d{5}",,,, "35123456"], [,, "[2-4][0-46-9]\\d{6}",,,, "22123456"], [,, "800\\d{5}",,,, "80012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MR", 222, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-48]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MS: [, [,, "(?:(?:[58]\\d\\d|900)\\d\\d|66449)\\d{5}",,,,,,, [10], [7]], [,, "664491\\d{4}",,,, "6644912345",,,, [7]], [,, "66449[2-6]\\d{4}",,,, "6644923456",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "MS", 1, "011", "1",,, "1|(4\\d{6})$", "664$1",,,,, [,,,,,,,,, [-1]],, "664", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MT: [, [,, "(?:(?:[2579]\\d\\d|800)\\d|3550)\\d{4}",,,,,,, [8]], [,, "2(?:0(?:[169]\\d|3[1-4])|[1-357]\\d\\d)\\d{4}",,,, "21001234"], [,, "(?:7(?:210|[79]\\d\\d)|9(?:2(?:1[01]|31)|69[67]|8(?:1[1-3]|89|97)|9\\d\\d))\\d{4}",,,, "96961234"], [,, "800[3467]\\d{4}",,,, "80071234"], [,, "5(?:0(?:0(?:37|43)|(?:6\\d|70|9[0168])\\d)|[12]\\d0[1-5])\\d{3}",,,, "50037123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3550\\d{4}",,,, "35501234"], "MT", 356, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2357-9]"]]],, [,, "7117\\d{4}",,,, "71171234"],,, [,,,,,,,,, [-1]], [,, "501\\d{5}",,,, "50112345"],,, [,,,,,,,,, [-1]]],
    MU: [, [,, "(?:[2-468]|5\\d)\\d{6}",,,,,,, [7, 8]], [,, "(?:2(?:[03478]\\d|1[0-7]|6[0-79])|4(?:[013568]\\d|2[4-7])|54(?:4\\d|71)|6\\d\\d|8(?:14|3[129]))\\d{4}",,,, "54480123"], [,, "5(?:(?:2[589]|7\\d|9[0-8])\\d|4(?:2[1-389]|[489]\\d|7[1-9])|8(?:[0-689]\\d|7[15-8]))\\d{4}",,,, "52512345",,, [8]], [,, "80[0-2]\\d{4}",,,, "8001234",,, [7]], [,, "30\\d{5}",,,, "3012345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3(?:20|9\\d)\\d{4}",,,, "3201234",,, [7]], "MU", 230, "0(?:0|[24-7]0|3[03])",,,,,, "020",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-46]|8[013]"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["5"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MV: [, [,, "(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}",,,,,,, [7, 10]], [,, "(?:3(?:0[0-3]|3[0-59])|6(?:[57][02468]|6[024-68]|8[024689]))\\d{4}",,,, "6701234",,, [7]], [,, "(?:46[46]|(?:7[2-9]|9[14-9])\\d)\\d{4}",,,, "7712345",,, [7]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "900\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MV", 960, "0(?:0|19)",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[3467]|9[14-9]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "4[05]0\\d{4}",,,, "4001234",,, [7]],,, [,,,,,,,,, [-1]]],
    MW: [, [,, "1\\d{6}(?:\\d{2})?|(?:[23]1|77|88|99)\\d{7}",,,,,,, [7, 9]], [,, "(?:1[2-9]|21\\d\\d)\\d{5}",,,, "1234567"], [,, "(?:111|(?:77|88|99)\\d)\\d{6}",,,, "991234567",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "31\\d{7}",,,, "310123456",,, [9]], "MW", 265, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["1[2-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[17-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MX: [, [,, "(?:1\\d|[2-9])\\d{9}",,,,,,, [10, 11], [7, 8]], [,, "(?:2(?:0[01]|2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\d{7}",,,, "2221234567",,, [10], [7, 8]], [,, "1(?:2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\d{7}",,,, "12221234567",,, [11]], [,, "8(?:00|88)\\d{7}",,,, "8001234567",,, [10]], [,, "900\\d{7}",,,, "9001234567",,, [10]], [,, "300\\d{7}",,,, "3001234567",,, [10]], [,, "500\\d{7}",,,, "5001234567",,, [10]], [,,,,,,,,, [-1]], "MX", 52, "0[09]", "01",,, "0[12]|04[45]([2-9]\\d{9})$", "1$1", "00",, [[, "(\\d{5})", "$1", ["53"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"], "01 $1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"], "01 $1",, 1], [, "(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 $3 $4", ["1(?:33|5[56]|81)"], "044 $1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 $3 $4", ["1"], "044 $1"]], [[, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"], "01 $1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"], "01 $1",, 1], [, "(\\d)(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3 $4", ["1(?:33|5[56]|81)"]], [, "(\\d)(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["1"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MY: [, [,, "(?:1\\d\\d?|3\\d|[4-9])\\d{7}",,,,,,, [8, 9, 10], [6, 7]], [,, "(?:3(?:2[0-36-9]|3[0-368]|4[0-278]|5[0-24-8]|6[0-467]|7[1246-9]|8\\d|9[0-57])\\d|4(?:2[0-689]|[3-79]\\d|8[1-35689])|5(?:2[0-589]|[3468]\\d|5[0-489]|7[1-9]|9[23])|6(?:2[2-9]|3[1357-9]|[46]\\d|5[0-6]|7[0-35-9]|85|9[015-8])|7(?:[2579]\\d|3[03-68]|4[0-8]|6[5-9]|8[0-35-9])|8(?:[24][2-8]|3[2-5]|5[2-7]|6[2-589]|7[2-578]|[89][2-9])|9(?:0[57]|13|[25-7]\\d|[3489][0-8]))\\d{5}",,,, "323856789",,, [8, 9], [6, 7]], [,, "1(?:(?:0(?:[23568]\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\d\\d|6(?:0[5-9]|[1-9]\\d))|(?:[23679][2-9]|59\\d)\\d)\\d|4(?:[235-9]\\d\\d|400)|8(?:(?:1[23]|[236]\\d|5[7-9]|7[016-9]|9[0-8])\\d|4(?:[06]\\d|7[0-4])|8(?:[01]\\d|[27][0-4])))\\d{4}",,,, "123456789",,, [9, 10]], [,, "1[378]00\\d{6}",,,, "1300123456",,, [10]], [,, "1600\\d{6}",,,, "1600123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "154(?:6(?:0\\d|1[0-3])|8(?:[25]1|4[0189]|7[0-4679]))\\d{4}",,,, "1546012345",,, [10]], "MY", 60, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["[4-79]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1-$2 $3", ["1(?:[0249]|[367][2-9]|8[1-9])|8"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1-$2 $3", ["3"], "0$1"], [, "(\\d)(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3-$4", ["1[36-8]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2 $3", ["15"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2 $3", ["1"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    MZ: [, [,, "(?:2|8\\d)\\d{7}",,,,,,, [8, 9]], [,, "2(?:[1346]\\d|5[0-2]|[78][12]|93)\\d{5}",,,, "21123456",,, [8]], [,, "8[2-7]\\d{7}",,,, "821234567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MZ", 258, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2|8[2-7]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NA: [, [,, "[68]\\d{7,8}",,,,,,, [8, 9]], [,, "6(?:1(?:[02-4]\\d\\d|17)|2(?:17|54\\d|69|70)|3(?:17|2[0237]\\d|34|6[289]|7[01]|81)|4(?:17|(?:27|41|5[25])\\d|69|7[01])|5(?:17|2[236-8]\\d|69|7[01])|6(?:17|26\\d|38|42|69|7[01])|7(?:17|(?:2[2-4]|30)\\d|6[89]|7[01]))\\d{4}|6(?:1(?:2[2-7]|3[01378]|4[0-4]|69|7[014])|25[0-46-8]|32\\d|4(?:2[0-27]|4[016]|5[0-357])|52[02-9]|62[56]|7(?:2[2-69]|3[013]))\\d{4}",,,, "61221234"], [,, "(?:60|8[1245])\\d{7}",,,, "811234567",,, [9]], [,, "80\\d{7}",,,, "800123456",,, [9]], [,, "8701\\d{5}",,,, "870123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "8(?:3\\d\\d|86)\\d{5}",,,, "88612345"], "NA", 264, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["6"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["87"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NC: [, [,, "[2-57-9]\\d{5}",,,,,,, [6]], [,, "(?:2[03-9]|3[0-5]|4[1-7]|88)\\d{4}",,,, "201234"], [,, "(?:5[0-4]|[79]\\d|8[0-79])\\d{4}",,,, "751234"], [,,,,,,,,, [-1]], [,, "36\\d{4}",,,, "366711"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NC", 687, "00",,,,,,,, [[, "(\\d{3})", "$1", ["5[6-8]"]], [, "(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[2-57-9]"]]], [[, "(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[2-57-9]"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NE: [, [,, "[0289]\\d{7}",,,,,,, [8]], [,, "2(?:0(?:20|3[1-7]|4[13-5]|5[14]|6[14578]|7[1-578])|1(?:4[145]|5[14]|6[14-68]|7[169]|88))\\d{4}",,,, "20201234"], [,, "(?:8[04589]|9\\d)\\d{6}",,,, "93123456"], [,, "08\\d{6}",,,, "08123456"], [,, "09\\d{6}",,,, "09123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NE", 227, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["08"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[089]|2[01]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NF: [, [,, "[13]\\d{5}",,,,,,, [6], [5]], [,, "(?:1(?:06|17|28|39)|3[0-2]\\d)\\d{3}",,,, "106609",,,, [5]], [,, "3[58]\\d{4}",,,, "381234",,,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NF", 672, "00",,,, "([0-258]\\d{4})$", "3$1",,, [[, "(\\d{2})(\\d{4})", "$1 $2", ["1"]], [, "(\\d)(\\d{5})", "$1 $2", ["3"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NG: [, [,, "[78]\\d{10,13}|[7-9]\\d{9}|[1-9]\\d{7}|[124-7]\\d{6}",,,,,,, [7, 8, 10, 11, 12, 13, 14], [5, 6]], [,, "(?:(?:[1-356]\\d|4[02-8]|7[0-79]|8[2-9])\\d|9(?:0[3-9]|[1-9]\\d))\\d{5}|(?:[12]\\d|4[147]|5[14579]|6[1578]|7[0-3578])\\d{5}",,,, "18040123",,, [7, 8], [5, 6]], [,, "(?:70(?:[1-689]\\d|7[0-3])|8(?:0(?:1[01]|[2-9]\\d)|1(?:[0-8]\\d|9[01]))|90[235-9]\\d)\\d{6}",,,, "8021234567",,, [10]], [,, "800\\d{7,11}",,,, "80017591759",,, [10, 11, 12, 13, 14]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NG", 234, "009", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["78"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]|9(?:0[3-9]|[1-9])"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[3-7]|8[2-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[7-9]"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["[78]"], "0$1"], [, "(\\d{3})(\\d{5})(\\d{5,6})", "$1 $2 $3", ["[78]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "700\\d{7,11}",,,, "7001234567",,, [10, 11, 12, 13, 14]],,, [,,,,,,,,, [-1]]],
    NI: [, [,, "(?:1800|[25-8]\\d{3})\\d{4}",,,,,,, [8]], [,, "2\\d{7}",,,, "21234567"], [,, "(?:5(?:5[0-7]|[78]\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\d)\\d)\\d{5}",,,, "81234567"], [,, "1800\\d{4}",,,, "18001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NI", 505, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[125-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NL: [, [,, "(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8])|[89]\\d{0,3})\\d{6}|1\\d{4,5}",,,,,,, [5, 6, 7, 8, 9, 10]], [,, "(?:1(?:[035]\\d|1[13-578]|6[124-8]|7[24]|8[0-467])|2(?:[0346]\\d|2[2-46-9]|5[125]|9[479])|3(?:[03568]\\d|1[3-8]|2[01]|4[1-8])|4(?:[0356]\\d|1[1-368]|7[58]|8[15-8]|9[23579])|5(?:[0358]\\d|[19][1-9]|2[1-57-9]|4[13-8]|6[126]|7[0-3578])|7\\d\\d)\\d{6}",,,, "101234567",,, [9]], [,, "6[1-58]\\d{7}",,,, "612345678",,, [9]], [,, "800\\d{4,7}",,,, "8001234",,, [7, 8, 9, 10]], [,, "90[069]\\d{4,7}",,,, "9061234",,, [7, 8, 9, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:85|91)\\d{7}",,,, "851234567",,, [9]], "NL", 31, "00", "0",,, "0",,,, [[, "(\\d{4})", "$1", ["1[238]|[34]"]], [, "(\\d{2})(\\d{3,4})", "$1 $2", ["14"]], [, "(\\d{6})", "$1", ["1"]], [, "(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], [, "(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-57-9]"], "0$1"]], [[, "(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], [, "(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-57-9]"], "0$1"]], [,, "66\\d{7}",,,, "662345678",,, [9]],,, [,, "140(?:1(?:[035]|[16-8]\\d)|2(?:[0346]|[259]\\d)|3(?:[03568]|[124]\\d)|4(?:[0356]|[17-9]\\d)|5(?:[0358]|[124679]\\d)|7\\d|8[458])",,,,,,, [5, 6]], [,, "140(?:1(?:[035]|[16-8]\\d)|2(?:[0346]|[259]\\d)|3(?:[03568]|[124]\\d)|4(?:[0356]|[17-9]\\d)|5(?:[0358]|[124679]\\d)|7\\d|8[458])|8[478]\\d{7}",,,, "14020",,, [5, 6, 9]],,, [,,,,,,,,, [-1]]],
    NO: [, [,, "(?:0|[2-9]\\d{3})\\d{4}",,,,,,, [5, 8]], [,, "(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\d{6}",,,, "21234567",,, [8]], [,, "(?:4[015-8]|5[89]|9\\d)\\d{6}",,,, "40612345",,, [8]], [,, "80[01]\\d{5}",,,, "80012345",,, [8]], [,, "82[09]\\d{5}",,,, "82012345",,, [8]], [,, "810(?:0[0-6]|[2-8]\\d)\\d{3}",,,, "81021234",,, [8]], [,, "880\\d{5}",,,, "88012345",,, [8]], [,, "85[0-5]\\d{5}",,,, "85012345",,, [8]], "NO", 47, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[489]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[235-7]"]]],, [,,,,,,,,, [-1]], 1, "[02-689]|7[0-8]", [,,,,,,,,, [-1]], [,, "(?:0\\d|81(?:0(?:0[7-9]|1\\d)|5\\d\\d))\\d{3}",,,, "01234"],,, [,, "81[23]\\d{5}",,,, "81212345",,, [8]]],
    NP: [, [,, "9\\d{9}|[1-9]\\d{7}",,,,,,, [8, 10], [6, 7]], [,, "(?:1[0-6]\\d|(?:2[13-79]|3[135-8]|4[146-9]|5[135-7]|6[13-9]|7[15-9]|8[1-46-9]|9[1-79])[2-6])\\d{5}",,,, "14567890",,, [8], [6, 7]], [,, "9(?:6[0-3]|7[245]|8[0-24-68])\\d{7}",,,, "9841234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NP", 977, "00", "0",,, "0",,,, [[, "(\\d)(\\d{7})", "$1-$2", ["1[2-6]"], "0$1"], [, "(\\d{2})(\\d{6})", "$1-$2", ["[1-8]|9(?:[1-579]|6[2-6])"], "0$1"], [, "(\\d{3})(\\d{7})", "$1-$2", ["9"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NR: [, [,, "(?:444|55\\d|888)\\d{4}",,,,,,, [7]], [,, "(?:444|888)\\d{4}",,,, "4441234"], [,, "55[4-9]\\d{4}",,,, "5551234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NR", 674, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[458]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NU: [, [,, "(?:[47]|888\\d)\\d{3}",,,,,,, [4, 7]], [,, "[47]\\d{3}",,,, "7012",,, [4]], [,, "888[4-9]\\d{3}",,,, "8884012",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NU", 683, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    NZ: [, [,, "[28]\\d{7,9}|[346]\\d{7}|(?:508|[79]\\d)\\d{6,7}",,,,,,, [8, 9, 10], [7]], [,, "(?:24099|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\\d{3})\\d{3}",,,, "32345678",,, [8], [7]], [,, "2(?:[0-28]\\d?|[79])\\d{7}|21\\d{6}",,,, "211234567"], [,, "508\\d{6,7}|80\\d{6,8}",,,, "800123456"], [,, "90\\d{6,7}",,,, "900123456",,, [8, 9]], [,,,,,,,,, [-1]], [,, "70\\d{7}",,,, "701234567",,, [9]], [,,,,,,,,, [-1]], "NZ", 64, "0(?:0|161)", "0",,, "0",, "00",, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[89]0"], "0$1"], [, "(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["24|[346]|7[2-57-9]|9[2-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:10|74)|[59]|80"], "0$1"], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["2[028]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,5})", "$1 $2 $3", ["2(?:[169]|7[0-35-9])|7|86"], "0$1"]],, [,, "[28]6\\d{6,7}",,,, "26123456",,, [8, 9]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    OM: [, [,, "(?:[279]\\d{3}|500|8007\\d?)\\d{4}",,,,,,, [7, 8, 9]], [,, "2[2-6]\\d{6}",,,, "23123456",,, [8]], [,, "(?:7[129]\\d|9(?:0[1-9]|[1-9]\\d))\\d{5}",,,, "92123456",,, [8]], [,, "(?:500|8007\\d?)\\d{4}",,,, "80071234"], [,, "900\\d{5}",,,, "90012345",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "OM", 968, "00",,,,,,,, [[, "(\\d{3})(\\d{4,6})", "$1 $2", ["[58]"]], [, "(\\d{2})(\\d{6})", "$1 $2", ["2"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[79]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PA: [, [,, "(?:[1-57-9]|6\\d)\\d{6}",,,,,,, [7, 8]], [,, "(?:1(?:0\\d|1[479]|2[37]|3[0137]|4[17]|5[05]|[68][58]|7[0167]|9[39])|2(?:[0235-79]\\d|1[0-7]|4[013-9]|8[026-9])|3(?:[089]\\d|1[014-7]|2[0-35]|33|4[0-579]|55|6[068]|7[06-8])|4(?:00|3[0-579]|4\\d|7[0-57-9])|5(?:[01]\\d|2[0-7]|[56]0|79)|7(?:0[09]|2[0-26-8]|3[03]|4[04]|5[05-9]|6[05]|7[0-24-9]|8[7-9]|90)|8(?:09|2[89]|3\\d|4[0-24-689]|5[014]|8[02])|9(?:0[5-9]|1[0135-8]|2[036-9]|3[35-79]|40|5[0457-9]|6[05-9]|7[04-9]|8[35-8]|9\\d))\\d{4}",,,, "2001234",,, [7]], [,, "(?:1[16]1|21[89]|6(?:[02-9]\\d|1[0-6])\\d|8(?:1[01]|7[23]))\\d{4}",,,, "61234567"], [,, "800\\d{4}",,,, "8001234",,, [7]], [,, "(?:8(?:22|55|60|7[78]|86)|9(?:00|81))\\d{4}",,,, "8601234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PA", 507, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[1-57-9]"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["6"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PE: [, [,, "(?:[14-8]|9\\d)\\d{7}",,,,,,, [8, 9], [6, 7]], [,, "(?:1\\d|4[1-4]|5[1-46]|6[1-7]|7[2-46]|8[2-4])\\d{6}",,,, "11234567",,, [8], [6, 7]], [,, "9\\d{8}",,,, "912345678",,, [9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,, "805\\d{5}",,,, "80512345",,, [8]], [,, "801\\d{5}",,,, "80112345",,, [8]], [,, "80[24]\\d{5}",,,, "80212345",,, [8]], [,,,,,,,,, [-1]], "PE", 51, "19(?:1[124]|77|90)00", "0", " Anexo ",, "0",,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["80"], "(0$1)"], [, "(\\d)(\\d{7})", "$1 $2", ["1"], "(0$1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["[4-8]"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PF: [, [,, "[48]\\d{7}|4\\d{5}",,,,,,, [6, 8]], [,, "4(?:[09][4-689]\\d|4)\\d{4}",,,, "40412345"], [,, "8[79]\\d{6}",,,, "87123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PF", 689, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["44"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[48]"]]],, [,,,,,,,,, [-1]],,, [,, "44\\d{4}",,,,,,, [6]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PG: [, [,, "(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}",,,,,,, [7, 8]], [,, "(?:(?:3[0-2]|4[257]|5[34]|9[78])\\d|64[1-9]|77(?:[0-24]\\d|30)|85[02-46-9])\\d{4}",,,, "3123456"], [,, "(?:7(?:[0-689]\\d|75)|81\\d)\\d{5}",,,, "70123456",,, [8]], [,, "180\\d{4}",,,, "1801234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "2(?:0[0-47]|7[568])\\d{4}",,,, "2751234",,, [7]], "PG", 675, "00|140[1-3]",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["18|[2-69]|85"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[78]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PH: [, [,, "(?:1800\\d{2,4}|2|[89]\\d{4})\\d{5}|[3-8]\\d{8}|[28]\\d{7}",,,,,,, [6, 8, 9, 10, 11, 12, 13], [4, 5, 7]], [,, "(?:2\\d(?:\\d{2})?|(?:3[2-68]|4[2-9]|5[2-6]|6[2-58]|7[24578])\\d{3}|88(?:22\\d\\d|42))\\d{4}|8[2-8]\\d{7}",,,, "21234567",,, [6, 8, 9, 10], [4, 5, 7]], [,, "(?:81[37]|9(?:0[5-9]|1[024-9]|2[0-35-9]|3[02-9]|4[235-9]|5[056]|6[5-7]|7[3-79]|89|9[4-9]))\\d{7}",,,, "9051234567",,, [10]], [,, "1800\\d{7,9}",,,, "180012345678",,, [11, 12, 13]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PH", 63, "00", "0",,, "0",,,, [[, "(\\d)(\\d{5})", "$1 $2", ["2"], "(0$1)"], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "(0$1)"], [, "(\\d{4})(\\d{4,6})", "$1 $2", ["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|5(?:22|44)|642|8(?:62|8[245])", "3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"], "(0$1)"], [, "(\\d{5})(\\d{4})", "$1 $2", ["346|4(?:27|9[35])|883", "3469|4(?:279|9(?:30|56))|8834"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|8[2-8]"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PK: [, [,, "(?:122|[24-8]\\d{4,5}|9(?:[013-9]\\d{2,4}|2(?:[01]\\d\\d|2(?:[025-8]\\d|1[01]))\\d))\\d{6}|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}",,,,,,, [8, 9, 10, 11, 12], [5, 6, 7]], [,, "2(?:(?:1[2-9]\\d|[25][2-9])\\d{6}|(?:3[2358]|4[2-4]|9[2-8])[2-9]\\d{5,6})|4(?:(?:[0146-9][2-9]|2[2-9]\\d)\\d{6}|5[3479][2-9]\\d{5,6})|5(?:(?:[1-35-7][2-9]|8[126]\\d)\\d{6}|4[2-467][2-9]\\d{5,6})|6(?:0[468][2-9]\\d{5,6}|[1-8][2-9]\\d{6})|7(?:[14][2-9]\\d{6}|2[236][2-9]\\d{5,6})|8(?:[16][2-9]\\d{6}|(?:2[2-689]|3[23578]|4[3478]|5[2356])[2-9]\\d{5,6})|9(?:1[2-9]\\d{6}|(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])[2-9]\\d{5,6})",,,, "2123456789",,, [9, 10], [5, 6, 7, 8]], [,, "3(?:[014]\\d|2[0-5]|3[0-7]|55|64)\\d{7}",,,, "3012345678",,, [10]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,, "900\\d{5}",,,, "90012345",,, [8]], [,,,,,,,,, [-1]], [,, "122\\d{6}",,,, "122044444",,, [9]], [,,,,,,,,, [-1]], "PK", 92, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["[89]0"], "0$1"], [, "(\\d{4})(\\d{5})", "$1 $2", ["1"]], [, "(\\d{2})(\\d{7,8})", "$1 $2", ["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"], "(0$1)"], [, "(\\d{3})(\\d{6,7})", "$1 $2", ["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])", "(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356]))[2-9]|9(?:2(?:2[2-9]|[3-8])|(?:3[27-9]|4[2-6]|6[3569])[2-9]|9(?:[25-7][2-9]|8))"], "(0$1)"], [, "(\\d{5})(\\d{5})", "$1 $2", ["58"], "(0$1)"], [, "(\\d{3})(\\d{7})", "$1 $2", ["3"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[24-9]"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:2(?:[125]|3[2358]|4[2-4]|9[2-8])|4(?:[0-246-9]|5[3479])|5(?:[1-35-7]|4[2-467])|6(?:0[468]|[1-8])|7(?:[14]|2[236])|8(?:[16]|2[2-689]|3[23578]|4[3478]|5[2356])|9(?:1|22|3[27-9]|4[2-6]|6[3569]|9[2-7]))111\\d{6}",,,, "21111825888",,, [11, 12]],,, [,,,,,,,,, [-1]]],
    PL: [, [,, "[1-9]\\d{6}(?:\\d{2})?|6\\d{5}(?:\\d{2})?",,,,,,, [6, 7, 8, 9]], [,, "(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])\\d{7}|(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\\d{3}",,,, "123456789",,, [7, 9]], [,, "(?:45|5[0137]|6[069]|7[2389]|88)\\d{7}",,,, "512345678",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "70[01346-8]\\d{6}",,,, "701234567",,, [9]], [,, "801\\d{6}",,,, "801234567",,, [9]], [,,,,,,,,, [-1]], [,, "39\\d{7}",,,, "391234567",,, [9]], "PL", 48, "00",,,,,,,, [[, "(\\d{5})", "$1", ["19"]], [, "(\\d{3})(\\d{3})", "$1 $2", ["11|64"]], [, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1", "(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]], [, "(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["64"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["39|45|5[0137]|6[0469]|7[02389]|8[08]"]], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[2-8]|[2-8]|9[145]"]]],, [,, "64\\d{4,7}",,,, "641234567"],,, [,,,,,,,,, [-1]], [,, "804\\d{6}",,,, "804123456",,, [9]],,, [,,,,,,,,, [-1]]],
    PM: [, [,, "[45]\\d{5}",,,,,,, [6]], [,, "(?:4[1-3]|50)\\d{4}",,,, "430123"], [,, "(?:4[02-4]|5[05])\\d{4}",,,, "551234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PM", 508, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[45]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PR: [, [,, "(?:[589]\\d\\d|787)\\d{7}",,,,,,, [10], [7]], [,, "(?:787|939)[2-9]\\d{6}",,,, "7872345678",,,, [7]], [,, "(?:787|939)[2-9]\\d{6}",,,, "7872345678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "PR", 1, "011", "1",,, "1",,, 1,,, [,,,,,,,,, [-1]],, "787|939", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PS: [, [,, "(?:(?:1\\d|5)\\d\\d|[2489]2)\\d{6}",,,,,,, [8, 9, 10], [7]], [,, "(?:22[2-47-9]|42[45]|82[01458]|92[369])\\d{5}",,,, "22234567",,, [8], [7]], [,, "5[69]\\d{7}",,,, "599123456",,, [9]], [,, "1800\\d{6}",,,, "1800123456",,, [10]], [,,,,,,,,, [-1]], [,, "1700\\d{6}",,,, "1700123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PS", 970, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2489]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PT: [, [,, "(?:[26-9]\\d|30)\\d{7}",,,,,,, [9]], [,, "2(?:[12]\\d|[35][1-689]|4[1-59]|6[1-35689]|7[1-9]|8[1-69]|9[1256])\\d{6}",,,, "212345678"], [,, "9(?:[1-36]\\d\\d|480)\\d{5}",,,, "912345678"], [,, "80[02]\\d{6}",,,, "800123456"], [,, "(?:6(?:0[178]|4[68])\\d|76(?:0[1-57]|1[2-47]|2[237]))\\d{5}",,,, "760123456"], [,, "80(?:8\\d|9[1579])\\d{5}",,,, "808123456"], [,, "884[0-4689]\\d{5}",,,, "884123456"], [,, "30\\d{7}",,,, "301234567"], "PT", 351, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["2[12]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[236-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "70(?:7\\d|8[17])\\d{5}",,,, "707123456"],,, [,, "600\\d{6}",,,, "600110000"]],
    PW: [, [,, "(?:[25-8]\\d\\d|345|488|900)\\d{4}",,,,,,, [7]], [,, "(?:2(?:55|77)|345|488|5(?:35|44|87)|6(?:22|54|79)|7(?:33|47)|8(?:24|55|76)|900)\\d{4}",,,, "2771234"], [,, "(?:6[2-4689]0|77\\d|88[0-4])\\d{4}",,,, "6201234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PW", 680, "01[12]",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    PY: [, [,, "(?:[2-46-9]\\d|5[0-8])\\d{7}|[2-9]\\d{5,7}",,,,,,, [6, 7, 8, 9], [5]], [,, "(?:2(?:1\\d|2[4-68]|7[15]|9[1-5])|5(?:[1-4]\\d|5[02-4])|6(?:1\\d|3[1-3]|44|7[1-46-8]))\\d{5,6}|3(?:(?:18|3[167]|4[2357]|51)\\d{5,6}|[289]\\d{5,7})|4(?:[1246-8]\\d{5,7}|(?:3[12]|5[13]|9[1-47])\\d{5,6})|7(?:[1-3]\\d{5,7}|(?:4[0-4]|6[1-578]|75|8[0-8])\\d{5,6})|8(?:[1-36]\\d{5,7}|58\\d{5,6})|[26]1\\d{5}",,,, "212345678",,, [7, 8, 9], [5, 6]], [,, "9(?:51|6[129]|[78][1-6]|9[1-5])\\d{6}",,,, "961456789",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "8700[0-4]\\d{4}",,,, "870012345",,, [9]], "PY", 595, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,6})", "$1 $2", ["[2-9]0"], "0$1"], [, "(\\d{2})(\\d{5})", "$1 $2", ["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"], "(0$1)"], [, "(\\d{3})(\\d{4,5})", "$1 $2", ["2[279]|3[13-5]|4[359]|5|6[347]|7[46-8]|85"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["87"]], [, "(\\d{3})(\\d{6})", "$1 $2", ["9"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "[2-9]0\\d{4,7}",,,, "201234567"],,, [,,,,,,,,, [-1]]],
    QA: [, [,, "(?:(?:2|[3-7]\\d)\\d\\d|800)\\d{4}",,,,,,, [7, 8]], [,, "4[04]\\d{6}",,,, "44123456",,, [8]], [,, "[35-7]\\d{7}",,,, "33123456",,, [8]], [,, "800\\d{4}",,,, "8001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "QA", 974, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["2[126]|8"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[3-7]"]]],, [,, "2(?:[12]\\d|61)\\d{4}",,,, "2123456",,, [7]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    RE: [, [,, "(?:26|[68]\\d)\\d{7}",,,,,,, [9]], [,, "262\\d{6}",,,, "262161234"], [,, "69(?:2\\d\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\d|5[05]|6[0-26]|7[0-27]|8[0-38]|9[0-479]))\\d{4}",,,, "692123456"], [,, "80\\d{7}",,,, "801234567"], [,, "89[1-37-9]\\d{6}",,,, "891123456"], [,, "8(?:1[019]|2[0156]|84|90)\\d{6}",,,, "810123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RE", 262, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[268]"], "0$1"]],, [,,,,,,,,, [-1]], 1, "262|69|8", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    RO: [, [,, "(?:[237]\\d|[89]0)\\d{7}|[23]\\d{5}",,,,,,, [6, 9]], [,, "[23][13-6]\\d{7}|(?:2(?:19\\d|[3-6]\\d9)|31\\d\\d)\\d\\d",,,, "211234567"], [,, "7(?:(?:[02-7]\\d|8[03-8]|99)\\d|1(?:[01]\\d|20))\\d{5}",,,, "712034567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "90[036]\\d{6}",,,, "900123456",,, [9]], [,, "801\\d{6}",,,, "801123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RO", 40, "00", "0", " int ",, "0",,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["2[3-6]", "2[3-6]\\d9"], "0$1"], [, "(\\d{2})(\\d{4})", "$1 $2", ["219|31"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23]1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[237-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "37\\d{7}",,,, "372123456",,, [9]],,, [,,,,,,,,, [-1]]],
    RS: [, [,, "[127]\\d{6,11}|3(?:[0-79]\\d{5,10}|8(?:[02-9]\\d{4,9}|1\\d{4,5}))|6\\d{7,9}|800\\d{3,9}|90\\d{4,8}|7\\d{5}",,,,,,, [6, 7, 8, 9, 10, 11, 12], [4, 5]], [,, "(?:1(?:[02-9][2-9]|1[1-9])\\d|2(?:[0-24-7][2-9]\\d|[389](?:0[2-9]|[2-9]\\d))|3(?:[0-8][2-9]\\d|9(?:0[2-9]|[2-9]\\d)))\\d{3,8}",,,, "10234567",,, [7, 8, 9, 10, 11, 12], [4, 5, 6]], [,, "6(?:[0-689]|7\\d)\\d{6,7}",,,, "601234567",,, [8, 9, 10]], [,, "800\\d{3,9}",,,, "80012345"], [,, "(?:78\\d|90[0169])\\d{3,7}",,,, "90012345",,, [6, 7, 8, 9, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RS", 381, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,9})", "$1 $2", ["(?:2[389]|39)0|[7-9]"], "0$1"], [, "(\\d{2})(\\d{5,10})", "$1 $2", ["[1-36]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "7[06]\\d{4,10}",,,, "700123456"],,, [,,,,,,,,, [-1]]],
    RU: [, [,, "[347-9]\\d{9}",,,,,,, [10], [7]], [,, "(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\d{7}",,,, "3011234567",,,, [7]], [,, "9\\d{9}",,,, "9123456789"], [,, "80[04]\\d{7}",,,, "8001234567"], [,, "80[39]\\d{7}",,,, "8091234567"], [,,,,,,,,, [-1]], [,, "808\\d{7}",,,, "8081234567"], [,,,,,,,,, [-1]], "RU", 7, "810", "8",,, "8",, "8~10",, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1-$2-$3", ["[0-79]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[3489]"], "8 ($1)",, 1]], [[, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[3489]"], "8 ($1)",, 1]], [,,,,,,,,, [-1]], 1, "3[04-689]|[489]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    RW: [, [,, "(?:06|[27]\\d\\d|[89]00)\\d{6}",,,,,,, [8, 9]], [,, "(?:06|2[258]\\d)\\d{6}",,,, "250123456"], [,, "7[238]\\d{7}",,,, "720123456",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "900\\d{6}",,,, "900123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RW", 250, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[7-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SA: [, [,, "(?:(?:[15]|8\\d)\\d|92)\\d{7}",,,,,,, [9, 10], [7]], [,, "1(?:1\\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\\d{6}",,,, "112345678",,, [9], [7]], [,, "5(?:[013-689]\\d|7[0-36-8])\\d{6}",,,, "512345678",,, [9]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "925\\d{6}",,,, "925012345",,, [9]], [,, "920\\d{6}",,,, "920012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SA", 966, "00", "0",,, "0",,,, [[, "(\\d{4})(\\d{5})", "$1 $2", ["9"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["81"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "811\\d{7}",,,, "8110123456",,, [10]],,, [,,,,,,,,, [-1]]],
    SB: [, [,, "(?:[1-6]|[7-9]\\d\\d)\\d{4}",,,,,,, [5, 7]], [,, "(?:1[4-79]|[23]\\d|4[0-2]|5[03]|6[0-37])\\d{3}",,,, "40123",,, [5]], [,, "(?:48|(?:(?:7[1-9]|8[4-9])\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\d)\\d{3}",,,, "7421234"], [,, "1[38]\\d{3}",,,, "18123",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5[12]\\d{3}",,,, "51123",,, [5]], "SB", 677, "0[01]",,,,,,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["7|8[4-9]|9(?:[1-8]|9[0-8])"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SC: [, [,, "(?:(?:[249]\\d|64)\\d\\d|8000)\\d{3}",,,,,,, [7]], [,, "4[2-46]\\d{5}",,,, "4217123"], [,, "2[5-8]\\d{5}",,,, "2510123"], [,, "8000\\d{3}",,,, "8000000"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:64\\d|9(?:5\\d|71))\\d{4}",,,, "6412345"], "SC", 248, "0(?:[02]|10?)",,,,,, "00",, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[246]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SD: [, [,, "[19]\\d{8}",,,,,,, [9]], [,, "1(?:5[3-7]|8[35-7])\\d{6}",,,, "153123456"], [,, "(?:1[0-2]|9[0-3569])\\d{7}",,,, "911231234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SD", 249, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[19]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SE: [, [,, "(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}",,,,,,, [6, 7, 8, 9, 10, 12]], [,, "1(?:0[1-8]\\d{6}|(?:[13689]\\d|2[0-35]|4[0-4]|5[0-25-9]|7[13-6])\\d{5,6})|(?:2(?:[136]\\d|2[0-7]|4[0136-8]|5[0138]|7[018]|8[01]|9[0-57])|3(?:0[0-4]|[1356]\\d|2[0-25]|4[056]|7[0-2]|8[0-3]|9[023])|5(?:0[0-6]|[15][0-5]|2[0-68]|3[0-4]|4\\d|6[03-5]|7[013]|8[0-79]|9[01]))\\d{5,6}|4(?:[0246]\\d{5,7}|(?:1[013-8]|3[0135]|5[14-79]|7[0-246-9]|8[0156]|9[0-689])\\d{5,6})|6(?:[03]\\d{5,7}|(?:1[1-3]|2[0-4]|4[02-57]|5[0-37]|6[0-3]|7[0-2]|8[0247]|9[0-356])\\d{5,6})|8\\d{6,8}|9(?:0[1-9]\\d{4,6}|(?:1[0-68]|2\\d|3[02-5]|4[0-3]|5[0-4]|[68][01]|7[0135-8])\\d{5,6})|(?:[12][136]|3[356])\\d{5}",,,, "8123456",,, [7, 8, 9]], [,, "7[02369]\\d{7}",,,, "701234567",,, [9]], [,, "20\\d{4,7}",,,, "20123456",,, [6, 7, 8, 9]], [,, "649\\d{6}|9(?:00|39|44)[1-8]\\d{3,6}",,,, "9001234567",,, [7, 8, 9, 10]], [,, "77[0-7]\\d{6}",,,, "771234567",,, [9]], [,, "75[1-8]\\d{6}",,,, "751234567",,, [9]], [,,,,,,,,, [-1]], "SE", 46, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["20"], "0$1"], [, "(\\d{3})(\\d{4})", "$1-$2", ["9(?:00|39|44)"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})", "$1-$2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"], "0$1"], [, "(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1"], [, "(\\d{3})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1"], [, "(\\d{3})(\\d{2,3})(\\d{3})", "$1-$2 $3", ["9(?:00|39|44)"], "0$1"], [, "(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["7"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1-$2 $3 $4", ["9"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4 $5", ["[26]"], "0$1"]], [[, "(\\d{2})(\\d{2,3})(\\d{2})", "$1 $2 $3", ["20"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["9(?:00|39|44)"]], [, "(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"]], [, "(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], [, "(\\d{3})(\\d{2,3})(\\d{2})", "$1 $2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"]], [, "(\\d{3})(\\d{2,3})(\\d{3})", "$1 $2 $3", ["9(?:00|39|44)"]], [, "(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[013689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"]], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7"]], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["8"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["9"]], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]"]]], [,, "74[02-9]\\d{6}",,,, "740123456",,, [9]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "(?:25[245]|67[3-68])\\d{9}",,,, "254123456789",,, [12]]],
    SG: [, [,, "(?:1\\d{3}|[369]|7000|8(?:\\d{2})?)\\d{7}",,,,,,, [8, 10, 11]], [,, "6[1-9]\\d{6}",,,, "61234567",,, [8]], [,, "(?:8[1-8]|9[0-8])\\d{6}",,,, "81234567",,, [8]], [,, "(?:18|8)00\\d{7}",,,, "18001234567",,, [10, 11]], [,, "1900\\d{7}",,,, "19001234567",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3[12]\\d{6}",,,, "31234567",,, [8]], "SG", 65, "0[0-3]\\d",,,,,,,, [[, "(\\d{4,5})", "$1", ["1[0135-7]|77"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[369]|8[1-8]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], [, "(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]], [[, "(\\d{4})(\\d{4})", "$1 $2", ["[369]|8[1-8]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], [, "(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "7000\\d{7}",,,, "70001234567",,, [11]],,, [,,,,,,,,, [-1]]],
    SH: [, [,, "(?:[256]\\d|8)\\d{3}",,,,,,, [4, 5]], [,, "2(?:[0-57-9]\\d|6[4-9])\\d\\d",,,, "22158"], [,, "[56]\\d{4}",,,, "51234",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "262\\d\\d",,,, "26212",,, [5]], "SH", 290, "00",,,,,,,,,, [,,,,,,,,, [-1]], 1, "[256]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SI: [, [,, "[1-8]\\d{7}|90\\d{4,6}|8\\d{4,6}",,,,,,, [5, 6, 7, 8]], [,, "(?:[1-357][2-8]|4[24-8])\\d{6}",,,, "12345678",,, [8], [7]], [,, "(?:(?:[37][01]|4[0139]|51)\\d\\d|6(?:[48]\\d\\d|5(?:1\\d|55|[67]0)|9(?:10|[69]\\d)))\\d{4}",,,, "31234567",,, [8]], [,, "80\\d{4,6}",,,, "80123456",,, [6, 7, 8]], [,, "89[1-3]\\d{2,5}|90\\d{4,6}",,,, "90123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:59\\d\\d|8(?:1(?:[67]\\d|8[01389])|2(?:0\\d|2[0378]|8[0-2489])|3[389]\\d))\\d{4}",,,, "59012345",,, [8]], "SI", 386, "00|10(?:22|66|88|99)", "0",,, "0",, "00",, [[, "(\\d{2})(\\d{3,6})", "$1 $2", ["8[09]|9"], "0$1"], [, "(\\d{3})(\\d{5})", "$1 $2", ["59|8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37][01]|4[0139]|51|6"], "0$1"], [, "(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-57]"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SJ: [, [,, "(?:0|(?:[4589]\\d|79)\\d\\d)\\d{4}",,,,,,, [5, 8]], [,, "79\\d{6}",,,, "79123456",,, [8]], [,, "(?:4[015-8]|5[89]|9\\d)\\d{6}",,,, "41234567",,, [8]], [,, "80[01]\\d{5}",,,, "80012345",,, [8]], [,, "82[09]\\d{5}",,,, "82012345",,, [8]], [,, "810(?:0[0-6]|[2-8]\\d)\\d{3}",,,, "81021234",,, [8]], [,, "880\\d{5}",,,, "88012345",,, [8]], [,, "85[0-5]\\d{5}",,,, "85012345",,, [8]], "SJ", 47, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "79", [,,,,,,,,, [-1]], [,, "(?:0\\d|81(?:0(?:0[7-9]|1\\d)|5\\d\\d))\\d{3}",,,, "01234"],,, [,, "81[23]\\d{5}",,,, "81212345",,, [8]]],
    SK: [, [,, "[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}",,,,,,, [6, 7, 9]], [,, "(?:2(?:16|[2-9]\\d{3})|[3-5][1-8]\\d{3})\\d{4}|(?:2|[3-5][1-8])1[67]\\d{3}|[3-5][1-8]16\\d\\d",,,, "221234567"], [,, "9(?:0(?:[1-8]\\d|9[1-9])|(?:1[0-24-9]|[45]\\d)\\d)\\d{5}",,,, "912123456",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "9(?:00|[78]\\d)\\d{6}",,,, "900123456",,, [9]], [,, "8[5-9]\\d{7}",,,, "850123456",,, [9]], [,,,,,,,,, [-1]], [,, "6(?:02|5[0-4]|9[0-6])\\d{6}",,,, "690123456",,, [9]], "SK", 421, "00", "0",,, "0",,,, [[, "(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], [, "(\\d{4})(\\d{3})", "$1 $2", ["909", "9090"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], [[, "(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], [,, "9090\\d{3}",,,, "9090123",,, [7]],,, [,, "(?:(?:602|8(?:00|[5-9]\\d))\\d{3}|9(?:0(?:0\\d{3}|90)|[78]\\d{4}))\\d{3}",,,,,,, [7, 9]], [,, "96\\d{7}",,,, "961234567",,, [9]],,, [,,,,,,,,, [-1]]],
    SL: [, [,, "(?:[2-578]\\d|66|99)\\d{6}",,,,,,, [8], [6]], [,, "[235]2[2-4][2-9]\\d{4}",,,, "22221234",,,, [6]], [,, "(?:2[15]|3[013-5]|4[04]|5[05]|66|7[5-9]|8[08]|99)\\d{6}",,,, "25123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SL", 232, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{6})", "$1 $2", ["[2-9]"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SM: [, [,, "(?:0549|[5-7]\\d)\\d{6}",,,,,,, [8, 10], [6]], [,, "0549(?:8[0157-9]|9\\d)\\d{4}",,,, "0549886377",,, [10], [6]], [,, "6[16]\\d{6}",,,, "66661212",,, [8]], [,,,,,,,,, [-1]], [,, "7[178]\\d{6}",,,, "71123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5[158]\\d{6}",,,, "58001110",,, [8]], "SM", 378, "00",,,, "([89]\\d{5})$", "0549$1",,, [[, "(\\d{6})", "$1", ["[89]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], [, "(\\d{4})(\\d{6})", "$1 $2", ["0"]]], [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], [, "(\\d{4})(\\d{6})", "$1 $2", ["0"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SN: [, [,, "(?:[378]\\d{4}|93330)\\d{4}",,,,,,, [9]], [,, "3(?:0(?:1[0-2]|80)|282|3(?:8[1-9]|9[3-9])|611)\\d{5}",,,, "301012345"], [,, "7(?:[06-8]\\d|21|90)\\d{6}",,,, "701234567"], [,, "800\\d{6}",,,, "800123456"], [,, "88[4689]\\d{6}",,,, "884123456"], [,, "81[02468]\\d{6}",,,, "810123456"], [,,,,,,,,, [-1]], [,, "(?:3(?:392|9[01]\\d)\\d|93330)\\d{4}",,,, "933301234"], "SN", 221, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[379]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SO: [, [,, "[346-9]\\d{8}|[12679]\\d{7}|(?:[1-4]\\d|59)\\d{5}|[1348]\\d{5}",,,,,,, [6, 7, 8, 9]], [,, "(?:1\\d|2[0-79]|3[0-46-8]|4[0-7]|59)\\d{5}|(?:[134]\\d|8[125])\\d{4}",,,, "4012345",,, [6, 7]], [,, "(?:(?:15|(?:3[59]|4[89]|6[1-9]|79|8[08])\\d|9(?:0[67]|[2-9]))\\d|2(?:4\\d|8))\\d{5}|(?:6\\d|7[1-9])\\d{6}",,,, "71123456",,, [7, 8, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SO", 252, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{4})", "$1 $2", ["8[125]"]], [, "(\\d{6})", "$1", ["[134]"]], [, "(\\d)(\\d{6})", "$1 $2", ["1|2[0-79]|3[0-46-8]|4[0-7]|59"]], [, "(\\d)(\\d{7})", "$1 $2", ["24|[67]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[348]|64|79[0-8]|90"]], [, "(\\d{2})(\\d{5,7})", "$1 $2", ["1|28|6[1-35-9]|799|9[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SR: [, [,, "(?:[2-5]|68|[78]\\d)\\d{5}",,,,,,, [6, 7]], [,, "(?:2[1-3]|3[0-7]|(?:4|68)\\d|5[2-58])\\d{4}",,,, "211234"], [,, "(?:7[124-7]|8[125-9])\\d{5}",,,, "7412345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "56\\d{4}",,,, "561234",,, [6]], "SR", 597, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1-$2-$3", ["56"]], [, "(\\d{3})(\\d{3})", "$1-$2", ["[2-5]"]], [, "(\\d{3})(\\d{4})", "$1-$2", ["[6-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SS: [, [,, "[19]\\d{8}",,,,,,, [9]], [,, "18\\d{7}",,,, "181234567"], [,, "(?:12|9[1257])\\d{7}",,,, "977123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SS", 211, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[19]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    ST: [, [,, "(?:22|9\\d)\\d{5}",,,,,,, [7]], [,, "22\\d{5}",,,, "2221234"], [,, "9(?:0(?:0[5-9]|[1-9]\\d)|[89]\\d\\d)\\d{3}",,,, "9812345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ST", 239, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[29]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SV: [, [,, "[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?",,,,,,, [7, 8, 11]], [,, "2[1-6]\\d{6}",,,, "21234567",,, [8]], [,, "[67]\\d{7}",,,, "70123456",,, [8]], [,, "800\\d{4}(?:\\d{4})?",,,, "8001234",,, [7, 11]], [,, "900\\d{4}(?:\\d{4})?",,,, "9001234",,, [7, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SV", 503, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[89]"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[267]"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[89]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SX: [, [,, "(?:(?:[58]\\d\\d|900)\\d|7215)\\d{6}",,,,,,, [10], [7]], [,, "7215(?:4[2-8]|8[239]|9[056])\\d{4}",,,, "7215425678",,,, [7]], [,, "7215(?:1[02]|2\\d|5[034679]|8[014-8])\\d{4}",,,, "7215205678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "SX", 1, "011", "1",,, "1|(5\\d{6})$", "721$1",,,,, [,,,,,,,,, [-1]],, "721", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SY: [, [,, "[1-39]\\d{8}|[1-5]\\d{7}",,,,,,, [8, 9], [6, 7]], [,, "(?:1[14]\\d|2(?:1\\d?|[235])|3(?:[13]\\d|4)|4[13]|5[1-3])\\d{6}|1[1-356]\\d{6}",,,, "112345678",,,, [6, 7]], [,, "9(?:22|[3-589]\\d|6[024-9])\\d{6}",,,, "944567890",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SY", 963, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-5]"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1",, 1]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    SZ: [, [,, "(?:0800|(?:[237]\\d|900)\\d\\d)\\d{4}",,,,,,, [8, 9]], [,, "[23][2-5]\\d{6}",,,, "22171234",,, [8]], [,, "7[6-9]\\d{6}",,,, "76123456",,, [8]], [,, "0800\\d{4}",,,, "08001234",,, [8]], [,, "900\\d{6}",,,, "900012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "70\\d{6}",,,, "70012345",,, [8]], "SZ", 268, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[0237]"]], [, "(\\d{5})(\\d{4})", "$1 $2", ["9"]]],, [,,,,,,,,, [-1]],,, [,, "0800\\d{4}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TA: [, [,, "8\\d{3}",,,,,,, [4]], [,, "8\\d{3}",,,, "8999"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TA", 290, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "8", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TC: [, [,, "(?:[58]\\d\\d|649|900)\\d{7}",,,,,,, [10], [7]], [,, "649(?:712|9(?:4\\d|50))\\d{4}",,,, "6497121234",,,, [7]], [,, "649(?:2(?:3[129]|4[1-7])|3(?:3[1-389]|4[1-8])|4[34][1-3])\\d{4}",,,, "6492311234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "64971[01]\\d{4}",,,, "6497101234",,,, [7]], "TC", 1, "011", "1",,, "1|([2-479]\\d{6})$", "649$1",,,,, [,,,,,,,,, [-1]],, "649", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TD: [, [,, "(?:22|[69]\\d|77)\\d{6}",,,,,,, [8]], [,, "22(?:[37-9]0|5[0-5]|6[89])\\d{4}",,,, "22501234"], [,, "(?:6[023568]|77|9\\d)\\d{6}",,,, "63012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TD", 235, "00|16",,,,,, "00",, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2679]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TG: [, [,, "[279]\\d{7}",,,,,,, [8]], [,, "2(?:2[2-7]|3[23]|4[45]|55|6[67]|77)\\d{5}",,,, "22212345"], [,, "(?:7[09]|9[0-36-9])\\d{6}",,,, "90112345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TG", 228, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[279]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TH: [, [,, "(?:1\\d\\d?|[2-57]|[689]\\d)\\d{7}",,,,,,, [8, 9, 10]], [,, "(?:2\\d|3[2-9]|4[2-5]|5[2-6]|7[3-7])\\d{6}",,,, "21234567",,, [8]], [,, "(?:14|6[1-6]|[89]\\d)\\d{7}",,,, "812345678",,, [9]], [,, "1800\\d{6}",,,, "1800123456",,, [10]], [,, "1900\\d{6}",,,, "1900123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "6[08]\\d{7}",,,, "601234567",,, [9]], "TH", 66, "00[1-9]", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["14|[3-9]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TJ: [, [,, "(?:[3-59]\\d|77|88)\\d{7}",,,,,,, [9], [3, 5, 6, 7]], [,, "(?:3(?:1[3-5]|2[245]|3[12]|4[24-7]|5[25]|72)|4(?:46|74|87))\\d{6}",,,, "372123456",,,, [3, 5, 6, 7]], [,, "(?:41[18]|(?:5[05]|77|88|9[0-35-9])\\d)\\d{6}",,,, "917123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TJ", 992, "810", "8",,, "8",, "8~10",, [[, "(\\d{6})(\\d)(\\d{2})", "$1 $2 $3", ["331", "3317"],,, 1], [, "(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[34]7|91[78]"],,, 1], [, "(\\d{4})(\\d)(\\d{4})", "$1 $2 $3", ["3"],,, 1], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[457-9]"],,, 1]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TK: [, [,, "[2-47]\\d{3,6}",,,,,,, [4, 5, 6, 7]], [,, "(?:2[2-4]|[34]\\d)\\d{2,5}",,,, "3101"], [,, "7[2-4]\\d{2,5}",,,, "7290"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TK", 690, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TL: [, [,, "(?:[2-4]\\d|7\\d\\d?|[89]0)\\d{5}",,,,,,, [7, 8]], [,, "(?:2[1-5]|3[1-9]|4[1-4])\\d{5}",,,, "2112345",,, [7]], [,, "7[3-8]\\d{6}",,,, "77212345",,, [8]], [,, "80\\d{5}",,,, "8012345",,, [7]], [,, "90\\d{5}",,,, "9012345",,, [7]], [,,,,,,,,, [-1]], [,, "70\\d{5}",,,, "7012345",,, [7]], [,,,,,,,,, [-1]], "TL", 670, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-489]|70"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["7"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TM: [, [,, "[1-6]\\d{7}",,,,,,, [8]], [,, "(?:1(?:2\\d|3[1-9])|2(?:22|4[0-35-8])|3(?:22|4[03-9])|4(?:22|3[128]|4\\d|6[15])|5(?:22|5[7-9]|6[014-689]))\\d{5}",,,, "12345678"], [,, "6[1-9]\\d{6}",,,, "66123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TM", 993, "810", "8",,, "8",, "8~10",, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["12"], "(8 $1)"], [, "(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-5]"], "(8 $1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["6"], "8 $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TN: [, [,, "[2-57-9]\\d{7}",,,,,,, [8]], [,, "(?:(?:3[0-2]|7\\d)\\d{3}|81200)\\d{3}",,,, "30010123"], [,, "(?:(?:[259]\\d|4[0-6])\\d\\d|3(?:001|1(?:[1-35]\\d|40)|240|(?:6[0-4]|91)\\d))\\d{4}",,,, "20123456"], [,, "8010\\d{4}",,,, "80101234"], [,, "88\\d{6}",,,, "88123456"], [,, "8[12]10\\d{4}",,,, "81101234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TN", 216, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-57-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TO: [, [,, "(?:(?:080|[56])0|[2-4]\\d|[78]\\d(?:\\d{2})?)\\d{3}",,,,,,, [5, 7]], [,, "(?:2\\d|3[1-8]|4[1-4]|[56]0|7[0149]|8[05])\\d{3}",,,, "20123",,, [5]], [,, "(?:7[578]|8[46-9])\\d{5}",,,, "7715123",,, [7]], [,, "0800\\d{3}",,,, "0800222",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TO", 676, "00",,,,,,,, [[, "(\\d{2})(\\d{3})", "$1-$2", ["[2-6]|7[014]|8[05]"]], [, "(\\d{4})(\\d{3})", "$1 $2", ["0"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["7[578]|8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TR: [, [,, "(?:[2-58]\\d\\d|900)\\d{7}|4\\d{6}",,,,,,, [7, 10]], [,, "(?:2(?:[13][26]|[28][2468]|[45][268]|[67][246])|3(?:[13][28]|[24-6][2468]|[78][02468]|92)|4(?:[16][246]|[23578][2468]|4[26]))\\d{7}",,,, "2123456789",,, [10]], [,, "5(?:(?:0[15-7]|1[06]|24|[34]\\d|5[1-59]|9[46])\\d\\d|6161)\\d{5}",,,, "5012345678",,, [10]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "(?:8[89]8|900)\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,, "592(?:21[12]|461)\\d{4}",,,, "5922121234",,, [10]], [,,,,,,,,, [-1]], "TR", 90, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d)(\\d{3})", "$1 $2 $3", ["444"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[0589]|90"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|616)", "5(?:[0-59]|6161)"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)",, 1]], [[, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[0589]|90"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|616)", "5(?:[0-59]|6161)"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)",, 1]], [,, "512\\d{7}",,,, "5123456789",,, [10]],,, [,, "444\\d{4}",,,,,,, [7]], [,, "(?:444|850\\d{3})\\d{4}",,,, "4441444"],,, [,,,,,,,,, [-1]]],
    TT: [, [,, "(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "868(?:2(?:01|1[89]|[23]\\d)|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\d|7[0-79])|82[124])\\d{4}",,,, "8682211234",,,, [7]], [,, "868(?:2(?:6[6-9]|[7-9]\\d)|[37](?:0[1-9]|1[02-9]|[2-9]\\d)|4[6-9]\\d|6(?:20|78|8\\d))\\d{4}",,,, "8682911234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "TT", 1, "011", "1",,, "1|([2-46-8]\\d{6})$", "868$1",,,,, [,,,,,,,,, [-1]],, "868", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "868619\\d{4}",,,, "8686191234",,,, [7]]],
    TV: [, [,, "(?:2|7\\d\\d|90)\\d{4}",,,,,,, [5, 6, 7]], [,, "2[02-9]\\d{3}",,,, "20123",,, [5]], [,, "(?:7[01]\\d|90)\\d{4}",,,, "901234",,, [6, 7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TV", 688, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    TW: [, [,, "(?:[24589]|7\\d)\\d{8}|[2-8]\\d{7}|2\\d{6}",,,,,,, [7, 8, 9, 10]], [,, "(?:(?:2[2-8]\\d|3[2-9]|4(?:[239]\\d|[78])|5[2-8]|6[235-79]|7[1-9])\\d\\d|8(?:2(?:3\\d|66)|[7-9]\\d\\d))\\d{4}|24\\d{6}",,,, "221234567",,, [8, 9]], [,, "9[0-8]\\d{7}",,,, "912345678",,, [9]], [,, "80[0-79]\\d{6}",,,, "800123456",,, [9]], [,, "20(?:[013-9]\\d\\d|2)\\d{4}",,,, "203123456",,, [7, 9]], [,,,,,,,,, [-1]], [,, "99\\d{7}",,,, "990123456",,, [9]], [,, "70\\d{8}",,,, "7012345678",,, [10]], "TW", 886, "0(?:0[25-79]|19)", "0", "#",, "0",,,, [[, "(\\d{2})(\\d)(\\d{4})", "$1 $2 $3", ["202"], "0$1"], [, "(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[25][2-8]|[346]|7[1-9]|8[27-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[258]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "50[0-46-9]\\d{6}",,,, "500123456",,, [9]],,, [,,,,,,,,, [-1]]],
    TZ: [, [,, "(?:[26-8]\\d|41|90)\\d{7}",,,,,,, [9]], [,, "2[2-8]\\d{7}",,,, "222345678"], [,, "(?:6[2-9]|7[13-9])\\d{7}",,,, "621234567"], [,, "80[08]\\d{6}",,,, "800123456"], [,, "90\\d{7}",,,, "900123456"], [,, "8(?:40|6[01])\\d{6}",,,, "840123456"], [,,,,,,,,, [-1]], [,, "41\\d{7}",,,, "412345678"], "TZ", 255, "00[056]", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[24]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[67]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "(?:8(?:[04]0|6[01])|90\\d)\\d{6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    UA: [, [,, "[3-9]\\d{8}",,,,,,, [9], [5, 6, 7]], [,, "(?:3[1-8]|4[13-8]|5[1-7]|6[12459])\\d{7}",,,, "311234567",,,, [5, 6, 7]], [,, "(?:39|50|6[36-8]|7[1-3]|9[1-9])\\d{7}",,,, "391234567"], [,, "800\\d{6}",,,, "800123456"], [,, "900[2-49]\\d{5}",,,, "900212345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "89[1-579]\\d{6}",,,, "891234567"], "UA", 380, "00", "0",,, "0",, "0~0",, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["(?:3[1-8]|4[136-8])2|5(?:[12457]2|6[24])|6(?:[12][29]|[49]2|5[24])|[89]0", "3(?:[1-46-8]2[013-9]|52)|4(?:[1378]2|62[013-9])|5(?:[12457]2|6[24])|6(?:[12][29]|[49]2|5[24])|[89]0"], "0$1"], [, "(\\d{4})(\\d{5})", "$1 $2", ["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])", "3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    UG: [, [,, "(?:(?:[29]0|[347]\\d)\\d|800)\\d{6}",,,,,,, [9], [5, 6, 7]], [,, "(?:20(?:(?:(?:[0147]\\d|5[0-4]|8[0-2])\\d|2(?:40|[5-9]\\d)|3(?:0[0-4]|[2367]\\d))\\d|6(?:00[0-2]|30[0-4]|[5-9]\\d\\d))|[34]\\d{5})\\d{3}",,,, "312345678",,,, [5, 6, 7]], [,, "7(?:(?:[0157-9]\\d|30|4[0-4])\\d|2(?:[03]\\d|60))\\d{5}",,,, "712345678"], [,, "800[1-3]\\d{5}",,,, "800123456"], [,, "90[1-3]\\d{6}",,,, "901123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "UG", 256, "00[057]", "0",,, "0",,,, [[, "(\\d{4})(\\d{5})", "$1 $2", ["202", "2024"], "0$1"], [, "(\\d{3})(\\d{6})", "$1 $2", ["[27-9]|4(?:6[45]|[7-9])"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["[34]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    US: [, [,, "[2-9]\\d{9}",,,,,,, [10], [7]], [,, "(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[67]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[017]|6[0-279]|78|8[0-2])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}",,,, "2015550123",,,, [7]], [,, "(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[67]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[017]|6[0-279]|78|8[0-2])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}",,,, "2015550123",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "US", 1, "011", "1",,, "1",,, 1, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-9]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "($1) $2-$3", ["[2-9]"],,, 1]], [[, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-9]"]]], [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,, "710[2-9]\\d{6}",,,, "7102123456"],,, [,,,,,,,,, [-1]]],
    UY: [, [,, "(?:[249]\\d\\d|80)\\d{5}|9\\d{6}",,,,,,, [7, 8]], [,, "(?:2\\d|4[2-7])\\d{6}",,,, "21231234",,, [8], [7]], [,, "9[1-9]\\d{6}",,,, "94231234",,, [8]], [,, "80[05]\\d{4}",,,, "8001234",,, [7]], [,, "90[0-8]\\d{4}",,,, "9001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "UY", 598, "0(?:0|1[3-9]\\d)", "0", " int. ",, "0",, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["8|90"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{4})(\\d{4})", "$1 $2", ["[24]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    UZ: [, [,, "[679]\\d{8}",,,,,,, [9]], [,, "(?:6(?:1(?:22|3[124]|4[1-4]|5[1-3578]|64)|2(?:22|3[0-57-9]|41)|5(?:22|3[3-7]|5[024-8])|6\\d\\d|7(?:[23]\\d|7[69])|9(?:22|4[1-8]|6[135]))|7(?:0(?:5[4-9]|6[0146]|7[124-6]|9[135-8])|1[12]\\d|2(?:22|3[13-57-9]|4[1-3579]|5[14])|3(?:2\\d|3[1578]|4[1-35-7]|5[1-57]|61)|4(?:2\\d|3[1-579]|7[1-79])|5(?:22|5[1-9]|6[1457])|6(?:22|3[12457]|4[13-8])|9(?:22|5[1-9])))\\d{5}",,,, "669050123"], [,, "(?:6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\d|61[23]|7(?:[01][017]|4\\d|55|9[5-9]))|2(?:(?:11|7\\d)\\d|2(?:[12]1|9[01379])|5(?:[126]\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\d)\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\d|4(?:56|83)|7(?:[07]\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\d|[39][07])|9(?:0\\d|7[079]))|9(?:2(?:1[1267]|3[01]|5\\d|7[0-4])|(?:5[67]|7\\d)\\d|6(?:2[0-26]|8\\d)))|7(?:0\\d{3}|1(?:13[01]|6(?:0[47]|1[67]|66)|71[3-69]|98\\d)|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\d|7(?:0\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\d|5(?:0[0-4]|5[579]|9\\d)|7(?:[0-3579]\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\d|9[5-9])|7(?:0\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\d))|5(?:112|2(?:0\\d|2[29]|[49]4)|3[1568]\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\d|8[78]|9[079]))|6(?:2(?:2[1245]|4[2-4])|39\\d|41[179]|5(?:[349]\\d|5[0-2])|7(?:0[017]|[13]\\d|22|44|55|67|88))|9(?:22[128]|3(?:2[0-4]|7\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\d|60|7[2579]|87|9[07])))|9[0-57-9]\\d{3})\\d{4}",,,, "912345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "UZ", 998, "810", "8",,, "8",, "8~10",, [[, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[679]"], "8 $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    VA: [, [,, "0\\d{6}(?:\\d{4})?|3[0-8]\\d{9}|(?:[0138]\\d?|55)\\d{8}|[08]\\d{5}(?:\\d{2})?",,,,,,, [6, 7, 8, 9, 10, 11]], [,, "06698\\d{1,6}",,,, "0669812345"], [,, "33\\d{9}|3[1-9]\\d{8}|3[2-9]\\d{7}",,,, "3123456789",,, [9, 10, 11]], [,, "80(?:0\\d{3}|3)\\d{3}",,,, "800123456",,, [6, 9]], [,, "(?:(?:0878|1(?:44|6[346])\\d)\\d\\d|89(?:2|(?:4[5-9]|(?:5[5-9]|9)\\d\\d)\\d))\\d{3}|89[45][0-4]\\d\\d",,,, "899123456",,, [6, 8, 9, 10]], [,, "84(?:[08]\\d{3}|[17])\\d{3}",,,, "848123456",,, [6, 9]], [,, "1(?:78\\d|99)\\d{6}",,,, "1781234567",,, [9, 10]], [,, "55\\d{8}",,,, "5512345678",,, [10]], "VA", 39, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "06698", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    VC: [, [,, "(?:[58]\\d\\d|784|900)\\d{7}",,,,,,, [10], [7]], [,, "784(?:266|3(?:6[6-9]|7\\d|8[0-24-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\d{4}",,,, "7842661234",,,, [7]], [,, "784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4]))\\d{4}",,,, "7844301234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "VC", 1, "011", "1",,, "1|([2-7]\\d{6})$", "784$1",,,,, [,,,,,,,,, [-1]],, "784", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    VE: [, [,, "(?:(?:[24]\\d|50)\\d|[89]00)\\d{7}",,,,,,, [10], [7]], [,, "(?:2(?:12|3[457-9]|[467]\\d|[58][1-9]|9[1-6])|50[01])\\d{7}",,,, "2121234567",,,, [7]], [,, "4(?:1[24-8]|2[46])\\d{7}",,,, "4121234567"], [,, "800\\d{7}",,,, "8001234567"], [,, "900\\d{7}",,,, "9001234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "VE", 58, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{7})", "$1-$2", ["[24589]"], "0$1", "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    VG: [, [,, "(?:284|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "284(?:(?:229|774|8(?:52|6[459]))\\d|4(?:22\\d|9(?:[45]\\d|6[0-5])))\\d{3}",,,, "2842291234",,,, [7]], [,, "284(?:(?:3(?:0[0-3]|4[0-7]|68|9[34])|54[0-57])\\d|4(?:(?:4[0-6]|68)\\d|9(?:6[6-9]|9\\d)))\\d{3}",,,, "2843001234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "VG", 1, "011", "1",,, "1|([2-578]\\d{6})$", "284$1",,,,, [,,,,,,,,, [-1]],, "284", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    VI: [, [,, "(?:(?:34|90)0|[58]\\d\\d)\\d{7}",,,,,,, [10], [7]], [,, "340(?:2(?:01|2[06-8]|44|77)|3(?:32|44)|4(?:22|7[34])|5(?:1[34]|55)|6(?:26|4[23]|77|9[023])|7(?:1[2-57-9]|27|7\\d)|884|998)\\d{4}",,,, "3406421234",,,, [7]], [,, "340(?:2(?:01|2[06-8]|44|77)|3(?:32|44)|4(?:22|7[34])|5(?:1[34]|55)|6(?:26|4[23]|77|9[023])|7(?:1[2-57-9]|27|7\\d)|884|998)\\d{4}",,,, "3406421234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "VI", 1, "011", "1",,, "1|([2-9]\\d{6})$", "340$1",, 1,,, [,,,,,,,,, [-1]],, "340", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    VN: [, [,, "[12]\\d{9}|[135-9]\\d{8}|(?:[16]\\d?|[78])\\d{6}",,,,,,, [7, 8, 9, 10]], [,, "2(?:0[3-9]|1[0-689]|2[0-25-9]|3[2-9]|4[2-8]|5[124-9]|6[0-39]|7[0-7]|8[2-7]|9[0-4679])\\d{7}",,,, "2101234567",,, [10]], [,, "(?:(?:3\\d|7[06-9])\\d|5(?:2[238]|[689]\\d)|8(?:[1-58]\\d|6[5-9]|9[689])|9(?:[0-8]\\d|9[013-9]))\\d{6}",,,, "912345678",,, [9]], [,, "1800\\d{4,6}",,,, "1800123456",,, [8, 9, 10]], [,, "1900\\d{4,6}",,,, "1900123456",,, [8, 9, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "672\\d{6}",,,, "672012345",,, [9]], "VN", 84, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[17]99"], "0$1",, 1], [, "(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1",, 1], [, "(\\d{3})(\\d{4,5})", "$1 $2", ["69"], "0$1",, 1], [, "(\\d{4})(\\d{4,6})", "$1 $2", ["1"],,, 1], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[69]"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3578]"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1",, 1], [, "(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1",, 1]], [[, "(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1",, 1], [, "(\\d{4})(\\d{4,6})", "$1 $2", ["1"],,, 1], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[69]"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[3578]"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1",, 1], [, "(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1",, 1]], [,,,,,,,,, [-1]],,, [,, "(?:[17]99|69\\d\\d?)\\d{4}",,,,,,, [7, 8]], [,, "(?:[17]99|69\\d\\d?|80\\d)\\d{4}",,,, "1992000",,, [7, 8]],,, [,,,,,,,,, [-1]]],
    VU: [, [,, "(?:(?:[23]|(?:[57]\\d|90)\\d)\\d|[48]8)\\d{3}",,,,,,, [5, 7]], [,, "(?:(?:2[02-9]|88)\\d|3(?:[4-7]\\d|8[0-8])|48[4-9])\\d\\d",,,, "22123",,, [5]], [,, "(?:5(?:[0-689]\\d|7[2-5])|7[013-7]\\d)\\d{4}",,,, "5912345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "90[1-9]\\d{4}",,,, "9010123",,, [7]], "VU", 678, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[579]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:3[03]|900\\d)\\d{3}",,,, "30123"],,, [,,,,,,,,, [-1]]],
    WF: [, [,, "(?:[45]0|68|72|8\\d)\\d{4}",,,,,,, [6]], [,, "(?:50|68|72)\\d{4}",,,, "501234"], [,, "(?:50|68|72|8[23])\\d{4}",,,, "501234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "WF", 681, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[4-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "[48]0\\d{4}",,,, "401234"]],
    WS: [, [,, "(?:[2-6]|8\\d(?:\\d{4})?)\\d{4}|[78]\\d{6}",,,,,,, [5, 6, 7, 10]], [,, "(?:[2-5]\\d|6[1-9])\\d{3}",,,, "22123",,, [5]], [,, "(?:7[25-7]|8(?:[3-7]|9\\d{3}))\\d{5}",,,, "7212345",,, [7, 10]], [,, "800\\d{3}",,,, "800123",,, [6]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "WS", 685, "0",,,,,,,, [[, "(\\d{5})", "$1", ["[2-6]"]], [, "(\\d{3})(\\d{3,7})", "$1 $2", ["8"]], [, "(\\d{2})(\\d{5})", "$1 $2", ["7"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    XK: [, [,, "(?:[23]\\d{2,3}|4\\d\\d|[89]00)\\d{5}",,,,,,, [8, 9]], [,, "(?:2[89]|39)0\\d{6}|[23][89]\\d{6}",,,, "28012345"], [,, "4[3-79]\\d{6}",,,, "43201234",,, [8]], [,, "800\\d{5}",,,, "80001234",,, [8]], [,, "900\\d{5}",,,, "90001234",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "XK", 383, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-4]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[23]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    YE: [, [,, "(?:1|7\\d)\\d{7}|[1-7]\\d{6}",,,,,,, [7, 8, 9], [6]], [,, "17\\d{6}|(?:[12][2-68]|3[2358]|4[2-58]|5[2-6]|6[3-58]|7[24-68])\\d{5}",,,, "1234567",,, [7, 8], [6]], [,, "7[0137]\\d{7}",,,, "712345678",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "YE", 967, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-6]|7[24-68]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    YT: [, [,, "(?:(?:26|63)9|80\\d)\\d{6}",,,,,,, [9]], [,, "269(?:0[67]|5[01]|6\\d|[78]0)\\d{4}",,,, "269601234"], [,, "639(?:0[0-79]|1[019]|[267]\\d|3[09]|[45]0|9[04-79])\\d{4}",,,, "639012345"], [,, "80\\d{7}",,,, "801234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "YT", 262, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],, "269|63", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    ZA: [, [,, "[1-9]\\d{8}|8\\d{4,7}",,,,,,, [5, 6, 7, 8, 9]], [,, "(?:1[0-8]|2[1-378]|3[1-69]|4\\d|5[1346-8])\\d{7}",,,, "101234567",,, [9]], [,, "(?:6\\d|7[0-46-9]|8[1-5])\\d{7}|8[1-4]\\d{3,6}",,,, "711234567"], [,, "80\\d{7}",,,, "801234567",,, [9]], [,, "(?:86[2-9]|9[0-2]\\d)\\d{6}",,,, "862345678",,, [9]], [,, "860\\d{6}",,,, "860123456",,, [9]], [,,,,,,,,, [-1]], [,, "87\\d{7}",,,, "871234567",,, [9]], "ZA", 27, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3,4})", "$1 $2", ["8[1-4]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["8[1-4]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["860"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "861\\d{6}",,,, "861123456",,, [9]],,, [,,,,,,,,, [-1]]],
    ZM: [, [,, "(?:(?:21|76|9\\d)\\d|800)\\d{6}",,,,,,, [9], [6]], [,, "21[1-8]\\d{6}",,,, "211234567",,,, [6]], [,, "(?:76|9[5-8])\\d{7}",,,, "955123456"], [,, "800\\d{6}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ZM", 260, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["[1-9]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    ZW: [, [,, "2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}",,,,,,, [5, 6, 7, 8, 9, 10], [3, 4]], [,, "(?:1(?:(?:3\\d|9)\\d|[4-8])|2(?:(?:(?:0(?:2[014]|5)|(?:2[0157]|31|84|9)\\d\\d|[56](?:[14]\\d\\d|20)|7(?:[089]|2[03]|[35]\\d\\d))\\d|4(?:2\\d\\d|8))\\d|1(?:2|[39]\\d{4}))|3(?:(?:123|(?:29\\d|92)\\d)\\d\\d|7(?:[19]|[56]\\d))|(?:4\\d\\d|9[2-9])\\d\\d?|5(?:0|1[2-478]|26|[37]2|4(?:2\\d{3}|83)|5(?:25\\d\\d|[78])|[689]\\d)|6(?:(?:[16-8]21|28|52[013])\\d\\d|[39])|8(?:[1349]28|523)\\d\\d)\\d{3}|(?:(?:2(?:(?:(?:0|8[146])\\d|7[1-7])\\d|2(?:[278]\\d|92)|58(?:2\\d|3))|3(?:[26]|9\\d{3})|5(?:4\\d|5)\\d\\d)\\d|6(?:(?:(?:[0-246]|[78]\\d)\\d|37)\\d|5[2-8]))\\d\\d|(?:2(?:[569]\\d|8[2-57-9])|3(?:[013-59]\\d|8[37])|6[89]8)\\d{3}",,,, "1312345",,,, [3, 4]], [,, "(?:7(?:1\\d|3[2-9]|7[1-9]|8[2-5])|8644)\\d{6}",,,, "712345678",,, [9, 10]], [,, "80(?:[01]\\d|20|8[0-8])\\d{3}",,,, "8001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "86(?:1[12]|30|55|77|8[368])\\d{6}",,,, "8686123456",,, [10]], "ZW", 263, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,5})", "$1 $2", ["2(?:0[45]|2[278]|[49]8|[78])|3(?:[09]8|17|3[78]|[78])|5[15][78]|6(?:[29]8|37|[68][78]|75)"], "0$1"], [, "(\\d)(\\d{3})(\\d{2,4})", "$1 $2 $3", ["[49]"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["80"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["2(?:[05-79]2|4)|(?:39|5[45]|6[15-8])2|8[13-59]", "2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)", "2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"], "0$1"], [, "(\\d{4})(\\d{6})", "$1 $2", ["8"], "0$1"], [, "(\\d{2})(\\d{3,5})", "$1 $2", ["1|2(?:0[0-36-9]|12|29|[56]|9[0-79])|3(?:[09][0-79]|1[0-689]|[24-6]|3[0-69])|5(?:[0236-9]|1[2-4]|5[0-69])|6(?:[013-59]|2[0-79]|[68][0-69]|7[0-46-9])"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["29[013-9]|39|54"], "0$1"], [, "(\\d{4})(\\d{3,5})", "$1 $2", ["(?:25|54)8", "258|5483"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    800: [, [,, "\\d{8}",,,,,,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "\\d{8}",,,, "12345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 800,,,,,,,, 1, [[, "(\\d{4})(\\d{4})", "$1 $2"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    808: [, [,, "\\d{8}",,,,,,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "\\d{8}",,,, "12345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 808,,,,,,,, 1, [[, "(\\d{4})(\\d{4})", "$1 $2"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    870: [, [,, "[35-7]\\d{8}",,,,,,, [9]], [,,,,,,,,, [-1]], [,, "(?:[356]\\d|7[6-8])\\d{7}",,,, "301234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 870,,,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[35-7]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    878: [, [,, "10\\d{10}",,,,,,, [12]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "10\\d{10}",,,, "101234567890"], "001", 878,,,,,,,, 1, [[, "(\\d{2})(\\d{5})(\\d{5})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    881: [, [,, "[67]\\d{8}",,,,,,, [9]], [,,,,,,,,, [-1]], [,, "[67]\\d{8}",,,, "612345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 881,,,,,,,,, [[, "(\\d)(\\d{3})(\\d{5})", "$1 $2 $3", ["[67]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    882: [, [,, "[13]\\d{6}(?:\\d{2,5})?|1\\d{7}",,,,,,, [7, 8, 9, 10, 11, 12]], [,,,,,,,,, [-1]], [,, "3(?:(?:(?:2|7\\d{3})\\d|37)\\d\\d|4(?:2|7\\d{3}))\\d{4}",,,, "3421234",,, [7, 9, 10, 12]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])|6\\d{1,6})|3(?:45|9\\d{3})\\d{3})\\d{4}",,,, "390123456789"], "001", 882,,,,,,,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["16|342"]], [, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{2})(\\d{4})(\\d{3})", "$1 $2 $3", ["3[23]"]], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["34[57]"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["34"]], [, "(\\d{2})(\\d{4,5})(\\d{5})", "$1 $2 $3", ["[13]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "348[57]\\d{7}",,,, "34851234567",,, [11]]],
    883: [, [,, "51\\d{7}(?:\\d{3})?",,,,,,, [9, 12]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "51[013]0\\d{8}|5100\\d{5}",,,, "510012345"], "001", 883,,,,,,,, 1, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["510"]], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["510"]], [, "(\\d{4})(\\d{4})(\\d{4})", "$1 $2 $3", ["5"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
    888: [, [,, "\\d{11}",,,,,,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 888,,,,,,,, 1, [[, "(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "\\d{11}",,,, "12345678901"],,, [,,,,,,,,, [-1]]],
    979: [, [,, "\\d{9}",,,,,,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "\\d{9}",,,, "123456789"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 979,,,,,,,, 1, [[, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]]
  };
  /*
  Copyright (C) 2010 The Libphonenumber Authors.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function M() {
    this.a = {};
  }

  M.c = void 0;

  M.a = function () {
    return M.c ? M.c : M.c = new M();
  };

  var xa = {
    0: "0",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    "\uFF10": "0",
    "\uFF11": "1",
    "\uFF12": "2",
    "\uFF13": "3",
    "\uFF14": "4",
    "\uFF15": "5",
    "\uFF16": "6",
    "\uFF17": "7",
    "\uFF18": "8",
    "\uFF19": "9",
    "\u0660": "0",
    "\u0661": "1",
    "\u0662": "2",
    "\u0663": "3",
    "\u0664": "4",
    "\u0665": "5",
    "\u0666": "6",
    "\u0667": "7",
    "\u0668": "8",
    "\u0669": "9",
    "\u06F0": "0",
    "\u06F1": "1",
    "\u06F2": "2",
    "\u06F3": "3",
    "\u06F4": "4",
    "\u06F5": "5",
    "\u06F6": "6",
    "\u06F7": "7",
    "\u06F8": "8",
    "\u06F9": "9"
  },
      ya = {
    0: "0",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    "\uFF10": "0",
    "\uFF11": "1",
    "\uFF12": "2",
    "\uFF13": "3",
    "\uFF14": "4",
    "\uFF15": "5",
    "\uFF16": "6",
    "\uFF17": "7",
    "\uFF18": "8",
    "\uFF19": "9",
    "\u0660": "0",
    "\u0661": "1",
    "\u0662": "2",
    "\u0663": "3",
    "\u0664": "4",
    "\u0665": "5",
    "\u0666": "6",
    "\u0667": "7",
    "\u0668": "8",
    "\u0669": "9",
    "\u06F0": "0",
    "\u06F1": "1",
    "\u06F2": "2",
    "\u06F3": "3",
    "\u06F4": "4",
    "\u06F5": "5",
    "\u06F6": "6",
    "\u06F7": "7",
    "\u06F8": "8",
    "\u06F9": "9",
    A: "2",
    B: "2",
    C: "2",
    D: "3",
    E: "3",
    F: "3",
    G: "4",
    H: "4",
    I: "4",
    J: "5",
    K: "5",
    L: "5",
    M: "6",
    N: "6",
    O: "6",
    P: "7",
    Q: "7",
    R: "7",
    S: "7",
    T: "8",
    U: "8",
    V: "8",
    W: "9",
    X: "9",
    Y: "9",
    Z: "9"
  },
      N = /^[+\uff0b]+/,
      za = /([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9])/,
      Aa = /[+\uff0b0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]/,
      Ba = /[\\\/] *x/,
      Ca = /[^0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9A-Za-z#]+$/,
      Da = /(?:.*?[A-Za-z]){3}.*/,
      Ea = /(?:;ext=([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{1,7})|[ \u00a0\t,]*(?:e?xt(?:ensi(?:o\u0301?|\u00f3))?n?|\uff45?\uff58\uff54\uff4e?|\u0434\u043e\u0431|[;,x\uff58#\uff03~\uff5e]|int|anexo|\uff49\uff4e\uff54)[:\.\uff0e]?[ \u00a0\t,-]*([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{1,7})#?|[- ]+([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{1,5})#)$/i,
      Fa = /^[0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{2}$|^[+\uff0b]*(?:[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\[\]/~\u2053\u223c\uff5e*]*[0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]){3,}[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\[\]/~\u2053\u223c\uff5e*A-Za-z0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]*(?:;ext=([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{1,7})|[ \u00a0\t,]*(?:e?xt(?:ensi(?:o\u0301?|\u00f3))?n?|\uff45?\uff58\uff54\uff4e?|\u0434\u043e\u0431|[;,x\uff58#\uff03~\uff5e]|int|anexo|\uff49\uff4e\uff54)[:\.\uff0e]?[ \u00a0\t,-]*([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{1,7})#?|[- ]+([0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]{1,5})#)?$/i,
      Ga = /(\$\d)/;

  function Ha(a) {
    var b = a.search(Aa);
    0 <= b ? (a = a.substring(b), a = a.replace(Ca, ""), b = a.search(Ba), 0 <= b && (a = a.substring(0, b))) : a = "";
    return a;
  }

  function Ia(a) {
    return 2 > a.length ? !1 : O(Fa, a);
  }

  function Ja(a) {
    return O(Da, a) ? P(a, ya) : P(a, xa);
  }

  function Ka(a) {
    var b = Ja(a.toString());
    a.c = "";
    a.a(b);
  }

  function La(a) {
    return null != a && (1 != A(a, 9) || -1 != w(a, 9)[0]);
  }

  function P(a, b) {
    for (var c = new F(), d, e = a.length, f = 0; f < e; ++f) {
      d = a.charAt(f), d = b[d.toUpperCase()], null != d && c.a(d);
    }

    return c.toString();
  }

  function Q(a) {
    return null != a && isNaN(a) && a.toUpperCase() in wa;
  }

  function Ma(a, b, c) {
    if (0 == t(b, 2) && null != b.a[5]) {
      var d = y(b, 5);
      if (0 < d.length) return d;
    }

    d = y(b, 1);
    var e = R(b);
    if (0 == c) return Na(d, 0, e, "");
    if (!(d in K)) return e;
    a = S(a, d, T(d));
    b = null != b.a[3] && 0 != t(b, 3).length ? 3 == c ? ";ext=" + t(b, 3) : null != a.a[13] ? t(a, 13) + y(b, 3) : " ext. " + y(b, 3) : "";

    a: {
      a = 0 == w(a, 20).length || 2 == c ? w(a, 19) : w(a, 20);

      for (var f, g = a.length, h = 0; h < g; ++h) {
        f = a[h];
        var l = A(f, 3);
        if (0 == l || 0 == e.search(t(f, 3, l - 1))) if (l = new RegExp(t(f, 1)), O(l, e)) {
          a = f;
          break a;
        }
      }

      a = null;
    }

    null != a && (g = a, a = y(g, 2), f = new RegExp(t(g, 1)), y(g, 5), g = y(g, 4), e = 2 == c && null != g && 0 < g.length ? e.replace(f, a.replace(Ga, g)) : e.replace(f, a), 3 == c && (e = e.replace(/^[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\[\]/~\u2053\u223c\uff5e]+/, ""), e = e.replace(/[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\[\]/~\u2053\u223c\uff5e]+/g, "-")));
    return Na(d, c, e, b);
  }

  function S(a, b, c) {
    return "001" == c ? U(a, "" + b) : U(a, c);
  }

  function R(a) {
    if (null == a.a[2]) return "";
    var b = "" + t(a, 2);
    return null != a.a[4] && t(a, 4) && 0 < y(a, 8) ? Array(y(a, 8) + 1).join("0") + b : b;
  }

  function Na(a, b, c, d) {
    switch (b) {
      case 0:
        return "+" + a + c + d;

      case 1:
        return "+" + a + " " + c + d;

      case 3:
        return "tel:+" + a + "-" + c + d;

      default:
        return c + d;
    }
  }

  function V(a, b) {
    switch (b) {
      case 4:
        return t(a, 5);

      case 3:
        return t(a, 4);

      case 1:
        return t(a, 3);

      case 0:
      case 2:
        return t(a, 2);

      case 5:
        return t(a, 6);

      case 6:
        return t(a, 8);

      case 7:
        return t(a, 7);

      case 8:
        return t(a, 21);

      case 9:
        return t(a, 25);

      case 10:
        return t(a, 28);

      default:
        return t(a, 1);
    }
  }

  function W(a, b) {
    return X(a, t(b, 1)) ? X(a, t(b, 5)) ? 4 : X(a, t(b, 4)) ? 3 : X(a, t(b, 6)) ? 5 : X(a, t(b, 8)) ? 6 : X(a, t(b, 7)) ? 7 : X(a, t(b, 21)) ? 8 : X(a, t(b, 25)) ? 9 : X(a, t(b, 28)) ? 10 : X(a, t(b, 2)) ? t(b, 18) || X(a, t(b, 3)) ? 2 : 0 : !t(b, 18) && X(a, t(b, 3)) ? 1 : -1 : -1;
  }

  function U(a, b) {
    if (null == b) return null;
    b = b.toUpperCase();
    var c = a.a[b];

    if (null == c) {
      c = wa[b];
      if (null == c) return null;
      c = new E().a(I.f(), c);
      a.a[b] = c;
    }

    return c;
  }

  function X(a, b) {
    var c = a.length;
    return 0 < A(b, 9) && -1 == p(w(b, 9), c) ? !1 : O(y(b, 2), a);
  }

  function Oa(a, b) {
    if (null == b) return null;
    var c = y(b, 1);
    c = K[c];
    if (null == c) a = null;else if (1 == c.length) a = c[0];else a: {
      b = R(b);

      for (var d, e = c.length, f = 0; f < e; f++) {
        d = c[f];
        var g = U(a, d);

        if (null != g.a[23]) {
          if (0 == b.search(t(g, 23))) {
            a = d;
            break a;
          }
        } else if (-1 != W(b, g)) {
          a = d;
          break a;
        }
      }

      a = null;
    }
    return a;
  }

  function T(a) {
    a = K[a];
    return null == a ? "ZZ" : a[0];
  }

  function Y(a, b, c, d) {
    var e = V(c, d),
        f = 0 == A(e, 9) ? w(t(c, 1), 9) : w(e, 9);
    e = w(e, 10);
    if (2 == d) if (La(V(c, 0))) a = V(c, 1), La(a) && (f = f.concat(0 == A(a, 9) ? w(t(c, 1), 9) : w(a, 9)), q(f), 0 == e.length ? e = w(a, 10) : (e = e.concat(w(a, 10)), q(e)));else return Y(a, b, c, 1);
    if (-1 == f[0]) return 5;
    b = b.length;
    if (-1 < p(e, b)) return 4;
    c = f[0];
    return c == b ? 0 : c > b ? 2 : f[f.length - 1] < b ? 3 : -1 < p(f, b, 1) ? 0 : 5;
  }

  function Pa(a, b) {
    var c = R(b);
    b = y(b, 1);
    if (!(b in K)) return 1;
    b = S(a, b, T(b));
    return Y(a, c, b, -1);
  }

  function Qa(a, b, c, d, e, f) {
    if (0 == b.length) return 0;
    b = new F(b);
    var g;
    null != c && (g = t(c, 11));
    null == g && (g = "NonMatch");
    var h = b.toString();
    if (0 == h.length) g = 20;else if (N.test(h)) h = h.replace(N, ""), b.c = "", b.a(Ja(h)), g = 1;else {
      h = new RegExp(g);
      Ka(b);
      g = b.toString();

      if (0 == g.search(h)) {
        h = g.match(h)[0].length;
        var l = g.substring(h).match(za);
        l && null != l[1] && 0 < l[1].length && "0" == P(l[1], xa) ? g = !1 : (b.c = "", b.a(g.substring(h)), g = !0);
      } else g = !1;

      g = g ? 5 : 20;
    }
    e && u(f, 6, g);

    if (20 != g) {
      if (2 >= b.c.length) throw Error("Phone number too short after IDD");

      a: {
        a = b.toString();
        if (0 != a.length && "0" != a.charAt(0)) for (e = a.length, b = 1; 3 >= b && b <= e; ++b) {
          if (c = parseInt(a.substring(0, b), 10), c in K) {
            d.a(a.substring(b));
            d = c;
            break a;
          }
        }
        d = 0;
      }

      if (0 != d) return u(f, 1, d), d;
      throw Error("Invalid country calling code");
    }

    if (null != c && (g = y(c, 10), h = "" + g, l = b.toString(), 0 == l.lastIndexOf(h, 0) && (h = new F(l.substring(h.length)), l = t(c, 1), l = new RegExp(y(l, 2)), Ra(h, c, null), h = h.toString(), !O(l, b.toString()) && O(l, h) || 3 == Y(a, b.toString(), c, -1)))) return d.a(h), e && u(f, 6, 10), u(f, 1, g), g;
    u(f, 1, 0);
    return 0;
  }

  function Ra(a, b, c) {
    var d = a.toString(),
        e = d.length,
        f = t(b, 15);

    if (0 != e && null != f && 0 != f.length) {
      var g = new RegExp("^(?:" + f + ")");

      if (e = g.exec(d)) {
        f = new RegExp(y(t(b, 1), 2));
        var h = O(f, d),
            l = e.length - 1;
        b = t(b, 16);

        if (null == b || 0 == b.length || null == e[l] || 0 == e[l].length) {
          if (!h || O(f, d.substring(e[0].length))) null != c && 0 < l && null != e[l] && c.a(e[1]), a.set(d.substring(e[0].length));
        } else if (d = d.replace(g, b), !h || O(f, d)) null != c && 0 < l && c.a(e[1]), a.set(d);
      }
    }
  }

  function Z(a, b, c) {
    if (!Q(c) && 0 < b.length && "+" != b.charAt(0)) throw Error("Invalid country calling code");
    return Sa(a, b, c, !0);
  }

  function Sa(a, b, c, d) {
    if (null == b) throw Error("The string supplied did not seem to be a phone number");
    if (250 < b.length) throw Error("The string supplied is too long to be a phone number");
    var e = new F(),
        f = b.indexOf(";phone-context=");

    if (0 <= f) {
      var g = f + 15;

      if ("+" == b.charAt(g)) {
        var h = b.indexOf(";", g);
        0 < h ? e.a(b.substring(g, h)) : e.a(b.substring(g));
      }

      g = b.indexOf("tel:");
      e.a(b.substring(0 <= g ? g + 4 : 0, f));
    } else e.a(Ha(b));

    f = e.toString();
    g = f.indexOf(";isub=");
    0 < g && (e.c = "", e.a(f.substring(0, g)));
    if (!Ia(e.toString())) throw Error("The string supplied did not seem to be a phone number");
    f = e.toString();
    if (!(Q(c) || null != f && 0 < f.length && N.test(f))) throw Error("Invalid country calling code");
    f = new J();
    d && u(f, 5, b);

    a: {
      b = e.toString();
      g = b.search(Ea);

      if (0 <= g && Ia(b.substring(0, g))) {
        h = b.match(Ea);

        for (var l = h.length, z = 1; z < l; ++z) {
          if (null != h[z] && 0 < h[z].length) {
            e.c = "";
            e.a(b.substring(0, g));
            b = h[z];
            break a;
          }
        }
      }

      b = "";
    }

    0 < b.length && u(f, 3, b);
    g = U(a, c);
    b = new F();
    h = 0;
    l = e.toString();

    try {
      h = Qa(a, l, g, b, d, f);
    } catch (L) {
      if ("Invalid country calling code" == L.message && N.test(l)) {
        if (l = l.replace(N, ""), h = Qa(a, l, g, b, d, f), 0 == h) throw L;
      } else throw L;
    }

    0 != h ? (e = T(h), e != c && (g = S(a, h, e))) : (Ka(e), b.a(e.toString()), null != c ? (h = y(g, 10), u(f, 1, h)) : d && (delete f.a[6], f.c && delete f.c[6]));
    if (2 > b.c.length) throw Error("The string supplied is too short to be a phone number");
    null != g && (c = new F(), e = new F(b.toString()), Ra(e, g, c), a = Y(a, e.toString(), g, -1), 2 != a && 4 != a && 5 != a && (b = e, d && 0 < c.toString().length && u(f, 7, c.toString())));
    d = b.toString();
    a = d.length;
    if (2 > a) throw Error("The string supplied is too short to be a phone number");
    if (17 < a) throw Error("The string supplied is too long to be a phone number");

    if (1 < d.length && "0" == d.charAt(0)) {
      u(f, 4, !0);

      for (a = 1; a < d.length - 1 && "0" == d.charAt(a);) {
        a++;
      }

      1 != a && u(f, 8, a);
    }

    u(f, 2, parseInt(d, 10));
    return f;
  }

  function O(a, b) {
    return (a = "string" == typeof a ? b.match("^(?:" + a + ")$") : b.match(a)) && a[0].length == b.length ? !0 : !1;
  }

  ;
  m("intlTelInputUtils", {});
  m("intlTelInputUtils.formatNumber", function (a, b, c) {
    try {
      var d = M.a(),
          e = Z(d, a, b),
          f = Pa(d, e);
      return 0 == f || 4 == f ? Ma(d, e, "undefined" == typeof c ? 0 : c) : a;
    } catch (g) {
      return a;
    }
  });
  m("intlTelInputUtils.getExampleNumber", function (a, b, c) {
    try {
      var d = M.a();

      a: {
        if (Q(a)) {
          var e = V(U(d, a), c);

          try {
            if (null != e.a[6]) {
              var f = t(e, 6);
              var g = Sa(d, f, a, !1);
              break a;
            }
          } catch (h) {}
        }

        g = null;
      }

      return Ma(d, g, b ? 2 : 1);
    } catch (h) {
      return "";
    }
  });
  m("intlTelInputUtils.getExtension", function (a, b) {
    try {
      return t(Z(M.a(), a, b), 3);
    } catch (c) {
      return "";
    }
  });
  m("intlTelInputUtils.getNumberType", function (a, b) {
    try {
      var c = M.a();
      var d = Z(c, a, b),
          e = Oa(c, d),
          f = S(c, y(d, 1), e);
      if (null == f) var g = -1;else {
        var h = R(d);
        g = W(h, f);
      }
      return g;
    } catch (l) {
      return -99;
    }
  });
  m("intlTelInputUtils.getValidationError", function (a, b) {
    try {
      var c = M.a(),
          d = Z(c, a, b);
      return Pa(c, d);
    } catch (e) {
      return "Invalid country calling code" == e.message ? 1 : "The string supplied did not seem to be a phone number" == e.message ? 4 : "Phone number too short after IDD" == e.message || "The string supplied is too short to be a phone number" == e ? 2 : "The string supplied is too long to be a phone number" == e.message ? 3 : -99;
    }
  });
  m("intlTelInputUtils.isValidNumber", function (a, b) {
    try {
      var c = M.a(),
          d = Z(c, a, b);
      var e = Oa(c, d),
          f = y(d, 1),
          g = S(c, f, e),
          h;

      if (!(h = null == g)) {
        var l;

        if (l = "001" != e) {
          var z = U(c, e);
          if (null == z) throw Error("Invalid region code: " + e);
          var L = y(z, 10);
          l = f != L;
        }

        h = l;
      }

      if (h) var va = !1;else {
        var Ta = R(d);
        va = -1 != W(Ta, g);
      }
      return va;
    } catch (Ua) {
      return !1;
    }
  });
  m("intlTelInputUtils.numberFormat", {
    E164: 0,
    INTERNATIONAL: 1,
    NATIONAL: 2,
    RFC3966: 3
  });
  m("intlTelInputUtils.numberType", {
    FIXED_LINE: 0,
    MOBILE: 1,
    FIXED_LINE_OR_MOBILE: 2,
    TOLL_FREE: 3,
    PREMIUM_RATE: 4,
    SHARED_COST: 5,
    VOIP: 6,
    PERSONAL_NUMBER: 7,
    PAGER: 8,
    UAN: 9,
    VOICEMAIL: 10,
    UNKNOWN: -1
  });
  m("intlTelInputUtils.validationError", {
    IS_POSSIBLE: 0,
    INVALID_COUNTRY_CODE: 1,
    TOO_SHORT: 2,
    TOO_LONG: 3,
    NOT_A_NUMBER: 4
  });
})();

/***/ }),

/***/ "./resources/js/plugins.js":
/*!*********************************!*\
  !*** ./resources/js/plugins.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Allows you to add data-method="METHOD to links to automatically inject a form
 * with the method on click
 *
 * Example: <a href="{{route('customers.destroy', $customer->id)}}"
 * data-method="delete" name="delete_item">Delete</a>
 *
 * Injects a form with that's fired on click of the link with a DELETE request.
 * Good because you don't have to dirty your HTML with delete forms everywhere.
 */
function addDeleteForms() {
  $('[data-method]').append(function () {
    if (!$(this).find('form').length > 0) {
      return "\n<form action='" + $(this).attr('href') + "' method='POST' name='delete_item' style='display:none'>\n" + "<input type='hidden' name='_method' value='" + $(this).attr('data-method') + "'>\n" + "<input type='hidden' name='_token' value='" + $('meta[name="csrf-token"]').attr('content') + "'>\n" + '</form>\n';
    } else {
      return '';
    }
  }).attr('href', '#').attr('style', 'cursor:pointer;').attr('onclick', '$(this).find("form").submit();');
}
/**
 * Place any jQuery/helper plugins in here.
 */


$(function () {
  /**
   * Add the data-method="delete" forms to all delete links
   */
  addDeleteForms();
  /**
   * Disable all submit buttons once clicked
   */

  $('form').submit(function () {
    $(this).find('input[type="submit"]').attr('disabled', true);
    $(this).find('button[type="submit"]').attr('disabled', true);
    return true;
  });
  /**
   * Generic confirm form delete using Sweet Alert
   */

  $('body').on('submit', 'form[name=delete_item]', function (e) {
    e.preventDefault();
    var form = this;
    var link = $('a[data-method="delete"]');
    var cancel = link.attr('data-trans-button-cancel') ? link.attr('data-trans-button-cancel') : 'Cancel';
    var confirm = link.attr('data-trans-button-confirm') ? link.attr('data-trans-button-confirm') : 'Yes, delete';
    var title = link.attr('data-trans-title') ? link.attr('data-trans-title') : 'Are you sure you want to delete this item?';
    Swal.fire({
      title: title,
      showCancelButton: true,
      confirmButtonText: confirm,
      cancelButtonText: cancel,
      type: 'warning'
    }).then(function (result) {
      result.value && form.submit();
    });
  }).on('click', 'a[name=confirm_item]', function (e) {
    /**
     * Generic 'are you sure' confirm box
     */
    e.preventDefault();
    var link = $(this);
    var title = link.attr('data-trans-title') ? link.attr('data-trans-title') : 'Are you sure you want to do this?';
    var cancel = link.attr('data-trans-button-cancel') ? link.attr('data-trans-button-cancel') : 'Cancel';
    var confirm = link.attr('data-trans-button-confirm') ? link.attr('data-trans-button-confirm') : 'Continue';
    Swal.fire({
      title: title,
      showCancelButton: true,
      confirmButtonText: confirm,
      cancelButtonText: cancel,
      type: 'info'
    }).then(function (result) {
      result.value && window.location.assign(link.attr('href'));
    });
  });
  /* hide loader if 3sec or more time */

  setTimeout(function () {
    $(".loader-logo").fadeOut();
  }, 3000);
  /* left sidebar open */

  $('#left-menu').on('click', function () {
    $('body').toggleClass('sidebar-left-close');
  });
  $('.sidebar-left + div.backdrop').on('click', function () {
    $('body').addClass('sidebar-left-close');
  });
  /* left sidebar accordion menu */

  /* url  navigation active */

  var url = window.location;

  function menuitems() {
    var element = $('.sidebar .nav .nav-item a').filter(function () {
      return this.href == url;
      console.log(url);
    }).addClass('active').parent("li").addClass('active').closest('.nav').slideDown().addClass('in').prev().addClass('active').parent().addClass('show').closest('.nav').slideDown().addClass('in').parent().addClass('show');
  }

  menuitems();
  $('.sidebar .nav .nav-item .dropdwown-toggle').on('click', function () {
    if ($(this).hasClass('active') != true) {
      $('.sidebar .nav .nav-item .dropdwown-toggle').removeClass('active').next().slideUp();
      $(this).addClass('active').next().slideDown();
    } else {
      $(this).removeClass('active').next().slideUp();
    }
  });
  /* sidebar hide below 1100px resolution  */

  if ($(window).width() <= 1100) {
    $('body').addClass('sidebar-left-close');
  }

  $(window).on('load', function () {
    /* hide loader  */
    $('.loader').hide();
    $('.animatejack').addClass('jackInTheBox');
    $('.wrapper').css('padding-bottom', $('body > footer').outerHeight());
    $('body > footer').css('margin-top', -$('body > footer').outerHeight());
  });
}); // Jquery Dependency

/* $("input[data-type='currency']").on({
    keyup: function() {
      formatCurrency($(this));
    },
    blur: function() { 
      formatCurrency($(this), "blur");
    }
}); */

$("input[data-type='currency']").on({
  change: function change() {
    formatCurrency($(this));
  },
  keyup: function keyup() {
    formatCurrency($(this));
  },
  blur: function blur() {
    formatCurrency($(this), "blur");
  }
});
var count = 0;
$(".digit").click(function () {
  var num = $(this).attr('data-number');
  $("#currency-field").val(function () {
    return this.value + num;
  });
  formatCurrency($("#currency-field"));
});

function formatNumber(n) {
  // format number 1000000 to 1,234,567
  return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function formatCurrency(input, blur) {
  // appends $ to value, validates decimal side
  // and puts cursor back in right position.
  // get input value
  var input_val = input.val(); // don't validate empty input

  if (input_val === "") {
    return;
  } // original length


  var original_len = input_val.length; // initial caret position 

  var caret_pos = input.prop("selectionStart"); // check for decimal

  if (input_val.indexOf(".") >= 0) {
    // get position of first decimal
    // this prevents multiple decimals from
    // being entered
    var decimal_pos = input_val.indexOf("."); // split number by decimal point

    var left_side = input_val.substring(0, decimal_pos);
    var right_side = input_val.substring(decimal_pos); // add commas to left side of number

    left_side = formatNumber(left_side); // validate right side

    right_side = formatNumber(right_side); // On blur make sure 2 numbers after decimal

    if (blur === "blur") {
      right_side += "00";
    } // Limit decimal to only 2 digits


    right_side = right_side.substring(0, 2); // join number by .

    input_val = "$" + left_side + "." + right_side;
  } else {
    // no decimal entered
    // add commas to number
    // remove all non-digits
    input_val = formatNumber(input_val);
    input_val = "$" + input_val; // final formatting

    if (blur === "blur") {
      input_val += ".00";
    }
  } // send updated string to input


  input.val(input_val); // put caret back in the right position

  var updated_len = input_val.length;
  caret_pos = updated_len - original_len + caret_pos;
  input[0].setSelectionRange(caret_pos, caret_pos);
  console.log(input_val);
  /* var modal = document.querySelector('#test');
  modal.innerHTML = input_val; 
    */

  var element = document.getElementById("currency-input").value = input_val.replace(/[$]/, "");
}

(function ($) {
  $(document).on("click", ".dropdown-menu.show a.dropdown-item", function () {
    var text = $(this).find('.funding-button-text').html();
    $('.funding-button').text(text);
    console.log(text);
  });
})(jQuery);

/***/ }),

/***/ "./resources/sass/backend/app.scss":
/*!*****************************************!*\
  !*** ./resources/sass/backend/app.scss ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./resources/sass/frontend/app.scss":
/*!******************************************!*\
  !*** ./resources/sass/frontend/app.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*****************************************************************************************************************!*\
  !*** multi ./resources/js/frontend/app.js ./resources/sass/frontend/app.scss ./resources/sass/backend/app.scss ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\xampp\htdocs\AkwaCash\resources\js\frontend\app.js */"./resources/js/frontend/app.js");
__webpack_require__(/*! C:\xampp\htdocs\AkwaCash\resources\sass\frontend\app.scss */"./resources/sass/frontend/app.scss");
module.exports = __webpack_require__(/*! C:\xampp\htdocs\AkwaCash\resources\sass\backend\app.scss */"./resources/sass/backend/app.scss");


/***/ })

},[[0,"/js/manifest","/js/vendor"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,